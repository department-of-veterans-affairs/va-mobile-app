diff --git a/node_modules/@types/node/globals.d.ts b/node_modules/@types/node/globals.d.ts
index ae974db..b09a691 100755
--- a/node_modules/@types/node/globals.d.ts
+++ b/node_modules/@types/node/globals.d.ts
@@ -41,40 +41,40 @@ declare var exports: any;
  */
 declare var gc: undefined | (() => void);
 
-//#region borrowed
-// from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib
-/** A controller object that allows you to abort one or more DOM requests as and when desired. */
-interface AbortController {
-    /**
-     * Returns the AbortSignal object associated with this object.
-     */
-
-    readonly signal: AbortSignal;
-    /**
-     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
-     */
-    abort(): void;
-}
-
-/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */
-interface AbortSignal {
-    /**
-     * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
-     */
-    readonly aborted: boolean;
-}
-
-declare var AbortController: {
-    prototype: AbortController;
-    new(): AbortController;
-};
-
-declare var AbortSignal: {
-    prototype: AbortSignal;
-    new(): AbortSignal;
-    // TODO: Add abort() static
-};
-//#endregion borrowed
+// //#region borrowed
+// // from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib
+// /** A controller object that allows you to abort one or more DOM requests as and when desired. */
+// interface AbortController {
+//     /**
+//      * Returns the AbortSignal object associated with this object.
+//      */
+
+//     readonly signal: AbortSignal;
+//     /**
+//      * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
+//      */
+//     abort(): void;
+// }
+
+// /** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */
+// interface AbortSignal {
+//     /**
+//      * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
+//      */
+//     readonly aborted: boolean;
+// }
+
+// declare var AbortController: {
+//     prototype: AbortController;
+//     new(): AbortController;
+// };
+
+// declare var AbortSignal: {
+//     prototype: AbortSignal;
+//     new(): AbortSignal;
+//     // TODO: Add abort() static
+// };
+// //#endregion borrowed
 
 //#region ArrayLike.at()
 interface RelativeIndexable<T> {
