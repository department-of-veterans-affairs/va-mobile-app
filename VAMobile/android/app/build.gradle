apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "kotlin-android"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    flavorDimensions "default"

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "gov.va.mobileapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode readBuildCode()
        versionName readVersionName()
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../keys/vamobile')
            storePassword System.getenv("ANDROID_KS_PW")
            keyAlias System.getenv("ANDROID_KS_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_KS_KEY_PW")
        }
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**/armeabi-v7a/libc++_shared.so', '**/x86/libc++_shared.so', '**/x86_64/libc++_shared.so', '**/arm64-v8a/libc++_shared.so', '**/libjsc.so']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    appIcon:"ic_launcher",
                    appIconRound:"ic_launcher_round"
            ]
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon:"ic_launcher",
                    appIconRound:"ic_launcher_round"
            ]
        }
        rc {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    appIcon:"ic_launcher_rc",
                    appIconRound:"ic_launcher_rc_round"
            ]
            matchingFallbacks = ['release', 'debug']
            versionNameSuffix = ".RC"
        }
        qaFirebase {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    appIcon:"ic_launcher_qa",
                    appIconRound:"ic_launcher_qa_round"
            ]
            matchingFallbacks = ['release', 'debug']
            versionNameSuffix = ".QA"
        }
        qaStore{
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon:"ic_launcher_qa",
                    appIconRound:"ic_launcher_qa_round"
            ]
            matchingFallbacks = ['release', 'debug']
            versionNameSuffix = ".QA"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }

}

dependencies {

        //Please make sure the jsc dependency is before the React Native dependency.
     if (enableHermes) {
        //noinspection GradleDynamicVersion
        implementation("com.facebook.react:hermes-engine:+") { // From node_modules
            exclude group:'com.facebook.fbjni'
        }
    } else {
        implementation jscFlavor
    }

    implementation fileTree(dir: "libs", include: ["*.jar"])

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    // kotlin
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    implementation project(':react-native-notifications')
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation "com.google.firebase:firebase-iid"

    // playstore core for in-app reviews
    implementation 'com.google.android.play:core:1.10.0'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    // custom tabs
    implementation 'androidx.browser:browser:1.5.0'

    implementation 'androidx.appcompat:appcompat:1.3.1'
    androidTestImplementation('com.wix:detox:+') { exclude module: "protobuf-lite" }
    androidTestImplementation('com.google.firebase:firebase-iid'){
        exclude group: 'com.google.firebase:firebase-iid'
    }

    implementation project(':lottie-react-native')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// fastlane build tasks and defs
def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {

    } finally {
        if (stream != null) stream.close()
    }
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    if (!version['build']) version['build'] = "1"
    return version
}

def readAppName() {
    def nameFile = new File(project.rootDir, 'appName.properties')
    def name = new Properties()
    def stream
    try {
        stream = new FileInputStream(nameFile)
        name.load(stream)
    } catch (FileNotFoundException ignore) {

    } finally {
        if (stream != null) stream.close()
    }
    if(!name['appName']) name['appName'] = "VA"
    return name
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['patch']}"
}

def readBuildCode() {
    def version = readVersion()
    def build = version['build'] as int
    return build
}

def readAppLabel() {
    def name = readAppName()
    return name['appName']
}

def incrementVersionNumber(def type = "build") {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()
    def latestVersion = project.hasProperty('latestVersion') ? project.property('latestVersion') : "1.0.0"
    def latestBuild = project.hasProperty('latestBuild') ? project.property('latestBuild') as int : 1
    def (mj, mn, pt ) = latestVersion.tokenize('.')
    def build = latestBuild
    def major = mj as int
    def minor = mn as int
    def patch = pt as int

    if (type == 'major') {
        major++
        minor = 0
        patch = 0
    } else if (type == 'minor') {
        minor++
        patch = 0
    } else if (type == 'patch') {
        patch++
    }

    build++

    version['major'] = major.toString()
    version['minor'] = minor.toString()
    version['patch'] = patch.toString()
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
    return build
}

def setVersionNumber() {
  print "setVersionNumber\n"
  def versionFile = new File(project.rootDir, 'version.properties')
  def versionNumber = project.hasProperty('version') ? project.property('version') : "1.0.0"
  def build = project.hasProperty('latestBuild') ? project.property('latestBuild') as int : 1
  def version = readVersion()
  def v = versionNumber.split('\\.')
  build++
  version['major'] = v[0].toString()
  version['minor'] = v[1].toString()
  version['patch'] = v[2].toString()
  version['build'] = build.toString()
  def stream = new FileOutputStream(versionFile)
  try {
      version.store(stream, null)
  } finally {
      stream.close()
  }
  return build
}

def renameApp(newName) {
    def nameFile = new File(project.rootDir, 'appName.properties')
    def name = readAppName()
    name['appName'] = newName
    def stream = new FileOutputStream(nameFile)
    try {
        name.store(stream, null)
    } finally {
        stream.close()
    }
    return name
}

task doNewMajorVersion() {
    doLast {
        println "Incrementing Major version..."
        incrementVersionNumber('major')
    }
}

task doNewMinorVersion {
    doLast {
        println "Incrementing Minor Version..."
        incrementVersionNumber('minor')
    }
}

task doNewPatchVersion {
    doLast {
        println "Incrementing Patch Number..."
        incrementVersionNumber('patch')
    }
}

task doNewQaVersion {
    doLast {
        incrementVersionNumber('qa')
        println "Renaming for QA Build"
        renameApp("VA-QA")
    }
}

task getVersionName {
    doLast {
        def version = readVersion()
        println "^^${version['major']}.${version['minor']}.${version['patch']}^^"
        return
    }
}

task getBuildNum {
    doLast {
        def version = readVersion()
        def build = version['build'] as int
        println "^^${build}^^"
        return
    }
}

task updateVersionNumber {
  doLast {
    print "updateVersionNumber\n"
    def build = setVersionNumber()
    return
  }
}
