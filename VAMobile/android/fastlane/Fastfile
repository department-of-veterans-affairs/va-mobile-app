# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  before_all do |lane, options|
    import('../../fastfiles/slack_commands/fastfile')
    version = options[:version]
    puts('deploying to ' + lane.to_s + ' with version: ' + version.to_s)
  end

  desc "Deploy a QA new version to the Google Play"
  lane :qa do |options|
    update_version_and_build(options[:version ])
    ENV['VERSION_NAME'] = gradle(task: '-q getVersionName').split('^^')[1]
    ENV['BUILD_NUM'] = gradle(task: '-q getBuildNum').split('^^')[1]
    gradle(task: "clean")
    gradle(task: "bundle", build_type: "Release")
    supply(track: "Development Team")
    message = "New QA build successfully uploaded to Google Play"
    slack_build_success(ENV['BUILD_NUM'], ENV['VERSION_NAME'], "QA", message, "Android")
  end

  # review lane uploads to beta track for promotion to the store on release date
  desc "Build new Production version for Google Play and stash in Pre-Prod Stash track"
  lane :review do |options|
    puts 'Run the review lane'
    update_version_and_build(options[:version ])
    ENV['VERSION_NAME'] = gradle(task: '-q getVersionName').split('^^')[1]
    ENV['BUILD_NUM'] = gradle(task: '-q getBuildNum').split('^^')[1]
    gradle(task: "clean")
    gradle(task: "bundle", build_type: "Release")
    supply(track: "Pre-Prod Stash")
    add_git_tag(tag: "android-build-" + ENV['BUILD_NUM'])
    message = "New Production build successfully uploaded to Beta Track on Google Play"
    slack_build_success(ENV['BUILD_NUM'], ENV['VERSION_NAME'], "Beta", message, "Android")
  end

  desc "Promote the release in Pre-Prod stash to Production"
  lane :release do
    prod = google_play_track_version_codes(track:"production")
    stash =  google_play_track_version_codes(track:"Pre-Prod Stash")
    # if prod.max is greater or equal, promoting will fail because prod has a more recent build.
    if stash.max > prod.max
      supply(track: "Pre-Prod Stash", track_promote_to: "production", version_code: stash.max)
      version = google_play_track_release_names(track:"production")
      slack_release_success(version.max_by{ |s| Gem::Version.new(s) }, "Android")
    end
  end

  after_all do |lane, options|
    # This block is called, only if the executed lane was successful
    # always reset the name to VA
    sh("git checkout ../appName.properties")
    if lane == 'qa'
      commit_version_bump('develop')
    end
  end

  error do |lane, exception, options|
      puts("ERROR REPORT")
      slack_build_error(exception, options[:version], "Android Build Failed", "Android")
  end

# method to update the version and build in the repo
  def update_version_and_build(version)
    latestBuild = get_latest_build_num
    if version=='qa'
      latestVersion = get_latest_version_name
      puts('latest build is ' + latestBuild.to_s)
      puts('latest version is ' + latestVersion.to_s)
      props = { latestBuild: latestBuild, latestVersion: latestVersion }
      gradle(task: 'doNewQaVersion', properties: props)
    else
      versionNumber = /\d+\.\d+\.\d+/.match(version)
      puts('latest build is ' + latestBuild.to_s)
      puts('release version is ' + versionNumber.to_s)
      props = { latestBuild: latestBuild, version: versionNumber }
      gradle(task: 'updateVersionNumber', properties: props)
    end
  end


# method to get the highest build number from all tracks in the Play Store
  def get_latest_build_num
    allLanes = ["production", "beta", "Ad Hoc Production Testers","Development Team","UAT Group","VA Production Testers","VA Production Testers", "Temp - Push", "508 Office", "Pre-Prod Stash"]
    highest = 0
    allLanes.each do |track|
      builds = google_play_track_version_codes(track:track.to_s)
      if builds.max > highest
        highest = builds.max
      end
    end
    highest
  end

# method to get the highest version number from all tracks in the Play Store
  def get_latest_version_name
  allLanes = ["production", "beta",  "Ad Hoc Production Testers","Development Team","UAT Group","VA Production Testers","VA Production Testers", "Temp - Push", "508 Office", "Pre-Prod Stash"]
      highest = "0.0.0"
      allLanes.each do |track|
        versions = google_play_track_release_names(track:track.to_s)
        max = versions.max_by{ |s| Gem::Version.new(s) }
        if  max > highest
          highest = max
        end
      end
      highest
  end

  def commit_version_bump(branch)
    name = ENV['VERSION_NAME']
    build = ENV['BUILD_NUM']
    message = 'Android version bump to ' + name + ' (' + build + ')'
    puts message
    desc "Committing Android version changes to git"
    begin
      if options[:version] == 'qa'
        sh("git stash save CI-BUILD")
        sh("git checkout " + branch)
        git_pull
        sh("git stash pop")
        sh("git add -A")
        sh("git commit -m '" + message + "'")
        add_git_tag(tag: "android-build-" + build)
        push_to_git_remote
      end
    rescue => e
      slack_github_error(e, action)
    end
  end

end
