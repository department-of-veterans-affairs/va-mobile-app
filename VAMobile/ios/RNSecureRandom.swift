//
//  RNSecureRandom.swift
//  VAMobile
//
//  Created by Pasquale L Saxton on 6/22/21.
//

import Foundation
import CryptoKit

@objc(RNSecureRandom)
class RNSecureRandom: NSObject, RCTBridgeModule {
  /// This sends the name of the module to React Native so that it can be imported from NativeModules
  /// - Returns: "RNSecureRandom"
  static func moduleName() -> String! {
    return "RNSecureRandom"
  }
  
  /// Tells Native OS to set this module up on the Main thread
  /// - Returns: true
  static func requiresMainQueueSetup() -> Bool {
    return true
  }
  
  /// Generates a random array of size equal to count parameter and returns the
  /// random array as a base64 string
  /// - Parameters:
  ///   - count: size in bytes of the array to generate
  ///   - resolve: React Native Promise resolver.
  ///   - reject: React Native Promise rejecter.
  /// - Returns: resolves with the base64 version of the generated byte array.
  @objc(generateBase64:resolver:rejecter:)
  func generateBase64(_ count: NSNumber, resolve: @escaping RCTPromiseResolveBlock, rejecter reject: @escaping RCTPromiseRejectBlock)-> Void {
    var bytes = [UInt8](repeating: 0, count: Int(truncating: count))
    let status = SecRandomCopyBytes(kSecRandomDefault, bytes.count, &bytes)

    if status == errSecSuccess { // Always test the status.
      let data = NSData(bytes: bytes, length: bytes.count)
      let dataStr = data.base64EncodedString(options: [])
      resolve(dataStr)
    } else {
      reject("000", "RNSecureRandom Error", RNSecureRandomError.generationError)
    }
  }

  /// Generates a SHA256 hash of the string received and returns a base64 encoded version
  /// of that hash.
  /// - Parameters:
  ///   - string: string to hash
  ///   - resolve: React Native Promise resolver.
  ///   - reject: React Native Promise rejecter.
  /// - Returns: resolves with the base64 version of the generated SHA256 hash.
  @objc(generateSHA256String:resolver:rejecter:)
  func generateSHA256String(_ string: String, resolve: @escaping RCTPromiseResolveBlock, rejecter reject: @escaping RCTPromiseRejectBlock) -> Void {
    if let data = string.data(using: .utf8) {
      let hash = SHA256.hash(data: data)
      resolve(Data(hash).base64EncodedString(options: []))
    } else {
      reject("001", "RNSecureRandom Error", RNSecureRandomError.generationError)
    }
  }
}
// Error class for RNSecureRandom Module

public enum RNSecureRandomError: Error {
  case generationError
}

extension RNSecureRandomError: LocalizedError {
  public var errorDescription: String? {
    switch self {
      case .generationError:
        return NSLocalizedString("RNSecureRandom Generation error", comment: "unknown error")
    }
  }
}
