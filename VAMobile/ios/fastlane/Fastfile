# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:ios)

platform :ios do
  before_all do |lane, options|
    version = options[:version]
    app_store_connect_api_key(
              key_id: ENV['APPSTORE_CONNECT_API_KEY_ID'],
              issuer_id: ENV['APPSTORE_CONNECT_API_KEY_ISSUER_ID'],
              key_filepath: ENV['APPSTORE_CONNECT_FILEPATH'],
              in_house: false
            )
    # will need to add app_store_build_number and a max check once there is a live version of the app.
    latest_testflight_build_number
    versionNum = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
    buildNum = lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]
    # set the version to the what is in app store, just in case there was drift
    increment_version_number(version_number: versionNum)
    # update the version with the correct type of bump
    update_version(version)
    # increment the build app_store_build_number
    increment_build_number(build_number: buildNum + 1, xcodeproj: "VAMobile.xcodeproj")
  end


  desc "Push a new internal QA build to TestFlight"
  lane :qa do
    puts('Begin QA lane' )
    update_info_plist(xcodeproj: "VAMobile.xcodeproj", plist_path: "VAMobile/Info.plist", display_name: "VAMobile-QA Build")
    set_up_code_signing
  end

  desc "Push new demo version to TestFlight"
  lane :demo do
    puts('Begin Demo lane')
    update_info_plist(xcodeproj: "VAMobile.xcodeproj", plist_path: "VAMobile/Info.plist", display_name: "VAMobile-Demo Build")
    set_up_code_signing
end

### UTILITIES ###

# updates the build and version number
def update_version (version)
  puts('version: ' + version.to_s)
  if version=='major'
      increment_version_number(bump_type: "major", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    elsif version=='minor'
      increment_version_number(bump_type: "minor", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    elsif version=='patch'
      increment_version_number(bump_type: "patch", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    end
  end
end

# sets up the build box env with the ios signing keys
def set_up_code_signing
  create_keychain(
    name: ENV['IOS_KEYCHAIN_NAME'],
    password: ENV['IOS_KEYCHAIN_PASSWORD'],
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
   )
   install_provisioning_profile(path: ENV['IOS_PROVISIONING_PATH'])
   import_certificate(
     certificate_path: ENV['IOS_CERTIFICATE_PATH'],
     certificate_password: ENV['IOS_CERTIFICATE_PASSWORD'],
     keychain_name: ENV['IOS_KEYCHAIN_NAME'],
     keychain_password: ENV['IOS_KEYCHAIN_PASSWORD']
   )
end

# delete the temp keychain we build on the box
def delete_temp_keychain
  delete_keychain(name: ENV['IOS_KEYCHAIN_NAME'])
end
