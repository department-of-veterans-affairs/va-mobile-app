# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do |lane, options|
    setup_circle_ci
    import('../../fastfiles/slack_commands/fastfile')
    version = options[:version]
    app_store_connect_api_key(
              key_id: ENV['APPSTORE_CONNECT_API_KEY_ID'],
              issuer_id: ENV['APPSTORE_CONNECT_API_KEY_ISSUER_ID'],
              key_filepath: ENV['APPSTORE_CONNECT_FILEPATH'],
              in_house: false
            )
    # will need to add app_store_build_number and a max check once there is a live version of the app.
    latest_testflight_build_number
    # set the version to the what is in app store, just in case there was drift
    increment_version_number(version_number: lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION])
    # update the version with the correct type of bump
    update_version(version)
    # increment the build app_store_build_number
    increment_build_number(build_number: lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER] + 1, xcodeproj: ENV['IOS_PROJ_FILE'])
  end

  desc "Push a new internal QA build to TestFlight"
  lane :qa do
    puts('Begin QA lane' )
    update_info_plist(xcodeproj: "VAMobile.xcodeproj", plist_path:"VAMobile/Info.plist" , display_name: "VA-QA")
    match(type: "appstore", readonly: true)
    gym(
      workspace: "VAMobile.xcworkspace",
      scheme: ENV['IOS_SCHEME'],
      silent: true,
      export_method: "app-store",
    )
    upload_to_testflight(
      api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
      beta_app_review_info: {
          notes: "New QA version for " + Time.new.strftime("%m.%d.%Y")
        },
      distribute_external: true,
      notify_external_testers: true,
      groups: ["Development Team"],
      changelog: "New QA version for " + Time.new.strftime("%m.%d.%Y")
    )
    upload_symbols_to_crashlytics(dsym_path: "VAMobile.app.dSYM.zip")
    message = "New QA build successfully uploaded to TestFlight"
    slack_build_success(lane_context[SharedValues::BUILD_NUMBER], lane_context[SharedValues::VERSION_NUMBER], "QA", message, "iOS")
  end

  desc "Push new demo version to TestFlight"
  lane :demo do
    puts('Begin Demo lane')
    test_import
  end

  after_all do |lane, options|
    # This block is called, only if the executed lane was successful
    name = lane_context[SharedValues::VERSION_NUMBER]
    build = lane_context[SharedValues::BUILD_NUMBER]
    message = 'iOS version bump to ' + name + ' (' + build + ')'
    puts message
    desc "Committing iOS version changes to git"
    begin
      if options[:version] == 'qa'
        update_info_plist(xcodeproj: "VAMobile.xcodeproj", plist_path:"VAMobile/Info.plist" , display_name: "VA")
        sh("git stash save CI-BUILD")
        sh("git checkout develop")
        git_pull
        sh("git stash pop")
        sh("git add -A")
        sh("git commit -m '" + message + "'")
        push_to_git_remote
      end
    rescue => e
      slack_github_error(e, action)
    end
  end

  error do |lane, exception, options|
    puts("ERROR REPORT")
    slack_build_error(exception, options[:version], "iOS Build Failed", "iOS")
  end
  ### UTILITIES ###

  # updates the build and version number
  def update_version (version)
    puts('version: ' + version.to_s)
    if version=='major'
        increment_version_number(bump_type: "major", xcodeproj: ENV['IOS_PROJ_FILE'])
    elsif version=='minor'
      increment_version_number(bump_type: "minor", xcodeproj: ENV['IOS_PROJ_FILE'])
    elsif version=='patch'
      increment_version_number(bump_type: "patch", xcodeproj: ENV['IOS_PROJ_FILE'])
    end
  end

end
