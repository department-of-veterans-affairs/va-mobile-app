version: 2.1
executors:
  default:
    docker:
      - image: cimg/ruby:2.4.10-node
  android:
    docker:
      - image: circleci/android:api-30-node
    resource_class: large
  ios:
    macos:
      xcode: 12.4.0
commands:
  install_deps:
    description: "Install dependencies"
    parameters:
      environment:
        type: string
        default: staging
    steps:
      - run:
          command: |
            cd VAMobile
            ls
#            echo INSTALLING GPG
#            brew install gnupg gnupg2
#            echo INSTALLING YARN
#            npm install yarn
#            echo INSTALLING NODE MODULES
#            yarn install --frozen-lockfile --non-interactive
#            echo CREATING ENV FILE FOR env:<<parameters.environment>>
#            yarn env:<<parameters.environment>>
  lint:
    description: "Run lint"
    steps:
      - run:
          command: |
            cd VAMobile
            yarn lint:ci
          when: always
  jest:
    description: "Run jest"
    steps:
      - run:
          command: |
            cd VAMobile
            yarn test -w 1
          when: always
      - store_test_results:
          path: VAMobile/coverage/junit/
  go_to_ios_dir:
    description: "navigates to ios directory"
    steps:
      - run:
          command: |
            echo CHANGING TO IOS DIRECTORY
            cd ~/project/VAMobile/ios
  go_to_android_dir:
    description: "navigates to android directory"
    steps:
      - run:
          command: |
            echo CHANGING TO ANDROID DIRECTORY
            cd ~/project/VAMobile/android
  create_keys_directory:
    description: "create directory for google keys"
    steps:
      - run:
          command: mkdir VAMobile/android/keys
  decode_file:
    description: "Decode a base64 string to gpg, decrypt and save to destination"
    parameters:
      secretString:
        type: string
      gpgPassphrase:
        type: string
      destination:
        type: string
    steps:
      - run:
          command: |
            mkdir ./tempSecrets
            # decode base64 secret string
            echo <<parameters.secretString>> | base64 --decode | tee ./tempSecrets/secret.gpg >/dev/null
            gpg --quiet --batch --yes --decrypt --passphrase="<<parameters.gpgPassphrase>>" \
            --output <<parameters.destination>> ./tempSecrets/secret.gpg
      - run:
          command: ls
  decode_ios_keys:
    description: "Decodes all of the ios files needed to upload to Test Flight"
    steps:
      - go_to_ios_dir
      - decode_file:
          secretString: ${IOS_CERTIFICATE_BASE64}
          gpgPassphrase: ${IOS_CERTIFICATE_GPG_PASSPHRASE}
          destination: ${IOS_CERTIFICATE_PATH}
      - decode_file:
          secretString: ${IOS_PROVISIONING_BASE64}
          gpgPassphrase: ${IOS_PROVISIONING_GPG_PASSPHRASE}
          destination: ${IOS_PROVISIONING_PATH}

jobs:
  test:
    executor: default
    steps:
      - checkout
      - install_deps
      - lint
      - jest
  run:
    executor: default
    steps:
      - run: echo "run"
  decrypt:
    executor: ios
    steps:
      - checkout
      - install_deps
      - decode_ios_keys
workflows:
  pr:
    jobs:
      - test
      - run
  fastlane:
    jobs:
      - decrypt:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /^feature/fastlane1/


