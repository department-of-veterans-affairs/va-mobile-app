{"searchDocs":[{"title":"Writing component documentation","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation","content":"","keywords":"","version":"Next"},{"title":"1 Do some homework​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#1-do-some-homework","content":" Start by looking at how other folks document the same or similar components. Feel free to borrow from their wording as it makes sense.  Good example: An overflow menu is used to convey at least two actions for a card or list item. This component helps users understand discrete actions that are related to the specific item from where they are launched, without affecting the whole screen.  Example that needs work: Menus are used for items that have various options. Users like to select two options.  ","version":"Next","tagName":"h2"},{"title":"App resources​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#app-resources","content":" Human Interface Guidelines (Apple)Material Design (Android)  ","version":"Next","tagName":"h3"},{"title":"VA & Government resources​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#va--government-resources","content":" VA Design System - When it makes sense, borrow from VA.gov to ensure our system feels like part of the VA family.USWDSGOV.UK Design System  ","version":"Next","tagName":"h3"},{"title":"Other resources​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#other-resources","content":" Component Gallery: Collection of components and how other design systems document them Design Systems Repo | A Collection of Design System Resources  ","version":"Next","tagName":"h3"},{"title":"2 Write a draft following the template​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#2-write-a-draft-following-the-template","content":" Now that you’ve done a bit of homework, start writing a draft. Our component documentation template is aligned with how the VA.gov design system documents components. The sections include:  PurposeExamplesUsage When to use the componentWhen to consider something elseHow the component worksBehaviorChoosing between variationsPlacementDesign principlesInstances of the component in production Code usageContent considerationsAccessibility considerationsRelated components  As you work on your draft, feel free to reference our existing components on the documentation site.  Note: If you prefer to start working in Google Docs, we have a template for that as well.  ","version":"Next","tagName":"h2"},{"title":"3 Review and submit the ticket​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#3-review-and-submit-the-ticket","content":" Once you’ve completed your draft, share it with a teammate to review. When you’re ready to publish the documentation, tag the Design System product manager in the ticket and they’ll assign it to the team to review your documentation.  Your documentation will typically be reviewed by a designer, engineer, content designer, and accessibility specialist. If the team has any questions, they’ll reach out to you directly. If it looks good, they’ll publish your documentation.  ","version":"Next","tagName":"h2"},{"title":"Need help?​","type":1,"pageTitle":"Writing component documentation","url":"/va-mobile-app/design/About/Contributing to the design system/writing-component-documentation#need-help","content":" If you have questions along the way, reach out to the Design System team in Slack. ","version":"Next","tagName":"h2"},{"title":"Contributing to the design system","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Contributing to the design system","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system#overview","content":" Veteran-facing teams are expected to use design system patterns and components when possible. If existing components or patterns will not work to address needed designs, teams can suggest new components or patterns by going through the process outlined below.  All new components or patterns should go through this process. We recommend starting this process before sharing new designs widely with stakeholders.  This process works best if started before development begins, during the design phase.  When considering if a component or pattern should be added to the design system there are a few criteria that define a “good” candidate:  The component or pattern is already being used on more than one screen, or the designer can give examples of multiple places the component could be used.The component or pattern is different in more than one major way than existing components in the design system, if the component is only different in color or format, for instance, then it would be better as a variant of the existing component. Note that variants of existing components should also go through this experimental process.Our existing components and patterns will not solve the user problems sufficiently.Native components and patterns will not solve the user problems sufficiently.  ","version":"Next","tagName":"h2"},{"title":"Suggest an addition or update​","type":1,"pageTitle":"Contributing to the design system","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system#suggest-an-addition-or-update","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1​","type":1,"pageTitle":"Contributing to the design system","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system#step-1","content":" Review the criteria for a “good” candidate above.  If your addition or update is a good candidate, proceed to Step 2.If you’re not sure if it’s a good candidate, reach out to the Design System team in Slack.  ","version":"Next","tagName":"h3"},{"title":"Step 2​","type":1,"pageTitle":"Contributing to the design system","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system#step-2","content":" Fill out the GitHub issue template for contributing to the design system. In the issue, you will need to provide justification for the component or pattern, and link to any artifacts you want to include.  Note that you do not need to have anything coded at this point, and in fact, we suggest not having anything coded since ideally ideas would be surfaced before teams put effort into building new components.Additionally, the artifacts you include do not need to be high fidelity. They only need to be able to illustrate your concept. We do, however, encourage some thoughts on how your component or pattern will work.  After filling out the issue template, post in the Design System slack channel to alert the team that you have filled out an issue. The team will reach out to you with any questions, feedback, and next steps.  ","version":"Next","tagName":"h3"},{"title":"Step 3​","type":1,"pageTitle":"Contributing to the design system","url":"/va-mobile-app/design/About/Contributing to the design system/contributing-to-the-design-system#step-3","content":" Work with the Design System team to add your component to the backlog, update or add the component in Figma, write usage guidelines for it, and build it into the design system. ","version":"Next","tagName":"h3"},{"title":"VA Mobile Design System - Assets Package","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/assets","content":"","keywords":"","version":"Next"},{"title":"For consumers​","type":1,"pageTitle":"VA Mobile Design System - Assets Package","url":"/va-mobile-app/design/About/For engineers/assets#for-consumers","content":" The Assets package is a peer dependency to the Components package so it is expected to be added separately via your package manager (e.g. yarn) alongside using components. It does not contain any code, so it is up to the consumer to configure the package to be leveraged by their app, notably the fonts so they are available within your app for the components.  The components package contains an Icon convenience component that makes leveraging both the assets package icons and custom SVGs specific to your app easy; it is highly recommended to use for icon needs. A visual list of available icons can be found in Storybook.  ","version":"Next","tagName":"h2"},{"title":"For contributors​","type":1,"pageTitle":"VA Mobile Design System - Assets Package","url":"/va-mobile-app/design/About/For engineers/assets#for-contributors","content":" Before contributing, consider if the contribution is necessary. This package is intended for shared assets. If your asset is only relevant to a specific app, then it should be handled within the app.  ","version":"Next","tagName":"h2"},{"title":"Fonts and Images​","type":1,"pageTitle":"VA Mobile Design System - Assets Package","url":"/va-mobile-app/design/About/For engineers/assets#fonts-and-images","content":" For fonts and images, contributing is as simple as adding the asset to the package via the GitHub web interface using the add file/folder buttons and creating a PR.  ","version":"Next","tagName":"h3"},{"title":"Icons​","type":1,"pageTitle":"VA Mobile Design System - Assets Package","url":"/va-mobile-app/design/About/For engineers/assets#icons","content":" The majority of the included icons originate from a sprite sheet from @department-of-veterans-affairs/component-library. We have a script which extracts each of the SVGs from the sprite and saves them to the icons/vads folder. This makes them easier to use with the aforementioned Icon component.  For icons intended for use across VA web and mobile, please consult with VADS as they must be approved by the Design System Council before they can be added to the source sprite. Keep in mind the Icon convenience component can handle custom SVGs to help display an app-specific icon without it being part of the assets package. ","version":"Next","tagName":"h3"},{"title":"For designers","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/designers","content":"","keywords":"","version":"Next"},{"title":"Documentation and resources​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#documentation-and-resources","content":" ","version":"Next","tagName":"h2"},{"title":"Working with the design system​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#working-with-the-design-system","content":" The VA Mobile Design System is the VA Mobile App’s front-end framework. Before getting started, we recommend that you get familiar with the VA Mobile Design System and how you can use it as part of your design process. Each section includes some helpful information:  Components. Components are the building blocks of the user interfaces. For example, accordions and buttons. Some of these have strict usage guidelines, so please become familiar with them.  ","version":"Next","tagName":"h3"},{"title":"Referencing the VA.gov design system​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#referencing-the-vagov-design-system","content":" The VA Mobile Design System is an extension of the VA.gov Design System. Additional guidance can be found in each section:  Content. Our house style guide for VA.gov. Follow the guidelines to help you create a consistent, helpful experience for Veterans.Foundation. This section explains VA.gov’s base styles and visual language.Patterns. Patterns define how components, content strategy, information architecture, accessibility, and visual design work in tandem to solve Veterans’ needs. Here you will find patterns to ask users for specific pieces of information and how to help a user to complete a task or interaction.Templates. Templates, or page layouts, are composed of components within a single page. A layout can contain multiple variations of a component depending on the context.  ","version":"Next","tagName":"h3"},{"title":"Design resources​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#design-resources","content":" The website displays examples of the various components and patterns in use in the VA Mobile App. You can use your browser’s web inspector to view the specs for each component.  The Design System team also provides a complete Figma library of core components.    ","version":"Next","tagName":"h3"},{"title":"Design libraries​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#design-libraries","content":" The Design System team provides Figma libraries for use by teams.  ","version":"Next","tagName":"h2"},{"title":"Add a library to your project​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#add-a-library-to-your-project","content":" Use libraries to access all design tokens, icons, and components. In Figma, libraries live in the cloud. Thus you do not need to download a library. The Design System team updates the libraries in order to keep it in sync with the va-mobile-library code which contains our React Native web components.  To access and enable the Design Tokens, Icon Library, or Component Library, follow these steps:  In the Figma menu bar, navigate to Figma &gt; Libraries to open the Libraries modalIn the modal, find the library fileClick the “Add to file” button to add the library to your file  Once you’ve loaded the library, you should be able to access everything in it by navigating to Assets &gt; &quot;library file&quot; or Resources &gt; Components &gt; &quot;library file&quot;. Note that you cannot edit a library directly. The Design System team manages libraries.    ","version":"Next","tagName":"h3"},{"title":"Figma​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#figma","content":" VA mobile app design teams use Figma to view, share, and collaborate on our work. Currently, only designers at Ad Hoc can be added as Editors to the Mobile App team's Figma account. If you're working on an external Experience Team and need access to our files, you can follow the steps below to be added as a Viewer.  ","version":"Next","tagName":"h2"},{"title":"Get added to Figma​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#get-added-to-figma","content":" Go to figma.com and create a Figma accountIn the #va-mobile-app-shared-systems channel in Slack, ping a Figma admin (currently Kelly Lein, Jessica Woodin, and Holly Collier) requesting to be added.Receive the invite via email and accept the invitation.Boom, you’re in!  ","version":"Next","tagName":"h3"},{"title":"Using Figma​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#using-figma","content":" Figma contains a few important features that help teams work together:  Files (including libraries) live in the cloud, rather than locally on your machineYou receive library updates automatically (a big advantage of using Figma)You can see what everyone else is working on in the VA workspaceDevelopers can inspect any element on a pageYou can create a branch of your file at any time  ","version":"Next","tagName":"h3"},{"title":"Designers on Experience Teams​","type":1,"pageTitle":"For designers","url":"/va-mobile-app/design/About/designers#designers-on-experience-teams","content":" Currently, designers on Experience Teams can only be added as Viewers in the VA Mobile App's Figma account. In order to use the Mobile App libraries in the VA.gov Platform team's Figma account, designers should follow the steps below.  In the VA Mobile App team's Figma account, open the Component Library and/or Flagship Library.Find the component you need.Copy the component.In the VA.gov Platform team's Figma account, open your working file.Paste the component into your working file.  If you have questions or need assistance, reach out in the #va-mobile-app-shared-systems channel. ","version":"Next","tagName":"h3"},{"title":"VA Mobile Design System - Components Package","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/components","content":"","keywords":"","version":"Next"},{"title":"For Consumers​","type":1,"pageTitle":"VA Mobile Design System - Components Package","url":"/va-mobile-app/design/About/For engineers/components#for-consumers","content":" The components package assumes you already have a functioning React Native app, whether using Expo or React Native CLI; see the React Native documentation if you do not.  Once you have a running app:  Add @department-of-veterans-affairs/mobile-component-library as a dependency with your package manager (e.g. yarn)Add @department-of-veterans-affairs/mobile-assets as a dependency Note: beyond the assets package, react, react-native, and react-native-gesture-handler are also expected dependencies to run the components package Hook up the custom fonts in the assets package to your appImport components from @department-of-veterans-affairs/mobile-component-library within .jsx/.tsx files and incorporate into the display logic similarly to how you would the built-in React Native components  Note: The linting package is highly recommended so you'll automatically receive linting warnings for deprecation as the components package evolves; it should be set to the same version as the components package.  Documentation about components available can be found via the documentation site as well as our Storybook. Questions and issues can be directed to our DSVA Slack channel.  ","version":"Next","tagName":"h2"},{"title":"For Contributors​","type":1,"pageTitle":"VA Mobile Design System - Components Package","url":"/va-mobile-app/design/About/For engineers/components#for-contributors","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"VA Mobile Design System - Components Package","url":"/va-mobile-app/design/About/For engineers/components#prerequisites","content":" Install Node.jsInstall NVMInstall yarn 4.0.2  ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"VA Mobile Design System - Components Package","url":"/va-mobile-app/design/About/For engineers/components#installation","content":" Clone the repo  git clone git@github.com:department-of-veterans-affairs/va-mobile-library.git   From the root directory (va-mobile-library) run nvm use. If you do not have the active Node version installed (you will see an error) run nvm install v18.18.0 (replacing v.18.18.0 with the version listed in our root-level .nvmrc file), then run nvm use to activate it. Navigate to the components package  cd va-mobile-library/packages/components   Install dependencies  yarn   then  yarn tokens:build   Launch the app  Physical Device Install the Expo Go app from the App Store or Play StoreRun yarn startUsing your devices camera, scan the QR code that pops up in your console Simulator Run yarn startPress i to run on an iOS simulator or a to run on an Android Emulator (you may have to set up an emulator in Android Studio in order for this to work) Web Browser Run yarn storybook:web  ","version":"Next","tagName":"h3"},{"title":"Yarn Commands​","type":1,"pageTitle":"VA Mobile Design System - Components Package","url":"/va-mobile-app/design/About/For engineers/components#yarn-commands","content":" Command\tDescriptionstart\tStarts Metro Bundler with options to run app on different platforms. Note: To run on web, use yarn storybook:web command below android Run app on last used Android emulator/device buildIcons Run script to build icons from assets package ios\tRun app on last used iOS simulator/device storybook:build\tGenerates static version of Storybook for deployment storybook:deploy\tDeploys Storybook to homepage in package.json storybook:generate\tGenerates .storybook/native/storybook.requires.js which tells React Native where to find stores since it doesn't support dynamic imports storybook:watch\tWatches for newly created stories and regenerates storybook.requires.js storybook:web\tBuilds and launches development server for web test\tRuns unit tests ","version":"Next","tagName":"h3"},{"title":"VA Mobile Design System - Linting Package","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/linting","content":"","keywords":"","version":"Next"},{"title":"For consumers​","type":1,"pageTitle":"VA Mobile Design System - Linting Package","url":"/va-mobile-app/design/About/For engineers/linting#for-consumers","content":" These steps assume you already have eslint installed for your project as a devDependency and configured correctly.  Add @department-of-veterans-affairs/eslint-config-mobile as a devDependency to your project Note: Your version should match your components package version to behave correctly In your eslint config file, add to the extends attribute: @department-of-veterans-affairs/mobile  Once configured, running linting on your project should emit warnings for using outdated components.  If linting is part of your continuous integration checks and warnings cause failures, the following can be added to your CI linting script to suppress the warnings during CI:  --rule 'deprecate/import: off'   ","version":"Next","tagName":"h2"},{"title":"For contributors​","type":1,"pageTitle":"VA Mobile Design System - Linting Package","url":"/va-mobile-app/design/About/For engineers/linting#for-contributors","content":" Not much to say for contributors as this is just a set of linting rules.  This package leverages the eslint-plugin-deprecate package to issue deprecation notices as part of linting. As there is no real code and nothing to be run, contributing is as simple as editing the linting rules in the GitHub web interface and creating a PR.  Versioning of this package should be aligned with the components package. ","version":"Next","tagName":"h2"},{"title":"Naming Conventions","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/namingConventions","content":"","keywords":"","version":"Next"},{"title":"Component Prop Naming​","type":1,"pageTitle":"Naming Conventions","url":"/va-mobile-app/design/About/For engineers/namingConventions#component-prop-naming","content":" This section details the naming conventions of properties (props) passed into the components package to give a high level vernacular of how we think about the aspects of a component. Naming practices are more art than science due to the variety of functionality of the components so these are not necessarily hard and fast rules so much as guidelines.  General prop guidelines:  Use lowerCamelCase capitalizationGeneric behavioral differentiation: variant is the primary generic behavioral differentiator, accounting for the most meaningful functional distinctiontype is the secondary generic behavioral differentiator, if neededmodifier is the tertiary generic behavioral differentiator, if the component includes enough generic varietyalternative is the quaternary generic behavioral differentiator, if somehow that level of generic naming is necessary tone is a special generic differentiator used for purely basic styling (e.g. Link color); delineated from style to keep distinct from React Native's default styling propIf the behavioral differentiation is simple, has generally accepted terminology, and/or is targeted to controlling a specific aspect, then consider functional prop naming over generic naming For example: expandable for Alert that has expand/collapse behavior instead of secondary generic term (where variant controls Alert types of info/success/warning/error) a11y should be used for relevant accessibility related props, either as a prefix or descriptor (A11y) if multiple props have accessibility modifiers ","version":"Next","tagName":"h3"},{"title":"Contributing Code","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/contributing","content":"Contributing Code If your contribution entails adding an entirely new component or significant enhancement of an existing component, please see the general guidance to contributing. Given larger enhancements will entail designer input throughout the process, discussions will precede any need for code contributions which will be able to clarify expectations. If you are looking to contribute a bugfix or minor change you don't believe needs that process: Search our outstanding issues to determine if it's already on our radar or a new ticket needs to be createdNotify us in our DSVA slack channel to: Determine if we have a timeline to prioritize if a ticket already existsOpen a conversation around your intent to contribute a small change If the Slack conversation gives the go ahead to move forward, either assign yourself to the existing ticket or create the new ticket and assign it to yourselfIf appropriate, update the Slack thread with the newly created ticketMove ticket to in progressSee individual package documentation for how to get it running locally to code/test your changes Factors to keep in mind during coding for a smooth PR: Look over our PR template for awareness of write-up expectationsObserve existing code structure and aim to minimize complexity and maintain consistency unless you feel it could be meaningfully improved--if so, consider using Slack to discuss more robust code restructure changes prior to making themIf appropriate: Update/add unit testsUpdate/add code documentationUpdate/add storybook storiesCreate alpha testing package build(s) to test within your app it behaves as expected with your changes Note: alpha builds should never be used in production, if it is time critical it should be a beta build and be a very temporary fix until a proper version can be published","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/overview","content":"","keywords":"","version":"Next"},{"title":"Packages​","type":1,"pageTitle":"Overview","url":"/va-mobile-app/design/About/For engineers/overview#packages","content":" So, what is currently being offered?  Our packages:  assets Package containing static assets (e.g. fonts, SVG icons) for VA mobile appsPeer dependency (required) to components for appropriate functionDocumentationNPMCode components Package containing the components of the design systemDocumentationNPMCode linting Package containing an eslint plugin to issue deprecation notices as part of lintingDocumentationNPMCode tokens Package containing atomic, tokenized building blocks used for components so any app can build screens or custom components adhering to the same underlying styling fundamentalsDocumentationNPMCode  Each package's documentation page contains more specialized guidance both for consumers of the package as well as for contributing.  All packages use ISC licenses:  Copyright 2023 Department of Veterans Affairs Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ","version":"Next","tagName":"h2"},{"title":"Release process","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/releaseProcess","content":"","keywords":"","version":"Next"},{"title":"Git tags​","type":1,"pageTitle":"Release process","url":"/va-mobile-app/design/About/For engineers/releaseProcess#git-tags","content":" Upon each release, a git tag is created for the release with a format of [package]-v[X.X.X] which allows for historical snapshots of each version. For example:  components-v0.19.0assets-v0.10.0tokens-v0.12.0linting-v0.19.0  Alpha and beta builds have -[alpha/beta].[number] appended to the tag. For example:  components-v0.19.0-alpha.1  ","version":"Next","tagName":"h2"},{"title":"Sign-off process​","type":1,"pageTitle":"Release process","url":"/va-mobile-app/design/About/For engineers/releaseProcess#sign-off-process","content":" There is currently no sign-off process for releases. After work has been reviewed and tested, engineers create releases as needed upon merges to themain branch. As our team gets larger and other apps start to consume the library, we may explore adding a sign-off process and extending our release cadence.  ","version":"Next","tagName":"h2"},{"title":"Release notes​","type":1,"pageTitle":"Release process","url":"/va-mobile-app/design/About/For engineers/releaseProcess#release-notes","content":" A changelog is automatically generated upon each release which notes the merged pulled requests and closed issues since the last release. A slack notification is also sent to the #va-mobile-library-alertschannel in DSVA slack. ","version":"Next","tagName":"h2"},{"title":"Testing","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/testing","content":"","keywords":"","version":"Next"},{"title":"Testing component package integrations​","type":1,"pageTitle":"Testing","url":"/va-mobile-app/design/About/For engineers/testing#testing-component-package-integrations","content":" Before a new component, or new version of an old component, is released it should be tested inside an example environment that it will be consuming. For this purpose we can use the VA Flagship app. We can do this both with automation and manual testing.  ","version":"Next","tagName":"h2"},{"title":"Automatically​","type":1,"pageTitle":"Testing","url":"/va-mobile-app/design/About/For engineers/testing#automatically","content":" We will have automated checks run on the components where we can. For our main client, the VA Flagship app we currently have a Github actions workflow that will run each time a pull request is merged into the main branch. This automated workflow will simulate the VA Flagship app using the latest component package and run any associated tests to ensure no unintentional breakage happens. The workflow can also be run manually from the Check Component Integrations action.  As more clients are added to the system, more tests will be added to the workflow. The tests themselves are managed by the client team and any app included (at this time) needs to be in a publicly accessible repository.  Automated tests will be able to check each instance of the component, so it is also important to manually test component integrations where appropriate.  ","version":"Next","tagName":"h3"},{"title":"Manually​","type":1,"pageTitle":"Testing","url":"/va-mobile-app/design/About/For engineers/testing#manually","content":" The preferred method for manual testing is to create an alpha build via the NPM publish workflow of the package from your branch and then update your project locally to leverage that alpha build to test. Note: alpha builds should never be used in production.  There are a couple additional methods to manually check if a component works inside an app environment, but neither works as well as the preferred method and may not behave the same as a published package (e.g. changes may work using these methods that would not work in a published NPM package):  Details Alternate Method 1The first option is to manually install the local component into the app you're testing in by running: yarn add file:../../va-mobile-library/packages/components (assumes va-mobile-app and va-mobile-library are siblings, if they are not, change the path). This method points directly to the component file you're testing. The downside here is that your watch command may not work, so you'll need to rebuild the app to see changes (or update the watch configuration).  Details Alternate Method 2The second is to use local dependency linking through yarn commands. This creates a symlink to the local component from the app. There are some Metro config changes that need to happen for this to work and support is a little iffy at the moment, but it's certainly an option, although not highly recommended at this point.  With all methods above, you can validate things have installed correctly looking up the @department-of-veterans-affairs/mobile-component-library folder within your package folder (e.g. node_modules) and validating the correct package version is present. You can then run all app-level tests on it (manual app use, unit, compiling, e2e). The level of testing needed will be defined by the size of the update that is being made. ","version":"Next","tagName":"h3"},{"title":"Versioning Policy","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/versioning","content":"Versioning Policy The VA Mobile Libraries use semantic versioning at a per package level. Guidance in this section to be retired at version 1.0.0 Despite technically being in production, the design system is still in early, rapidly iterative phases. With only the VA Health &amp; Benefits app leveraging and close team contact, through at least Q1 2024 we plan to use a pre-launch versioning (major version 0) as follows: Version 0.1.0 will be a level set of the package highlighting it's in a workable state with baseline functionality that has been proven consumable by an outside project For components: Segmented Control ready to useFor tokens: Baseline set of color tokens availableFor other packages: When the package has a core piece of functionality and is stably leveraged by an outside project Any/all breaking changes will be minor version increments with tickets created for the VA Flagship Mobile Team providing specific guidance of necessary adjustmentsAside from breaking changes, semver is updated according to long term guidance below This policy will allow flexibility around anticipated growing pains that may entail more frequent breaking changes than more mature design systems. Once initial adoption challenges have been addressed and the packages have reached a degree of maturity in terms of content, version 1.0.0 will be published and follow the guidelines established below. The guidance around versioning for the VA Mobile Libraries shall be as follows: Major Breaking changes, large or small, that may require app-level changes to upgrade; examples: Non-backwards compatible update to an existing component property; e.g. renaming or restructuring how data is passedRemoval of deprecated token(s)/component(s)/etc. Underlying dependency update introducing incompatibility; e.g. new version of react-native that breaks compatibility to app-level versionIn exceptional cases, may be incremented for a very significant package enhancement or totality of modest ones that comprise a bonafide &quot;release&quot; even without breaking changes Minor Substantive functionality enhancements that are fully backward compatible, examples: New token(s)/component(s)/etc.Enhancing a component with a new variant Patch Minor functionality enhancements that are fully backward compatible, examples: Adding a new property of minor impactUpdating an existing component property with new values that have a minor impactFixing internal bugs Beta External team testing build denoted by a -beta.# appended to the semverShould not be used in production outside exceptional circumstances Alpha Internal design system team testing build denoted by a -alpha.# appended to the semverShould not be used in production The Figma Design Library will also follow this versioning guidance except only reflecting major/minor levels. Patch changes are likely to result in no visual changes or the design was correct while minor technical tweaks were made.","keywords":"","version":"Next"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/getting-started","content":"","keywords":"","version":"Next"},{"title":"Guides by audience​","type":1,"pageTitle":"Getting started","url":"/va-mobile-app/design/About/getting-started#guides-by-audience","content":" DesignersEngineers ","version":"Next","tagName":"h2"},{"title":"VA Mobile Design System - Tokens Package","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/tokens","content":"","keywords":"","version":"Next"},{"title":"For consumers​","type":1,"pageTitle":"VA Mobile Design System - Tokens Package","url":"/va-mobile-app/design/About/For engineers/tokens#for-consumers","content":" Direct consumption of the tokens package is optional, but recommended. The tokens package contains the same building blocks used to build the design system components which will more easily allow screen content and app-level custom components to follow design system conventions, helping maintain consistency in experience for users. It is also recommended to match the tokens package version to the version of tokens used by the components package you are leveraging, to ensure consistency.  ","version":"Next","tagName":"h2"},{"title":"Token Usage​","type":1,"pageTitle":"VA Mobile Design System - Tokens Package","url":"/va-mobile-app/design/About/For engineers/tokens#token-usage","content":" To use the tokens, simply:  Add @department-of-veterans-affairs/mobile-tokens to your project via your package manager (e.g. yarn)Add import { colors } from '@department-of-veterans-affairs/mobile-tokens to files you wish to use them in.Reference colors in your code: e.g. buttonColor = colors.vadsColorGrayMedium  ","version":"Next","tagName":"h3"},{"title":"Themes​","type":1,"pageTitle":"VA Mobile Design System - Tokens Package","url":"/va-mobile-app/design/About/For engineers/tokens#themes","content":" The tokens package also has light and dark themes available. These themes are a subset of the colors tokens above, containing primitive colors, semantic tokens without an OnLight or OnDark mode specified, and the colors for only the light or dark themes respectively. The OnLight and OnDark mode suffixes are also removed.  The purpose of themes is to allow for assignment of color tokens without the need to specify the light or dark mode, and let your theme provider or handler return the correct theme. For example: instead of having a conditional where you'd assign either the colors.vadsColorForegroundDefaultOnLight or colors.vadsColorForegroundDefaultOnDark token, you could instead use theme.vadsColorForegroundDefault if your app already knows which color scheme it wants to use.  Using theme tokens directly​  Add @department-of-veterans-affairs/mobile-tokens to your project via your package manager (e.g. yarn)Add import { themes } from '@department-of-veterans-affairs/mobile-tokens to files you wish to use them in.Reference the theme in your code using either themes.light or themes.dark  useTheme hook​  We have also made a hook available in the component library that will return the appropriate light or dark theme based on the user's OS setting. To use the hook:  Add @department-of-veterans-affairs/mobile-component-library to your project via your package manager (e.g. yarn)Add import { useTheme } from '@department-of-veterans-affairs/mobile-component-library'Use the hook to at the top of your component function to retrieve either the light or dark theme based on the device's current color scheme. e.g.   const theme = useTheme() const componentStyle = { color: theme.vadsColorForegroundDefault }   ","version":"Next","tagName":"h3"},{"title":"For contributors​","type":1,"pageTitle":"VA Mobile Design System - Tokens Package","url":"/va-mobile-app/design/About/For engineers/tokens#for-contributors","content":" Depending on what is being contributed, the recommendation for how to proceed differs.  If you are contributing a simple addition or update of an existing token, the recommendation is to do so in the GitHub web interface by updating the relevant src tokens file and running an alpha publish against the branch for the package to affirm the dist/ folder correctly forms up your updated/added token as expected in the resulting NPM package.  If you are contributing many tokens or need to adjust build processes, you should get set up locally. See the directions in the components package documentation for doing so with minor modifications to that process of changing directory to the tokens package (va-mobile-library/packages/tokens) instead of components and not having the final running steps as the tokens:build command is essentially running the tokens as it generates the output folders based on the build/config setup and tokens in the src/ folder.  Note: the folder structure and file naming within the src/ folder is relevant so follow the existing structure and direct questions to the DSVA Slack channel.  ","version":"Next","tagName":"h2"},{"title":"Yarn Commands​","type":1,"pageTitle":"VA Mobile Design System - Tokens Package","url":"/va-mobile-app/design/About/For engineers/tokens#yarn-commands","content":" Command\tDescriptiontokens:build\tTakes any JSON files in the src/tokens folder and transforms them according to the defined transformations in the config.js ","version":"Next","tagName":"h3"},{"title":"Alert","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Alerts and progress/Alert","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Informational​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#informational","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Success​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#success","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Warning​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#warning","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Error​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#error","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"When to use Alert​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#when-to-use-alert","content":" To notify users about the status of the system System status messages. An alert may be a notification that keeps people informed of the status of the system and may or may not require the user to respond. Such notifications may be errors, warnings, and general updates.In-application system status. An exception to the above is providing information to the user, unprompted, about a problem with a particular application. These system status messages typically use an error or warning variation and do not require user action.Access messages when a user tries to access an item that is not available to them. Access messages typically warn the user that something they tried to access is not working correctly or is temporarily unavailable. These often use the error or warning variations.Mobile app only: System maintenance. On the website, most system messages related to maintenance are handled by the Banner - Maintenance component. On the mobile app, system maintenance messages use the Alert component. To respond to a user’s action Validation messages. An alert may be a validation message that informs a user they just took an action that needs to be corrected or a confirmation that a task was completed successfully.User feedback. Use Alert for feedback messages that respond to an action a user has taken and to draw their attention to something that they need to correct or to confirm successful completion of a task. These messages use success and error variations.Immediate feedback to the user. When your application is using Javascript to provide an immediate response to the user without a full page/screen load. For example, this may include alerts that appear with inline form validation. Engagement messages that nudge the user to enter or update data. Engagement messages typically use the informational variation and ask the user to take an action.Mobile app only: Unprompted and in-page alerts. On the website, consider the Alert - Expandable component to draw attention to important information on the page that is not a response to user feedback. On the mobile app, use the expandable variation of the Alert component.  ","version":"Next","tagName":"h3"},{"title":"When to consider something else​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#when-to-consider-something-else","content":" On the mobile app, always consider a native component before using an in-content Alert.  Action Sheet. When the user takes an action in which the system needs to clarify their intent, use an action sheet (for both iOS and Android) to offer the user a choice in how to proceed.Alert/dialogue. When the user chooses to do something that has serious consequences, use a native modal alert (for iOS) or dialogue (for Android) to present the user with critical information related to that action.Snackbar. If a user action triggers an API call that is successful or results in an error, consider using a Snackbar in addition to or instead of an Alert. The snackbar may allow users to take an action on the feedback such as trying again or undoing the action.  On the mobile app, do not use the Alert component for:  Sub-alerts on the page. On the website, when your page has more than 1 alert and you are using the Standard and Slim alerts to create a hierarchy of alerts. It is also appropriate to convey multiple statuses using a combination of headers, text, and the Slim alert variation. An example of a sub-alert is the Autosave alert. On the mobile app, do not use sub-alerts.  On the website and mobile app, do not use the Alert component for:  Long forms. On long forms, always include in-line validation in addition to any error messages that appear at the top of the form.Destructive actions. If an action will result in destroying a user’s work (for example, deleting an application) use a more intrusive pattern, such as a confirmation modal dialogue on the website or a native alert on the mobile app, to allow the user to confirm that this action is what they want.Clarifying background information. Use the Additional info component when clarifying outcomes for an input or a form question as well as providing background information. Keep in mind that Alert - Expandable should warrant an alert and be used sparingly. The value of any type of alert is diminished if the page is littered with alerts of equal weight.  ","version":"Next","tagName":"h3"},{"title":"Choosing between variations​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#choosing-between-variations","content":" Use standard alerts for most use cases.Use expandable alerts when the information is not a response to user feedback.Use dismissible alerts when the content is informational and not specific to the user or their interaction. For example, displaying “what’s new” content in the app.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#placement","content":" Alerts always appear near the top of the screen  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#content-considerations","content":" The VA Design System's content considerations for alerts are appropriate for the mobile app with the following addition: VA no longer says, “Please” in alerts when making a request of the user. The VA Design System also includes guidance on how to write error alerts. In particular, the section on style and tone provides help on how to write clear and conversational alerts.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#accessibility-considerations","content":" Alerts should only be used when appropriate to do so. Do not use Alerts when a native alert would be best (i.e. native alert, dialogue, action sheet, snackbar, etc.).When using a screen reader, the Alert should announce itself as an alert with an indication of its role / importance (i.e. error, warning, informational, etc.).Alerts that have expanded / closed states must be announced by a screen reader.Do not automatically dismiss an Alert based on a timer or time limit.Use alternative text (alt text) for any icons that are not considered decorative.No buttons should be disabled within an Alert.Focusable elements within an Alert should include: heading, body copy, phone numbers, and buttons.accessibilityLabel and accessibilityLabelledBy should be used where appropriate.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Alert","url":"/va-mobile-app/design/Components/Alerts and progress/Alert#related","content":" Native alertsSnackbar ","version":"Next","tagName":"h2"},{"title":"Loading indicator","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#examples","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#content-considerations","content":" We follow a simple content pattern for loading indicators, which consists of the following elements in this order:  A present participle verb of the action that is happeningAn object that is being acted uponAn elipsis  Start each loading indicator with the present participle form (-ing) of the action that is happening.Consider what the system is actually doing. Remember that the loading indicator is supposed to inform the user what is happening while they’re waiting. The system isn’t always “loading” something. Sometimes its sending something. Other times its saving something.  Follow the verb with the object that is being acted upon.For example, if the system is saving something, describe (in 1 or 2 words) what is being saved. If applicable, make the object personal to the user by using a possive pronoun (your) instead of an article (a, the).  End each loading indicator with an ellipsis (3 periods).Do not use unnecessary words, such as please or wait.  Examples of loading indicators:  Saving your draft...Loading your appointments...Submitting your file...  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#accessibility-considerations","content":" Refer to the VA Design System for accessibility considerationsOn the website, W3C WAI-ARIA aria-live=&quot;polite&quot;, aria-label and aria-valuetext are used to ensure screen reader users are also provided the same information. On the mobile app, use the equivalent accessibility hints and labels in React Native.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Loading indicator","url":"/va-mobile-app/design/Components/Alerts and progress/LoadingIndicator#related","content":" Loading indicator - VA Design SystemProgress indicator - HIGProgress indicator - Material Design ","version":"Next","tagName":"h2"},{"title":"Snackbar","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#default","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Variations​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#variations","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Snackbar​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#when-to-use-snackbar","content":" If a user action that triggers an API call is successful or results in an error. The snackbar may allow users to take an action on the feedback such as trying again or undoing the action.  ","version":"Next","tagName":"h3"},{"title":"How this component works​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#how-this-component-works","content":" The icon will be relevant to the state of the snackbar (success or error).The text content is a short description of the success or error action. It is used to inform the status of an action.The left action button is optional and should only be used when there is an additional action for the user to take on the snackbar. The left action button can be an &quot;Undo&quot; or &quot;Try again&quot; button. The undo button allows a user to reverse a successful action. When the action is successfully reversed, another snackbar will open informing the successful undo. The new snackbar will only have the dismiss button.The try again button allows a user to initiate a failed action. This will prompt the system to redo the action and either produce a successful or unsuccessful snackbar. The right action button is a dismiss button that allows a user to manually close the snackbar.  ","version":"Next","tagName":"h3"},{"title":"Behavior​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#behavior","content":" The current iteration of the snackbar will only be dismissible by the user selecting the “Dismiss” button, another snackbar opening, or the user navigating to a different screen. Additional iterations may incorporate a user-defined timebox on the snackbar.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#placement","content":" The snackbar always appears at the bottom of the screen on top of the other content.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#instances-of-this-component-in-production","content":" Default snackbar displays in Messages when a draft is saved successfully.&quot;Undo&quot; snackbar appears in Messages when moving a message to a folder.&quot;Try again&quot; snackbar appears in Messages when a draft is not saved successfully.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#content-considerations","content":" Body copy for a successful snackbar states the item and the action that was performed on the item. Examples: Draft saved, Appointment canceledBody copy for an unsuccessful snackbar uses the same copy as its successful version with the addition of the word not. Examples: Draft not saved, Appointment not canceledUse only 2-3 words for successful snackbars.Use only 3-4 words for unsuccessful snackbars.Use Undo or Try again for optional left action button. (We use Try again instead of Retry to align with VA.gov and to reduce cognitive load.)Use Dismiss for right action button.Don't use words like successful or failedDon't use any punctuation  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#accessibility-considerations","content":" To ensure that the snackbar and its content is accessible to all users, the snackbar should not close on its own or after a certain amount of time. The snackbar can only be closed by the user selecting the “dismiss” button, another snackbar opening, or the user navigating to a different screen.Screen readers should automatically announce when a snackbar opens and begin reading its content. The screen reader will announce the component as an Alert as soon as the action is completed. Each action will be announced as a button.If a screen has bottom navigation, the snackbar should open above the navigation.There should only ever be one snackbar on the screen. Opening a new snackbar will close the previous snackbar.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Snackbar","url":"/va-mobile-app/design/Components/Alerts and progress/Snackbar#related","content":" Snackbar - Material Design ","version":"Next","tagName":"h2"},{"title":"Button","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Buttons and links/Button","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#default","content":" Primary​  Open in: Storybook | Figma    Secondary​  Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Base​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#base","content":" Primary​  Open in: Storybook | Figma    Secondary​  Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Destructive​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#destructive","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Choosing between variations​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#choosing-between-variations","content":" Use primary for the most important action. Use the primary button for the most important action that you want the user to take on the page, or in a section.Use secondary for non-primary actions. Use secondary buttons for any actions that need to be downplayed against other actions on the page, or in a section.Use destructive for actions that have serious consequences. Use destructive buttons for any actions that cannot be reversed and may result in data loss. Don't rely on the red color alone to communicate the destructive nature of the action. Always ensure the button text clearly communicates what will happen.Since destructive buttons have serious consequences, always add friction before completing the action. This can be in the form of a native confirmation message (alert or action sheet) in the mobile app or a modal on web. Choosing between colors In most cases, use the default (blue) color.If the default (blue) color will not work (i.e. insufficient color contrast), you may use the base (gray) button.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#placement","content":" Buttons generally appear on their own line at the bottom of a form or section.Primary buttons usually appear first, or to the left, of a secondary button.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#content-considerations","content":" Refer to the VA Design System for content considerations  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#accessibility-considerations","content":" Guidance on using disabled buttons Although VADS and USWDS have styles in place to support disabled buttons, disabled buttons are not available in the mobile app. Disabled buttons are only available in VADS and USWDS to support legacy buttons that still exist on VA.gov today. These legacy use cases do not exist in the mobile app. Instead of disabling a button in the mobile app, always attempt to find an alternative solution such as: Providing additional context surrounding a button that tells a user what to expect when a button is tapped.Allowing a user to attempt to submit a form even if an error exists in an input field (and then presenting the errors to the user to fix). For guidance on choosing between a Button or Link, see additional documentation.For additional guidance, refer to the VA Design System for accessibility considerations.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#related","content":" Button - VA Design SystemButton - USWDSButton - HIGButton - Material Design    ","version":"Next","tagName":"h2"},{"title":"Differences with VADS​","type":1,"pageTitle":"Button","url":"/va-mobile-app/design/Components/Buttons and links/Button#differences-with-vads","content":" The Base button style exists due to mobile app specific needs in dark mode. For example: The v3 Alert component has a colored background for each variation. While working on dark mode, the mobile app team found that the Default button style did not meet color contrast requirements and clashed with the background colors. For this reason, we created a new Base button style that's based on a USWDS Base button style.The Destructive button style is currently used in the mobile app to cancel an appointment or remove contact information. The mobile design system team presented to the Design System Council in February 2024 and this button will be added to the larger VA Design System. ","version":"Next","tagName":"h2"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/va-mobile-app/design/About/For engineers/changelog","content":"","keywords":"","version":"Next"},{"title":"components-v0.30.3 (2025-02-19)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0303-2025-02-19","content":" Full Changelog  Closed issues:  BUG - Sev 3 - All - Alert icon is misaligned vertically when no header is specified #632  Merged pull requests:  [Bug] Fix Alert icon alignment when no header is present #633 (oddballdave)  ","version":"Next","tagName":"h2"},{"title":"components-v0.30.2 (2025-02-18)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0302-2025-02-18","content":" Full Changelog  Closed issues:  BUG - Sev 3 - iOS - Alert component heading not announced with VoiceOver #630  Merged pull requests:  [Bug] Fix VoiceOver for Alert headings #631 (oddballdave)  ","version":"Next","tagName":"h2"},{"title":"components-v0.30.1 (2025-02-17)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0301-2025-02-17","content":" Full Changelog  Implemented enhancements:  [Enhancement] Improve loading indicator animation loop and cleanup #622 (oddballdave)[Enhancement] Add useMemo and useCallback to useSnackbar Hook #617 (oddballdave)  Closed issues:  BUG - Sev-3 - All - Alert component has duplicate heading accessibility roles when not expandable #620BUG - Sev-3 - iOS - VoiceOver not announcing role of SegmentedControl component #619DS - Improve LoadingIndicator Animation Loop and Cleanup #618DS - Add useMemo and useCallback to useSnackbar hook #603  Merged pull requests:  [Bug] Fix VoiceOver for SegmentedControl #625 (oddballdave)[Bug] Fix duplicate heading roles in Alert component #621 (oddballdave)  ","version":"Next","tagName":"h2"},{"title":"components-v0.30.0 (2024-12-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0300-2024-12-16","content":" Full Changelog  Closed issues:  DS - Text Component and Typography Tokens - Flagship Work Setup #602DS - Update existing components to use typography tokens and/or Text component #559DS - Text Component and Typography Tokens Flagship Work Setup #556[Design Tokens] Colors: Add new tokens #542DS - Q4 Bug &amp; Maintenance Mgmt #534DS - RadioButton Flagship Work Setup #528DS - Expand Platform Service Blueprint #403DS - Design Tokens - Typography #79DS - Create RadioButton Component #70  ","version":"Next","tagName":"h2"},{"title":"components-v0.29.0 (2024-12-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0290-2024-12-16","content":" Full Changelog  Merged pull requests:  [Feature] Update components to use typography tokens or Text component #612 (narin)[Bug] Typography – Fix Heading margin bottom, Text stories #608 (narin)[Tokens] Update components to use tokens package 0.21.0. Update Storybook color docs #605 (narin)Bump the npm_and_yarn group across 1 directory with 5 updates #576 (dependabot[bot])  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.23.0 (2024-12-12)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0230-2024-12-12","content":" Full Changelog  Closed issues:  DS - RadioButton Accessibility Review #524  Merged pull requests:  [Tokens] Add new tokens #610 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.22.0 (2024-12-11)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0220-2024-12-11","content":" Full Changelog  Closed issues:  DS - Typography - Apply tokens to components in Figma #558DS -Publish Text component to Figma &amp; Doc Site #552[Design Tokens] Colors: Add new feedback tokens to VADS #541Radio Button - Publish component to Figma and Doc Site #195  Merged pull requests:  [Bug] Typography – Fix heading bottom margin #606 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.21.0 (2024-12-09)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0210-2024-12-09","content":" Full Changelog  Closed issues:  DS - Update Expo to v52 #597DS - Text Component Accessibility Review #551DS - Text Component Visual QA #550DS - ZenHub to GitHub Projects Transition #536DS - RadioButton Visual QA #523DS - RadioButton Component Storybook #522DS - RadioButton Component Implementation #521  Merged pull requests:  [Tokens] Update css-library to 0.16.0 to get feedback tokens #601 (narin)[CU] Update Expo to SDK 52 #600 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.28.0 (2024-12-03)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0280-2024-12-03","content":" Full Changelog  Closed issues:  DS - Text Component Analytics Support #553DS - Text Component Storybook #549DS - Text Component Implementation #548DS - RadioButton Component Analytics Support #525[Design Tokens] Typography: Create documentation #409  Merged pull requests:  [Feature] Create Radio Button Component #586 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.27.1 (2024-11-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0271-2024-11-15","content":" Full Changelog  Closed issues:  DS - Typography Tokens - Create Composite Tokens #495  Merged pull requests:  [Bug] Icon – Update &quot;no icon&quot; variant #592 (narin)[Feature] Text component #591 (narin)[Feature] Add Bitter-Regular font #589 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.20.0 (2024-11-08)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0200-2024-11-08","content":" Full Changelog  Merged pull requests:  [Feature] Add composite typography tokens #572 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.27.0 (2024-11-01)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0270-2024-11-01","content":" Full Changelog  Closed issues:  DS - Typography Component - Align with VADS and publish documentation #557Assets - Add BitterRegular font family, remove BitterBold font family #538Accessibility: Add Heading Label for Screenreader Users #533Accessibility: Add Item Count to Checkbox Group for Screenreader Users #532Text Input: Prep for handoff #498[Design Tokens] Typography: Add tokens to tokens package #494[Figma] Add annotations to template #489DS - Checkbox Component Implementation #455DS - Checkbox Group Component Flagship Work Setup #433DS - Checkbox Group Component Unit Tests #431[Design Tokens] Typography: Prep for handoff #425[Design Tokens] Colors: Create divider and feedback tokens #419DS - Q3 Bug &amp; Maintenance Mgmt #402DS - Create CheckboxGroup Component #69  Merged pull requests:  [Bug] Link - Flagship crash mitigation efforts #573 (TimRoe)[Feature] Checkbox/CheckboxGroup: Add heading role and list position #545 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.26.0 (2024-10-21)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0260-2024-10-21","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"assets-v0.14.0 (2024-10-21)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v0140-2024-10-21","content":" Full Changelog  Merged pull requests:  [Feature] Add Bitter Regular font, remove Bitter Bold #544 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.19.0 (2024-10-21)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0190-2024-10-21","content":" Full Changelog  Merged pull requests:  [Feature] Add atomic font tokens #540 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.18.0 (2024-10-18)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0180-2024-10-18","content":" Full Changelog  Closed issues:  DS - Review Home Icon Sizing #531DS - Tech Discovery for RadioButton #520DS - Review IIR's Veteran Status mockups #510DS - Typography Tokens - SPIKE - Components vs. Tokens #496[Figma] Update documentation on permissions #493Tokens - Update tokens to include documentation of values #486DS - Tokens: Alphabetize TS files #482[Design Tokens] Spacing: Create documentation in Storybook #476DS - Checkbox and Checkbox group - Visual QA #435DS - Checkbox - Add to linting pkg #432DS - Checkbox and Checkbox Group Accessibility Review #430DS - Checkbox Group Component Analytics Support #429DS - Checkbox Group Component Storybook #428DS - Checkbox Group Component Implementation #427Checkbox - Publish component to Figma and Doc Site #194DS - Design Tokens - Spacing #80  Merged pull requests:  [Feature] Add border tokens #543 (jessicawoodin)[Feature] CheckboxGroup – Add item descriptions #513 (narin)[Feature] CheckboxGroup #503 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.17.1 (2024-09-30)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0171-2024-09-30","content":" Full Changelog  Closed issues:  DS - SPIKE - Focus Styles #466  Merged pull requests:  [CU] Alphabetize and add value comments to token declarations #506 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.25.0 (2024-09-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0250-2024-09-24","content":" Full Changelog  Closed issues:  [Design Tokens] Colors: Create foreground tokens for feedback #490Radio Button: Prep for handoff #468DS - Checkbox Component Storybook #456DS - Update existing components to use spacing tokens #449  Merged pull requests:  [Feature] Checkbox Storybook Stories #500 (narin)[Feature] Checkbox Implementation #485 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.24.3 (2024-09-20)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0243-2024-09-20","content":" Full Changelog  Closed issues:  BUG - sev-3 - All - Alert component body sometimes incorrectly marked as actionable for voice control #488  Merged pull requests:  [Code Upkeep] Update components to use spacing tokens #487 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.24.2 (2024-09-20)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0242-2024-09-20","content":" Full Changelog  Closed issues:  DS - VADS Tokens: Checkbox colors #473[Design Tokens] Spacing: Create documentation #446BUG - Sev-3 - All - Determine why destructured import of tokens isn't working in hooks #390  Merged pull requests:  [Bug] Fix Alert description showing as actionable to Voice Control #497 (TimRoe)[Tokens] Add Checkbox color tokens to components #484 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.24.1 (2024-09-17)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0241-2024-09-17","content":" Full Changelog  Closed issues:  DS - Updated assets package to include arrow icon #462  Merged pull requests:  [Bug] Determine failure of destructured import of tokens #465 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.17.0 (2024-09-17)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0170-2024-09-17","content":" Full Changelog  Closed issues:  [Design Tokens] Spacing: Apply tokens to components in Figma #464DS - Create SnackBar Component #62DS - Remove White Button Variant #45  Merged pull requests:  [Tokens] Add Checkbox color tokens #481 (TimRoe)[Icons] Add ArrowCircleRight icon to components #480 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.13.0 (2024-09-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v0130-2024-09-16","content":" Full Changelog  Closed issues:  DS - Add Spacing Tokens to Spacer Component #448  Merged pull requests:  [Icons] Add arrow_circle_right icon #479 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.24.0 (2024-09-12)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0240-2024-09-12","content":" Full Changelog  Closed issues:  [Design Tokens] Spacing: Publish tokens to Figma #463  Merged pull requests:  [Feature] Update Spacer component to use spacing tokens #474 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.16.0 (2024-09-11)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0160-2024-09-11","content":" Full Changelog  Closed issues:  DS - Issue templates for VADS work #469DS - Add Spacing Tokens to Token Package #447  Merged pull requests:  [Feature] Add spacing tokens and style-dictionary configs #467 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.23.1 (2024-09-11)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0231-2024-09-11","content":" Full Changelog  Closed issues:  [Design Tokens] Checkbox: Create color tokens #424  Merged pull requests:  [Feature] Add Checkbox tokens to Storybook #475 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.15.0 (2024-09-10)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0150-2024-09-10","content":" Full Changelog  Closed issues:  DS - Removed White Button Variant #454[Design Tokens] Spacing: Prep for handoff #445[Design Tokens] Checkbox: Add color tokens to VADS #441DS - SnackBar Component Flagship Work Setup #370DS - SnackBar Component Unit Tests #368Snackbar - Publish component to Figma and Doc Site #115  Merged pull requests:  [Feature] Add Checkbox tokens #472 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.23.0 (2024-09-04)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0230-2024-09-04","content":" Full Changelog  Merged pull requests:  [Code Upkeep] Remove White Button Variant #460 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.22.1 (2024-09-04)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0221-2024-09-04","content":" Full Changelog  Closed issues:  DS - Tech Discovery for Checkbox Group #426DS - SnackBar Accessibility Review #411DS - Snackbar - Visual QA #366CU - Move CHANGELOG to documentation folder #137  Merged pull requests:  [Tests] Snackbar Unit Tests #451 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"linting-v0.22.1 (2024-08-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0221-2024-08-26","content":" Full Changelog  Closed issues:  DS - SnackBar Component - Add to linting pkg #369  ","version":"Next","tagName":"h2"},{"title":"components-v0.22.0 (2024-08-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0220-2024-08-26","content":" Full Changelog  Closed issues:  DS - Snackbar - Improve screen reader behavior #440DS - Snackbar: Simplify types #439DS - Snackbar: Default offset #438BUG - [3] - All - Update Figma access instructions on Doc Site #436Snackbar - Prevent Google TalkBack from focusing/reading items behind the Snackbar #417Snackbar - Announce Snackbar for accessibility #416Snackbar - Add mechanism for adjusting Snackbar offset from bottom #415DS - SnackBar Global typescript declaration #412BUG - Sev-2 - GHA - Changelog generation is broken #410[Design Tokens] Typography: Set up tokens and styles in Figma #408Add new token for Snackbar component #406Design Tokens: Technical discovery for typography tokens #374Design Tokens: Determine design requirements for typography tokens #373DS - SnackBar Component Analytics Support #367DS - Snackbar Component Storybook #365DS - SnackBar Component Implementation #364Platform Support - DS #292Platform - Service Blueprint #287Q2 Bug &amp; Maintenance Mgmt - Design System #269DS - Determine scope of form system #231Feature - Automate Syncing Tokens to Figma #52Design Tokens: Spacing - Discovery and Ideation #116  Merged pull requests:  [Feature] Add 'react-native-toast-notifications' to linter deprecation warnings #450 (narin)[Feature] Snackbar – Add auto-dismiss logic for screen readers when no action provided #444 (narin)[Feature] Snackbar - Simplify Typing #443 (TimRoe)[Feature] Snackbar – Update default offset to assume nav bar #442 (narin)[Feature] Announce Snackbar appearance to screen reader #437 (TimRoe)[Feature] Snackbar – Add mechanism for adjusting bottom offset #423 (narin)[Feature] Prevent screen reader from focusing content behind Snackbar #422 (TimRoe)[Feature] Add Snackbar to Storybook #421 (TimRoe)[Feature] Create Snackbar component #414 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.21.0 (2024-07-25)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0210-2024-07-25","content":" Full Changelog  Closed issues:  DS - July dependency updates #378  Merged pull requests:  [CU] July Dependency Updates #405 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.14.0 (2024-07-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0140-2024-07-24","content":" Full Changelog  Closed issues:  Alert - Increase spacing #394Design Tokens: Discovery for typography tokens #372DS - Tech Discovery for SnackBar #363Assets - Update documentation for VADS icons script #359DS - Loading Indicator Functional QA #311DS - Create Large Nav Button Component #92DS - Design Tokens - Colors #78DS - Create Loading Component #71  Merged pull requests:  [Feature] Add tokens for Snackbar active states #407 (jessicawoodin)[Spike] Snackbar proof of concept #399 (TimRoe)[Docs] Update assets docs to mention icon svg extraction and adding icons to… #398 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.20.3 (2024-07-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0203-2024-07-15","content":" Full Changelog  Closed issues:  BUG - Sev-2 - All - Fix broken themes module import #386Design Tokens: Add color tokens to Storybook #376DS - GitHub Action to check VADS tokens #266  Merged pull requests:  [Feature] Increase spacing between header and content, and content and buttons #396 (narin)Bump fast-loops from 1.1.3 to 1.1.4 in the npm_and_yarn group across 1 directory #391 (dependabot[bot])Bump @department-of-veterans-affairs/css-library from 0.7.0 to 0.8.4 in /packages/tokens #382 (dependabot[bot])  ","version":"Next","tagName":"h2"},{"title":"components-v0.20.2 (2024-07-10)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0202-2024-07-10","content":" Full Changelog  Closed issues:  BUG - sev-2 - All - i18next causing error in va-mobile-app #383DS - Export useTheme hook #377Text Input - Align with VADS and publish documentation #156  Merged pull requests:  [Bug] Fix themes module import causing crashes in va-mobile-app #388 (narin)[Bug] Main - Update react-i18next package for flagship error #384 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.19.1 (2024-07-03)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0191-2024-07-03","content":" Full Changelog  Closed issues:  DS - Update remainder of components to use theme #371DS - Loading Component Test Plan #310Spike - Look into adding color tokens to Storybook #302  ","version":"Next","tagName":"h2"},{"title":"components-v0.20.1 (2024-07-02)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0201-2024-07-02","content":" Full Changelog  Closed issues:  DS - Theme Setup #263DS - Loading Component Flagship Work Setup #250  Merged pull requests:  [Feature] Update additional components to useTheme hook #380 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.20.0 (2024-07-01)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0200-2024-07-01","content":" Full Changelog  Closed issues:  Icon - Enhance Unit Tests #223DS - Icon Library #82  Merged pull requests:  [Feature] Add useTheme hook. Update Link and Alert to use themes #361 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.13.0 (2024-06-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0130-2024-06-26","content":" Full Changelog  Merged pull requests:  [Feature] Update style-dictionary config to generate themes #360 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.19.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0190-2024-06-24","content":" Full Changelog  Closed issues:  Logos - Create documentation #326DS - Add missing icons from updated Icon Library #255  Merged pull requests:  [Feature] Update Icon component for new Icons #358 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.12.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v0120-2024-06-24","content":" Full Changelog  Closed issues:  DS - Loading Component - Add to linting pkg #253  Merged pull requests:  [Feature] Update component-library and extract new icons #355 (narin)  ","version":"Next","tagName":"h2"},{"title":"linting-v0.18.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0180-2024-06-24","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"linting-v0.17.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0170-2024-06-24","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"linting-v0.16.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0160-2024-06-24","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.18.0 (2024-06-24)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0180-2024-06-24","content":" Full Changelog  Closed issues:  Icon Library: Create documentation #313DS - Loading Component Unit Tests #254DS - Loading Component Storybook #249DS - Loading Component Implementation #247DS - Update Icon Storybook to link to VADS docs #234Icon Library: Update icons to align with VADS #144Loading Indicator - Publish component to Figma and Doc Site #114  Merged pull requests:  [Linting] Add Loading indicator linting rule #356 (TimRoe)[Bug] Fix URL for loading indicator docs #351 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.17.1 (2024-06-07)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0171-2024-06-07","content":" Full Changelog  Closed issues:  Loading Indicator - Visual QA #251DS - Update component-library to support semantic and component tokens #237  Merged pull requests:  [Enhancement] Update Alert success icon to align with VADS #350 (TimRoe)[Feature] Update components with tokens #349 (jessicawoodin)[Feature] Implement LoadingIndicator Component #347 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.11.0 (2024-06-06)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v0110-2024-06-06","content":" Full Changelog  Merged pull requests:  [Feature] Add loading indicator icon to assets package #348 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.10.0 (2024-06-06)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v0100-2024-06-06","content":" Full Changelog  Closed issues:  [stub] Update assets package and Icon component once VADS has added icons to sprite #340[stub] Create PR to add inbox, refresh and local_shipping to VADS sprite sheet #339DS - Update storybook to display all icons #258DS - Update Icon component to support SVG sprites #245Icon Library: Update Figma icons #146  ","version":"Next","tagName":"h2"},{"title":"components-v0.17.0 (2024-06-04)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0170-2024-06-04","content":" Full Changelog  Closed issues:  [Design System] Assets: Update logos and emblems in flagship mobile app #341Spike - Explore ability for consumers to set global values for components #256Design Tokens: Create semantic color tokens - button #178  Merged pull requests:  [Enhancement] Update Icon component with VADS icons #334 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.12.0 (2024-06-03)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0120-2024-06-03","content":" Full Changelog  Closed issues:  Establish process and guidelines around ticket management #122  Merged pull requests:  [Feature] Add semantic tokens for button #342 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.9.0 (2024-05-30)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v090-2024-05-30","content":" Full Changelog  Closed issues:  Design Tokens: Create semantic color tokens - loading indicator #272  Merged pull requests:  [Feature] Add mobile-only Nav and Form icons to mobile-assets #333 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.11.0 (2024-05-30)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0110-2024-05-30","content":" Full Changelog  Closed issues:  Design Tokens: Create semantic color tokens - snackbar and alert #331Copy of Design Tokens: Create semantic color tokens - link #330  Merged pull requests:  [Feature] Add tokens for Snackbar and Alert components #337 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.10.0 (2024-05-29)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0100-2024-05-29","content":" Full Changelog  Closed issues:  Design Tokens: Create semantic color tokens - alert #271Design Tokens: Create semantic color tokens - link #270DS - Script to import VADS Icons into assets package #244  Merged pull requests:  [Feature] Add color tokens for Loading Indicator component #335 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.9.0 (2024-05-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v090-2024-05-28","content":" Full Changelog  Merged pull requests:  [Feature] Updated css-library and generated tokens #332 (jessicawoodin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.8.0 (2024-05-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v080-2024-05-28","content":" Full Changelog  Closed issues:  DS - Replace VA Logo and service emblems SVGs with PNGs. Add Space Force and VA dark text logo #304BUG - Sev-3 - Storybook - Fix Code Snippets #261BUG - Sev-3 - Web - Fix custom docs template #176  Merged pull requests:  [Feature] Add script to extract SVGs from VADS sprite sheet #329 (narin)[Feature] Remove service emblems and VA logo from Icon component #321 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.6.0 (2024-05-22)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v060-2024-05-22","content":" Full Changelog  Closed issues:  DS - Remove ClickToCallPhoneNumber from linting rules #319Design Tokens: Update components to use semantic tokens #286DS - Update Spacer convenience component to be a standalone component #257DS - Loading Component Analytics Support #252  Merged pull requests:  [Feature] Replace service emblems and VA SVGs with png. Add Space Force emblems. #327 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.16.0 (2024-05-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0160-2024-05-15","content":" Full Changelog  Closed issues:  BUG - Sev 2 - All - TS upgrade causes incorrect TS error #317  Merged pull requests:  [Feature] Standalone Spacer component #322 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"linting-v0.15.0 (2024-05-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0150-2024-05-14","content":" Full Changelog  Merged pull requests:  [Patch] Remove ClickToCallPhoneNumber and AttachmentLink from rules #316 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.5.0 (2024-05-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v050-2024-05-14","content":" Full Changelog  Merged pull requests:  [Feature] Add Space Force and Dark VA text logo to assets package #320 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.15.3 (2024-05-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0153-2024-05-14","content":" Full Changelog  Merged pull requests:  [Bug] Fix TS complaint in Icon #318 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.15.2 (2024-05-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0152-2024-05-14","content":" Full Changelog  Closed issues:  Designer onboarding #312BUG - Sev 2 - iOS/Android - Link - Text wrap goes off visible screen #303VA Figma transition #299Jest Matchers - Enhance Accessibility Unit Tests #279Link - Enhance Unit Tests for OSFunction Calls #278Link - Add Icon Override Unit Tests #277DS - Tech Discovery for Loading Component #248DS - Create Alert Component #61  Merged pull requests:  [CU] Update to Expo SDK 51 #314 (narin)[Tests] Update to use React Native Testing Library Jest Matchers and add accessibility tests #307 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.15.1 (2024-05-02)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0151-2024-05-02","content":" Full Changelog  Fixed bugs:  BUG - Sev 3 - Web - On press bolding does not work for Inline variant #197  Closed issues:  Design Tokens: Create and publish documentation #291DS - Determine naming convention for component variants #217DS - Alert Storybook #199DS - Alert - Unit Tests #198Alert - Visual QA #167DS - Maintenance &amp; Support - Q1 2024 #96DS - Component Tracking and Metrics #86DS - Create Link Component #58[Placeholder] Document Design Token Strategy #48Alert - Publish component to Figma and Doc Site #112Component Implementation - Document Alert #130  Merged pull requests:  [Bug] Link - Fix Text Wrapping #305 (TimRoe)[Feature] Alert unit tests #301 (narin)[Feature] Add Alert Storybook Stories #298 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.15.0 (2024-04-23)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0150-2024-04-23","content":" Full Changelog  Closed issues:  DS - Alert - Analytics Support #201DS - Alert - add to linting package #200  Merged pull requests:  [Feature] Add analytics passthroughs for Alert #296 (narin)  ","version":"Next","tagName":"h2"},{"title":"linting-v0.14.0 (2024-04-23)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0140-2024-04-23","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"linting-v0.13.0 (2024-04-23)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v0130-2024-04-23","content":" Full Changelog  Merged pull requests:  [Feature] Add linting rules for Alert #297 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.14.0 (2024-04-23)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0140-2024-04-23","content":" Full Changelog  Closed issues:  Design Tokens: Update Alert to use semantic tokens #285Design Tokens: Update Link to use semantic tokens #284Design Tokens: Update Segmented Control to use semantic tokens #283Link - Update Active state #260Alert - Add Expand/Collapse Support #246Icon Library: Update Icon names to be app agnostic #102  Merged pull requests:  [Feature] Update Link active state #293 (narin)[Feature] Alert Collapse/Expand #288 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.7.0 (2024-04-18)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v070-2024-04-18","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.13.0 (2024-04-18)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0130-2024-04-18","content":" Full Changelog  Closed issues:  Design Tokens: Update Figma to use semantic tokens #273  Merged pull requests:  Updating assets package and Icon component to use updated names/struc… #290 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.4.1 (2024-04-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v041-2024-04-16","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"assets-v0.4.0 (2024-04-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v040-2024-04-16","content":" Full Changelog  Fixed bugs:  BUG - 2 - All - Link Component Icon Override Issues #274BUG - Sev-3 - All - Link Icon is not vertically aligned at larger text sizes #240  Merged pull requests:  [CU] Update assets icon structure and make icon names app agnostic #289 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.12.1 (2024-04-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0121-2024-04-16","content":" Full Changelog  Merged pull requests:  [Bug] Link - Icon Overrides Incorrectly Require Icon Name and Icon not Centered with Font Scaling #275 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.6.0 (2024-04-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v060-2024-04-15","content":" Full Changelog  Closed issues:  DS - Update token build for compatibility with css-library 0.5.1 #265DS - Design Tokens: Create semantic tokens list based on VADS #238DS - Update semantic and component tokens #236DS - Update file structure for semantic tokens #235Design Tokens: Set up semantic tokens in Figma #232Link - Validate and Publish #216Link component - Update linting package #182Design Tokens: Create semantic color tokens - segmented control #179Icon Library: Determine naming strategy for icons #177Design Tokens: Determine naming structure for semantic tokens #153Design Tokens: Create color tokens - gray #152Design Tokens: Create color tokens - green #151Design Tokens: Create color tokens - yellow #150Design Tokens: Create color tokens - red #149Design Tokens: Create color tokens - blue #148Icon Library: Collect and export icons for implementation #147Discovery - Icon Library: Determine if/how we can import(?) VADS/USWDS icons into our library #145Add Automatic Doc Flow to Doc Site #143Link Component Unit Tests #134Component Implementation - Alert #132Design Tokens: Colors - Implementation #128Design Tokens: Typography - Implementation #127  Merged pull requests:  Add tokens for Segmented Control #282 (jessicawoodin)Bump tar from 6.2.0 to 6.2.1 #281 (dependabot[bot])[Feature] Update tokens to support css-library 0.5.1 #276 (narin)Bump express from 4.18.2 to 4.19.2 #267 (dependabot[bot])Bump webpack-dev-middleware from 5.3.3 to 5.3.4 #259 (dependabot[bot])Bump follow-redirects from 1.15.4 to 1.15.6 #242 (dependabot[bot])[Feature] Alert - Create Alert Component #228 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"linting-v0.4.0 (2024-03-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v040-2024-03-14","content":" Full Changelog  Merged pull requests:  [Feature] Link component - Update linting package #227 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.12.0 (2024-03-14)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0120-2024-03-14","content":" Full Changelog  Fixed bugs:  BUG - Sev-3 - Web - Icon scaling does not work #100  Closed issues:  Design Tokens: Set up semantic tokens in Figma #233Link - Visual QA Findings #220Discovery - Design Tokens: Create structure for semantic tokens #163DS - Document Icon Component #174[CU] Add conditional typings to Icon #99Link - Publish component to Figma and Doc Site #111Move Contributing to the Design System ticket template to the DS repo #123  Merged pull requests:  [Bug] Fix horizontal alignment #239 (narin)[Feature] Link - Visual QA Updates/Fixes #224 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.11.0 (2024-03-06)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0110-2024-03-06","content":" Full Changelog  Closed issues:  DS - Alert - Update Icons #202  Merged pull requests:  [Bug] Fix Web Storybook Icon Scaling #222 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.10.0 (2024-03-04)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0100-2024-03-04","content":" Full Changelog  Closed issues:  Link - Visual QA #166  Merged pull requests:  [Feature] Update Icons for Alert #219 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.3.0 (2024-03-01)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v030-2024-03-01","content":" Full Changelog  Closed issues:  Link - Update docs/Figma to reflect new variants #210Link - Update copy for leaving app prompt #196Link component - Add Attachment type support #183Link component - Add analytics support and remove TODO calendar code #170Snackbar - Accessibility requirements #155DS - Make Repo Public #141Link Component - Storybook #135Radio Button - Align with VADS and publish documentation #110Checkbox - Align with VADS and publish documentation #109  Merged pull requests:  [Feature] Link - Add attachment type support #215 (TimRoe)[BUG] Fix TS error – Update LinkAnalytics import to relative #209 (narin)[Feature] Link - Adjustments to stories order/names/text #206 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.9.0 (2024-02-27)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v090-2024-02-27","content":" Full Changelog  Closed issues:  Link Component - Add in-line variant support #168Update Icons for Link Component #165DS - Clear out dependabot alerts #142DS - Create Tabs Component #66  Merged pull requests:  [CU] Add resolution to force ip to version ^2.0.1 #207 (narin)[Feature] Add Analytics pass through events to Link #205 (narin)Bump ip from 1.1.8 to 1.1.9 #191 (dependabot[bot])[Feature] Update Icon component to leverage assets v0.2.0 #190 (TimRoe)[Feature] Link Component - Add Inline Variant Support #188 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.8.0 (2024-02-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v080-2024-02-16","content":" Full Changelog  Merged pull requests:  [CU] Fix semver override #189 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.7.0 (2024-02-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v070-2024-02-15","content":" Full Changelog  Merged pull requests:  [CU] Update dependencies #185 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.2.0 (2024-02-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v020-2024-02-15","content":" Full Changelog  Fixed bugs:  BUG - Sev 3 - Web Storybook - Background Color Override No Longer Works #117  Closed issues:  Clear out dependency security alerts #121  Merged pull requests:  [Feature] Update icons for link component #181 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.6.0 (2024-02-13)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v060-2024-02-13","content":" Full Changelog  Fixed bugs:  BUG - Sev 3 - iOS (Storybook only) - Link Component does not visually indicate being pressed #171BUG - Sev-3 - [Android] - Unable to load fonts from npm module #98  Closed issues:  Design Tokens: Create 3-5 semantic color tokens #180Update DS colors to align with VADS/USWDS #119Upgrade components package to React Native 0.73 #53Component Implementation - Link #118  Merged pull requests:  [CU] Update to Expo 50 and Storybook 7 #173 (narin)[Feature] Create Link Component #162 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.5.1 (2024-02-08)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v051-2024-02-08","content":" Full Changelog  Closed issues:  DS - Discovery - Removing Red Button Variant #164  Merged pull requests:  [Bug] Fix yellowVivid70 color name #175 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.5.1 (2024-02-07)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v051-2024-02-07","content":" Full Changelog  Closed issues:  Flagship Library: Publish documentation for components #108  ","version":"Next","tagName":"h2"},{"title":"components-v0.5.0 (2024-02-06)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v050-2024-02-06","content":" Full Changelog  Merged pull requests:  [Feature] Update components to use updated color tokens #154 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.5.0 (2024-02-05)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v050-2024-02-05","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.4.0 (2024-02-05)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v040-2024-02-05","content":" Full Changelog  Closed issues:  DS - Make Repo Public #140Icon – Determine custom SVG functionality #103Icon Library: Discovery #107Write content considerations for Loading Indicator component #113Create Assets Package #50Design System - Additional Components #77Figma: Add prototyping to components #106  Merged pull requests:  [Feature] Integrate VADS and USWDS tokens #138 (narin)Bump follow-redirects from 1.15.2 to 1.15.4 #104 (dependabot[bot])  ","version":"Next","tagName":"h2"},{"title":"components-v0.4.0 (2024-01-10)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v040-2024-01-10","content":" Full Changelog  Merged pull requests:  [Feature] Add assets package, Icon component, and reference files from component library #85 (narin)  ","version":"Next","tagName":"h2"},{"title":"assets-v0.1.1 (2024-01-10)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v011-2024-01-10","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"assets-v0.1.0 (2024-01-10)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#assets-v010-2024-01-10","content":" Full Changelog  Fixed bugs:  Publish Package Workflow Doesn't Work for New Packages #47  Closed issues:  DS - Create Multi-touchCard Component #68DS - Create ListHeader Component #67DS - Create VCL Component #64DS - Create NameTag Component #63  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.5 (2023-12-20)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v035-2023-12-20","content":" Full Changelog  Merged pull requests:  [CU] Bump mobile-tokens version to 0.3.1 #75 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.3.1 (2023-12-20)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v031-2023-12-20","content":" Full Changelog  Closed issues:  DS - Create AlertBox Component #60DS - Create AlertBox Component #59  Merged pull requests:  [CU] Add All Non-Shipping Relevant Files to NPM Ignore #57 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.3.0 (2023-12-19)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v030-2023-12-19","content":" Full Changelog  Merged pull requests:  [Feature] Update primaryDarker color to match VADS/USWDS updates #55 (narin)feature Automate build of figma tokens #51 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.4 (2023-12-15)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v034-2023-12-15","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"linting-v0.3.0 (2023-12-07)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v030-2023-12-07","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"linting-v0.2.0 (2023-12-07)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#linting-v020-2023-12-07","content":" Full Changelog  Merged pull requests:  feature Create Linting Package #44 (TimRoe)Bump @adobe/css-tools from 4.3.1 to 4.3.2 #43 (dependabot[bot])  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.3 (2023-11-30)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v033-2023-11-30","content":" Full Changelog  Merged pull requests:  [BUG] Configure Yarn Workspace Correctly #42 (narin)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.2.1 (2023-11-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v021-2023-11-28","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.2 (2023-11-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v032-2023-11-28","content":" Full Changelog  Merged pull requests:  Update a11yHint sample string for Button Story #40 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.1 (2023-11-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v031-2023-11-28","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.3.0 (2023-11-28)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v030-2023-11-28","content":" Full Changelog  Merged pull requests:  [Bug] Button border and background color fixes for Secondary variants #36 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.2.1 (2023-11-22)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v021-2023-11-22","content":" Full Changelog  Merged pull requests:  [Feature] Integrate Design Tokens with Figma #35 (TimRoe)[Feature] Component Implementation - Button #34 (narin)  ","version":"Next","tagName":"h2"},{"title":"components-v0.2.0 (2023-11-16)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v020-2023-11-16","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.2.0 (2023-11-09)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v020-2023-11-09","content":" Full Changelog  Merged pull requests:  [Feature] Segmented Control - Fix deprecated attributes #32 (TimRoe)[Bug] Storybook complains about missing dist/ folder in local dev environment #31 (TimRoe)  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.1.0 (2023-11-08)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v010-2023-11-08","content":" Full Changelog  Merged pull requests:  [CU] Bump browserify-sign from 4.2.1 to 4.2.2 #30 (dependabot[bot])[CU] Bump browserify-sign from 4.2.1 to 4.2.2 in /packages/components #29 (dependabot[bot])[CU] Bump @babel/traverse from 7.22.8 to 7.23.2 #27 (dependabot[bot])  ","version":"Next","tagName":"h2"},{"title":"tokens-v0.0.12 (2023-10-27)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#tokens-v0012-2023-10-27","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.31 (2023-10-27)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0031-2023-10-27","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.30 (2023-10-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0030-2023-10-26","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.29 (2023-10-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0029-2023-10-26","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.28 (2023-10-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0028-2023-10-26","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.27 (2023-10-26)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0027-2023-10-26","content":" Full Changelog  ","version":"Next","tagName":"h2"},{"title":"components-v0.0.26 (2023-10-25)​","type":1,"pageTitle":"Changelog","url":"/va-mobile-app/design/About/For engineers/changelog#components-v0026-2023-10-25","content":" Full Changelog  Closed issues:  Error: GitHub Repository Not Mapped To eMASS System #5Error: GitHub Repository Not Mapped To eMASS System #4  Merged pull requests:  [CU] Bump @babel/traverse from 7.22.8 to 7.23.2 in /packages/components #26 (dependabot[bot])[Feature] SegmentedControl Storybook Updates #25 (TimRoe)[Bug] Fix Storybook on Android #23 (narin)[CU] Add unit tests to SegmentedControl Core Component #22 (TimRoe)Add testIDs prop to SegmentedControl #19 (narin)Add style-dictionary and generate initial tokens #18 (narin)Fix Storybook web #17 (narin)[Feature] Create Storybook story for Segmented Control #10 (TimRoe)[Feature] Create SegmentedControl Core Component #8 (TimRoe)Figma Integration #7 (narin)Storybook Initial Setup #6 (narin)[Feature] Building foundations, Initial installation of repo architecture and software #2 (TimRoe)Components automated tests #1 (narin)  * This Changelog was automatically generated by github_changelog_generator ","version":"Next","tagName":"h2"},{"title":"Link","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Buttons and links/Link","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#default","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Default (with icon)​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#default-with-icon","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Additional variants​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#additional-variants","content":" AttachmentCalendarDirectionsExternal linkPhonePhone TTYText  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Links​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#when-to-use-links","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h3"},{"title":"When to consider something else​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#when-to-consider-something-else","content":" Use buttons for actions. Use a Button when you want to make a state change or submit a form. Example actions include, but are not limited to, “Add”, “Close”, “Cancel”, or “Save”. Buttons do things, links go places. Refer to guidance on Links vs. buttonsUse action links for calls-to-action. On the website, when you want to draw attention to an important call-to-action (CTA) on the page, such as a link that launches a benefit application, use an Action link. Calls-to-action are not actions themselves (see the previous point). On the mobile app, use a Link or Button component instead.Table of contents. On the website, when you want to make a long page of content with two or more H2s easier to navigate, use an On this page link. On the mobile app, avoid long pages of content that might require a table of contents.Triggering the generation of a PDF. When using for a PDF, use only for linking directly to a PDF, not as a trigger for a process that generates a PDF. For generating a PDF, use a button.  ","version":"Next","tagName":"h3"},{"title":"Behavior​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#behavior","content":" On the website Open VA.gov links in the same window except in certain instances. VA.gov links should open in a new tab only if clicking the link will result in the user losing progress or data. Otherwise, links should open in the same window. See linking to external sites in the content style guide for additional information.Use semantically appropriate encodings. Encode email and phone links with mailto: and tel:, respectively. On the mobile app Links open in the app Links open in a full panel if the content is within the app.Links open in a webview if the content is not within the app and the user does not need a separate sign in to access the content. Links open another app Links open in the browser app if the user needs to sign in to access the content. Before leaving the app, always use a native alert to warn the user. Once confirmed, open the default browser app.Links launch another app if the user is taking an action such as making a phone call, getting directions, or downloading a file. Before leaving the app, consider using a confirmation message (such as a native alert or action sheet) to warn the user. Attachment: Display the attachment in the app with the ability to download to their device.Calendar: Display the event information to allow the user to review and confirm before adding to their calendar. Once confirmed, add to the default calendar app.Directions: Display an Action Sheet to allow the user to select their preferred maps app (Apple Maps, Google Maps, etc.). Once selected, open the maps app with their destination.Phone: Display an Action Sheet to allow the user to confirm the phone call. Once confirmed, open the default phone app.Phone TTY: Display an Action Sheet to allow user to confirm the TTY call. Once confirmed, open the default phone app.Text: Open the default messages app.  ","version":"Next","tagName":"h3"},{"title":"Choosing between variations​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#choosing-between-variations","content":" Choosing between colors In most cases, use the default (blue) color.If the default (blue) color will not work (i.e. insufficient color contrast), you may use the base (gray) link.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#content-considerations","content":" Refer to the VA Design System for content considerationsWhen linking Veterans to VA.gov, be sure to include VA.gov in the link text. For example, instead of saying “Learn more about benefits,” it’s better to say “Learn more about benefits on VA.gov”.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#accessibility-considerations","content":" For guidance on choosing between a Button or Link, see additional documentation.For additional guidance, refer to the VA Design System for accessibility considerations  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#related","content":" Link - VA Design SystemLink - USWDS    ","version":"Next","tagName":"h2"},{"title":"Differences with VADS​","type":1,"pageTitle":"Link","url":"/va-mobile-app/design/Components/Buttons and links/Link#differences-with-vads","content":" The Base link style exists due to mobile app specific needs in dark mode. For example: The v3 Alert component has a colored background for each variation. While working on dark mode, the mobile app team found that the Default link style did not meet color contrast requirements and clashed with the background colors. For this reason, we created a new Base style that's similar to a USWDS Base style.In Storybook, variants are available for content-specific links (add to calendar, get directions, etc). These variants were created to include the onPress logic for app teams. This allows the component to always display a native confirmation message when needed.Currently, the Link component does not support inline links. In the future, a Paragraph component will be created for inline links to support proper text wrapping and accessibility in React Native. ","version":"Next","tagName":"h2"},{"title":"Segmented control","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Two segments​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#two-segments","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Three segments​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#three-segments","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Four segments​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#four-segments","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#usage","content":" A segmented control consists of a horizontal set of 2-4 segments, each of which functions as a button. One option is always selected. The component does not scroll horizontally.  ","version":"Next","tagName":"h2"},{"title":"When to use Segmented control​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#when-to-use-segmented-control","content":" To represent the same kind of content, such as a list-view with different filters applied.To provide closely related choices that affect an object, state, or view. For example, a segmented control can help people select options, switch between views, or sort elements.  ","version":"Next","tagName":"h3"},{"title":"When to consider something else​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#when-to-consider-something-else","content":" If you need to group content that is dissimilar.If you need to enable actions — such as adding, removing, or editing content.If it needs to be accompanied by any other controls or a title if used in the top navigation bar.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#placement","content":" It appears in either the top navigation bar or below that navigation bar, near the top of the screen.It should not be used in the bottom toolbar because toolbar items act on the current screen — they don’t let people switch contexts.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#instances-of-this-component-in-production","content":" Claims uses an Active/Closed segmented control to filter claims by status.Appointments uses an Upcoming/Past segmented control to filter appointments by type.Claims also uses a segmented control to show the Status/Details of claims. This is not an appropriate use of this component since it groups content that is dissimilar. In this case, a different component should be considered.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#content-considerations","content":" Keep labels to 1 word: If you need 2 (or more) words, you're likely trying to include extraneous words or group together items that are not similar enough. You may need to consider using a different component. The label text must be short enough that it doesn't wrap in the component.Consider if labels are used elsewhere on the screen: You can help differentiate different sections beneath the segmented control by not reusing the same labels.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#accessibility-considerations","content":" Reference Segmented Control / Tab - Native app accessibility checklist - MagentaA11yFont scaling: This component will ignore a user's settings for font scaling so the text always remains the same size. This is consistent with Apple's segmented control component.Name: Purpose is clear and matches visible labelRole: Identifies as a button in iOS and &quot;double tap to activate&quot; in AndroidGroup: Visible label (if any) is grouped or associated with the button in a single swipeState: Expresses its state (selected/disabled/dimmed)  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Segmented control","url":"/va-mobile-app/design/Components/Navigation/Secondary/SegmentedControl#related","content":" Tabs - VA Design SystemSegmented control - HIGSegmented button - Material designTabs – Material Design ","version":"Next","tagName":"h2"},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Selection and input/Checkbox","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Checkbox​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#checkbox","content":" Default​  Open in: Storybook | Figma    Tile​  Open in: Storybook | Figma    Error​  Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Checkbox Group​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#checkbox-group","content":" Default​  Open in: Storybook | Figma    Tile​  Open in: Storybook | Figma    Error​  Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#code-usage","content":" Open Storybook: Checkbox | Checkbox Group  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#content-considerations","content":" Refer to the VA Design System for content considerations  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#accessibility-considerations","content":" Refer to the VA Design System for accessibility considerationsScreenreaders should announce the name, role, and state of each checkbox.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Checkbox","url":"/va-mobile-app/design/Components/Selection and input/Checkbox#related","content":" Checkbox - VA Design SystemCheckbox - USWDSCheckbox - Material Design ","version":"Next","tagName":"h2"},{"title":"Radio button","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Selection and input/RadioButton","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#default","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Tile​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#tile","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Error​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#error","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#content-considerations","content":" Refer to the VA Design System for content considerations  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#accessibility-considerations","content":" Refer to the VA Design System for accessibility considerationsScreenreaders should announce the name, role, and state of each radio button.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Radio button","url":"/va-mobile-app/design/Components/Selection and input/RadioButton#related","content":" Radio button - VA Design SystemRadio buttons - USWDSRadio button - Material Design ","version":"Next","tagName":"h2"},{"title":"Text","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Components/Typography/Text","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Headings​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#headings","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Body​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#body","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Display​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#display","content":" Open in: Storybook | Figma    ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Text​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#when-to-use-text","content":" To add content to a screen.  ","version":"Next","tagName":"h3"},{"title":"When to consider something else​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#when-to-consider-something-else","content":" For bulleted or numbered lists, use the Text list component (coming soon).For smaller Navigation copy (such as the bottom tab bar), apply the Navigation text style directly to a text box.  ","version":"Next","tagName":"h3"},{"title":"How this component works​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#how-this-component-works","content":" This component is built using the composite typography tokens.Paragraph spacing is set to the minimum recommended values to align with accessibility guidelines (WCAG SC 1.4.12). While you can increase the amount of paragraph spacing, you should not decrease without consulting an accessibility specialist.  ","version":"Next","tagName":"h3"},{"title":"Choosing between variations​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#choosing-between-variations","content":" There are 9 variations of the Text component.  Use a Heading variation (large, medium, small, x-small) for headings.Use a Body variation (large, medium, small, x-small) for body copy.Use the Display variation for larger display text.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#code-usage","content":" Open Storybook  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Text","url":"/va-mobile-app/design/Components/Typography/Text#related","content":" Text list (coming soon) ","version":"Next","tagName":"h2"},{"title":"Foundation","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/","content":"","keywords":"","version":"Next"},{"title":"A consistent experience​","type":1,"pageTitle":"Foundation","url":"/va-mobile-app/design/Foundation/#a-consistent-experience","content":" In order to maintain a cohesive user experience across VA platforms, it is imperative that design choices are applied thoughtfully and consistently as Veterans navigate across products and services.  ","version":"Next","tagName":"h2"},{"title":"Accessibility​","type":1,"pageTitle":"Foundation","url":"/va-mobile-app/design/Foundation/#accessibility","content":" While this guide will always provide accessible samples and usage guidelines, it is still possible to create inaccessible designs using the components and utilities available in this Design System. Always remember that the audience using VA platforms may not be visual users, may experience color blindness, or have difficulty handling low contrast ratios. Never use color alone as an affordance, always allow users to control automated content, and provide alternative navigation options. ","version":"Next","tagName":"h2"},{"title":"Design tokens","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Design tokens/","content":"","keywords":"","version":"Next"},{"title":"What are design tokens?​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#what-are-design-tokens","content":" Design tokens express a design decision by applying the many color, typography, and spacing options available as design tokens from the U.S. Web Design System (USWDS) to specific contexts within the platforms at the VA. Design tokens allow us to propagate those design decisions to our platforms.  ","version":"Next","tagName":"h2"},{"title":"Taxonomy and typology​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#taxonomy-and-typology","content":" Our tokens have a taxonomy and typology in order to give us the categorization and levels we need to define our tokens. No token uses all of the taxonomy but it does define the available options.  This organizational structure is informed by the work of Nathan Curtis. Read more about Naming Tokens in Design Systems.  ","version":"Next","tagName":"h2"},{"title":"Namespace​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#namespace","content":" System​  Defines the system that token originates within. Current values can be:  uswds: The USWDS. For primitive tokens.vads: All token types. This design system.vacds: The VA Clinician Design System.  Domain​  Currently unused. In the future, could be used for large areas of related tokens that run across systems (e.g. health, benefits, etc.)  ","version":"Next","tagName":"h3"},{"title":"Object​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#object","content":" These levels refer to a component, element within a component, or component group.  Group: Defines a family of tokens. Examples include forms and navigation.Component: Component nameElement: Elements within a component  ","version":"Next","tagName":"h3"},{"title":"Base​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#base","content":" Category​  High level grouping. Current values are:  ColorElevationFontShapeSizeSpacing  Future additions from USWDS may include flex, order, and opacity.  Concept​  Allows tokens to be grouped within a category. Current values may include action, hub, inset, vertical, etc. Future additions may include visualization.  Property​  Defines the token scope. This can be synonymous with the CSS property name.  ","version":"Next","tagName":"h3"},{"title":"Modifiers​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#modifiers","content":" Variant​  Defines variations to distinguish use cases. Examples include primary, secondary, tertiary and heading, body, default.  State​  Defines states of interactivity. Examples include hover, press, focus, error, etc.  Scale​  Places the token within an intentional, ordered range of values. Examples include heading levels: 1, 2, 3, 4, 5 and t-shirt sizes: small, medium, large.  Mode​  Defines a background setting on which elements appear thus enabling light and dark modes. Examples are on-light and on-dark.  ","version":"Next","tagName":"h3"},{"title":"Types​","type":1,"pageTitle":"Design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/#types","content":" There are three types of design tokens in the VA Design System:  1. Primitive​  Primitives mainly come from the USWDS. They are the building blocks that we use. The VA Design System does not use nor add any colors, fonts, nor spacing units that are not defined in the U.S. Design System.  The mobile app library shares primitive tokens with VADS. For example, vads-color-base is a primitive token that references the USWDS token for #1B1B1B.    2. Semantic​  Semantic tokens communicate how a primitive is used. These tokens capture a semantic meaning that should relay the context in which that token should be used.  In the mobile app library, semantic tokens reference primitive tokens and are sometimes shared with VADS. Since the mobile app library needs to account for theming, we currently maintain our own semantic tokens for light and dark mode. For example, vads-color-fg-default-on-light and vads-color-fg-default-on-dark are the default colors used for foreground elements such as text and icons. They reference VADS’ primitive tokens – vads-color-base and vads-color-base-lightest.    3. Component​  Component tokens are scoped to a specific component and represent decisions specific to that component.  In the mobile app library, component tokens reference primitive or semantic tokens and are sometimes shared with VADS. Since the mobile app library needs to account for theming, we currently maintain our own component tokens for light and dark mode. For example, vads-segmented-control-color-fg-default-on-light and vads-segmented-control-color-fg-default-on-dark reference the default colors used for foreground elements such as text and icons.   ","version":"Next","tagName":"h3"},{"title":"How to use design tokens","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Design tokens/Overview","content":"","keywords":"","version":"Next"},{"title":"Getting started​","type":1,"pageTitle":"How to use design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/Overview#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Designers​","type":1,"pageTitle":"How to use design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/Overview#designers","content":" Our design tokens are available for designers in the Design Tokens library in Figma. To install the library, follow the instructions on the For Designers page. The library is updated at the same cadence as the engineering files.  ","version":"Next","tagName":"h3"},{"title":"Engineers​","type":1,"pageTitle":"How to use design tokens","url":"/va-mobile-app/design/Foundation/Design tokens/Overview#engineers","content":" Our design tokens are available in JavaScript format for React Native engineers as a package on NPM. To install the library:  Add the @department-of-veterans-affairs/mobile-tokens library as a dependency in your project’s package.json. (Check NPM for the latest version)Follow the instructions in the README linked above for additional information on how to import and utilize the tokens in your project. ","version":"Next","tagName":"h3"},{"title":"Color","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Design tokens/Color","content":"","keywords":"","version":"Next"},{"title":"Primitive​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#primitive","content":" Open in: Storybook    ","version":"Next","tagName":"h2"},{"title":"Semantic​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#semantic","content":" Open in: Storybook    ","version":"Next","tagName":"h2"},{"title":"Component​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#component","content":" Open in: Storybook    ","version":"Next","tagName":"h2"},{"title":"How to use color tokens​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#how-to-use-color-tokens","content":" ","version":"Next","tagName":"h2"},{"title":"Primitive​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#primitive-1","content":" It’s not recommended to use primitive tokens in your designs. These tokens will not reflect any usage guidance at the semantic or component level. Primitive color tokens will also not support theming in light and dark mode.  ","version":"Next","tagName":"h3"},{"title":"Semantic​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#semantic-1","content":" If you’re looking to use a semantic token in your designs, you can find the appropriate token by understanding the taxonomy. In the mobile app library, we currently use the following options to describe our tokens:  System vads: Used for tokens in the VA Design System Category color: Used for color tokens Concept action: Used for interactive elementsfeedback: Used to inform users of important changes Property background: Used for background elementsborder: Used for borders, strokes, and dividersforeground: Used for foreground elements such as text and iconssurface: Used for surface elements such as alerts, cards, and rows Variant default, inverse, secondary: Used for any elementsdefault, base, destructive: Used for action-related elementsinfo, success, warning, error: Used for feedback-related elements State active: Used for active or onPress states Mode on-light: Used for light modeon-dark: Used for dark mode  For example, let’s look at the Alert component. This component is placed on the background (vads-color-background-default-on-light) and is comprised of multiple tokens for the surface (vads-color-feedback-surface-success-on-light), border (vads-color-feedback-border-success-on-light), and foreground (vads-color-foreground-default-on-light).    ","version":"Next","tagName":"h3"},{"title":"Component​","type":1,"pageTitle":"Color","url":"/va-mobile-app/design/Foundation/Design tokens/Color#component-1","content":" If you’re using a component from the design system, the appropriate component tokens are already applied.  If you’re looking to use a component token in your designs, you can find the appropriate token by looking for the component name in the token name. For example, in vads-segmented-control-color-surface-selected-on-light, the second piece of information tells us that this token is related to the Segmented Control component. After the component name, the token name follows the same naming conventions as semantic tokens. ","version":"Next","tagName":"h3"},{"title":"Typography","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Design tokens/Typography","content":"","keywords":"","version":"Next"},{"title":"Typography tokens​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#typography-tokens","content":" Typography tokens define each property of a text style. They include font family, style, size, line height, and letter spacing. Math is used to calculate values for size and line height.  The base font size is 16. Additional sizes are created using a scale of 1.125The default line height is set to 1.5x the font size. For headings, the line height is set to 1.2x. Line heights follow accessibility best practices and should not be decreased without consulting an accessibility specialist.  ","version":"Next","tagName":"h2"},{"title":"Primitive​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#primitive","content":"   ","version":"Next","tagName":"h3"},{"title":"Semantic​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#semantic","content":"   ","version":"Next","tagName":"h3"},{"title":"Text styles​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#text-styles","content":" Text styles (also known as composite tokens) combine each individual typography token into a defined style. They include styles for headings, body copy, and more. All properties are set using typography tokens, except for paragraph spacing. In the mobile app, spacing tokens are used to define paragraph spacing in a text style.  ","version":"Next","tagName":"h2"},{"title":"Headings​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#headings","content":"   ","version":"Next","tagName":"h3"},{"title":"Body​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#body","content":"   ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#other","content":"   ","version":"Next","tagName":"h3"},{"title":"How to use typography tokens​","type":1,"pageTitle":"Typography","url":"/va-mobile-app/design/Foundation/Design tokens/Typography#how-to-use-typography-tokens","content":" Designers and engineers are encouraged to use typography tokens to ensure a consistent look and feel throughout the app. Multiple typography tokens are combined to create composite tokens (aka text styles). To use typography tokens and text styles in the app, we recommend a few different approaches:  For Headings and Body copy, use the Text component.For larger Display copy, use the Text component.For smaller Navigation copy (such as the bottom tab bar), apply the Navigation text style directly to a text box.  Coming soon  For bulleted/numbered lists, there will be a separate component in the future.For inline links and styling (bold, italics, etc.), there will be a separate component in the future. ","version":"Next","tagName":"h2"},{"title":"Spacing","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Design tokens/Spacing","content":"","keywords":"","version":"Next"},{"title":"Spacing tokens​","type":1,"pageTitle":"Spacing","url":"/va-mobile-app/design/Foundation/Design tokens/Spacing#spacing-tokens","content":" The VA follows the USWDS spacing tokens and adds additional semantic tokens for the website. In the mobile app, React Native requires that spacing tokens are unitless, so a unique set of spacing tokens are used in the mobile app. A different naming convention is also used to avoid confusion with the web’s spacing tokens.  ","version":"Next","tagName":"h2"},{"title":"Primitive​","type":1,"pageTitle":"Spacing","url":"/va-mobile-app/design/Foundation/Design tokens/Spacing#primitive","content":" Open in: Storybook    ","version":"Next","tagName":"h3"},{"title":"How to use spacing tokens​","type":1,"pageTitle":"Spacing","url":"/va-mobile-app/design/Foundation/Design tokens/Spacing#how-to-use-spacing-tokens","content":" Designers and engineers are encouraged to use spacing tokens to ensure consistent spacing between elements.  Designers  In Figma, spacing tokens can be applied to padding, margins, and gaps in Auto Layout. To apply spacing tokens:  Select the Auto Layout group where you’d like to apply spacingIn the Auto Layout panel, find the appropriate padding or gap field and click the hexagon iconApply the spacing token  Engineers  There are two ways for engineers to leverage spacing tokens:  Use the tokens directly when setting spacing values (e.g. margin/padding) on Views and other stylized elementsUse the Spacer component to separate visually distinct components or elements at the same display level (e.g. within the same View) ","version":"Next","tagName":"h2"},{"title":"Logos","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Logos","content":"Logos Refer to the VA Design System for guidance The VA Mobile App library includes a variant for light and dark mode. Open in: GitHub | Figma","keywords":"","version":"Next"},{"title":"VA Mobile App Design System","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Intro","content":"","keywords":"","version":"Next"},{"title":"Getting started​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#getting-started","content":" For designersFor engineers  ","version":"Next","tagName":"h2"},{"title":"Foundation​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#foundation","content":" Design TokensIconsLogos  ","version":"Next","tagName":"h2"},{"title":"Components​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#components","content":" ","version":"Next","tagName":"h2"},{"title":"Alerts and progress​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#alerts-and-progress","content":" AlertLoading indicatorSnackbar  ","version":"Next","tagName":"h3"},{"title":"Buttons and links​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#buttons-and-links","content":" ButtonLink  ","version":"Next","tagName":"h3"},{"title":"Navigation​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#navigation","content":" Segmented control  ","version":"Next","tagName":"h3"},{"title":"Selection and input​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#selection-and-input","content":" CheckboxRadio button  ","version":"Next","tagName":"h3"},{"title":"Typography​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#typography","content":" Text    ","version":"Next","tagName":"h3"},{"title":"Design system team​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#design-system-team","content":" Product Owner: Ryan Thurlwell  ","version":"Next","tagName":"h2"},{"title":"Product​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#product","content":" Kelly Lein  ","version":"Next","tagName":"h3"},{"title":"Engineering​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#engineering","content":" Narin RatanaTim Roettger  ","version":"Next","tagName":"h3"},{"title":"Design​","type":1,"pageTitle":"VA Mobile App Design System","url":"/va-mobile-app/design/Intro#design","content":" Jessica Woodin ","version":"Next","tagName":"h3"},{"title":"About our team","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/About our team/","content":"About our team Team roster and what we do can be found in the Team charter and Team norms.","keywords":"","version":"Next"},{"title":"Icons","type":0,"sectionRef":"#","url":"/va-mobile-app/design/Foundation/Icons","content":"","keywords":"","version":"Next"},{"title":"Icon library​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#icon-library","content":" Refer to the VA Design System for additional guidance  ","version":"Next","tagName":"h2"},{"title":"Appointments​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#appointments","content":"   ","version":"Next","tagName":"h3"},{"title":"Communication​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#communication","content":"   ","version":"Next","tagName":"h3"},{"title":"Feedback​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#feedback","content":"   ","version":"Next","tagName":"h3"},{"title":"Form fields​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#form-fields","content":"   ","version":"Next","tagName":"h3"},{"title":"Health​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#health","content":"   ","version":"Next","tagName":"h3"},{"title":"Interaction​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#interaction","content":"   ","version":"Next","tagName":"h3"},{"title":"Messaging​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#messaging","content":"   ","version":"Next","tagName":"h3"},{"title":"Navigation​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#navigation","content":"   ","version":"Next","tagName":"h3"},{"title":"Payments​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#payments","content":"   ","version":"Next","tagName":"h3"},{"title":"Prescriptions​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#prescriptions","content":"   ","version":"Next","tagName":"h3"},{"title":"Social media​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#social-media","content":"   ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#other","content":"   Note: The VA Mobile App icon library includes several icons that are not included in the VA Design System. These include:  check_box — used for form fieldscrop_square — used for bulletsdescription_outlined — used for navigationhome_outlined — used for navigationindeterminate_check_box — used for form fieldsmedical_services_outlined — used for navigationradio_button_checked — used for form fieldsrequest_quote_outlined — used for navigation  ","version":"Next","tagName":"h3"},{"title":"Icon component​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#icon-component","content":" The Icon component should be used to display icons in the mobile app. It includes all icons from the Icon Library. See the component in Storybook.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#accessibility-considerations","content":" Icon usage typically falls into two categories, decorative and semantic.  Decorative icons are icons that are only used for visual reinforcement. If these were removed from the page, users would still be able to understand and use the page.Semantic icons are icons that convey meaning, rather than only being decorative. This includes icons without text next to them that are used as interactive elements such as buttons.  Refer to the VA Design System for accessibility considerations  ","version":"Next","tagName":"h2"},{"title":"Requesting a new icon​","type":1,"pageTitle":"Icons","url":"/va-mobile-app/design/Foundation/Icons#requesting-a-new-icon","content":" If your team needs a new icon and wants to suggest adding it to the design system, follow these steps:  Check Existing VADS Icons: Look through the current icon set to ensure a similar icon does not already exist. We aim to maintain consistency in semantic use by avoiding duplicating similar icons. Explore USWDS Icons: Search USWDS Icon to see if another existing icon suits your needs. Preferably, choose generic icons that could be reused in various applications. If VADS and USWDS do not contain a suitable icon, you may search Material Icons or browse the official Material Design Icons Figma plugin by Google. Note that we typically use the &quot;filled&quot; icon style.Also, note that all Material Design Icons are 24dp x 24dp and have 2dp of padding surrounding the live area. For more information, see the documentation from Material Design. Submit Your Icon: Once you've found a suitable icon for VADS, submit it using the following link: Request a new addition to the Design System  These steps should streamline the process for suggesting and adding new icons to the design system. ","version":"Next","tagName":"h2"},{"title":"Team norms","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/About our team/team-norms","content":"","keywords":"","version":"Next"},{"title":"Our values​","type":1,"pageTitle":"Team norms","url":"/va-mobile-app/docs/About our team/team-norms#our-values","content":" We strive to create a product that is usable for all Veterans, no matter their abilities. We take a proactive, accessibility-first approach to everything we build. Accessibility is never an afterthought. It’s considered in every step of our process, from initial discovery to QA.We also believe in accessibility beyond compliance. We don’t just meet the bare minimum of accessibility. recommendations. We go above and beyond these recommendations to ensure we’re creating a product that is truly accessible to all of our users. We aim to start simple when building new features and take advantage of existing components.We want to act as a partner to VA rather than a vendor.We get input and feedback from all disciplines throughout feature implementation.We make a point to celebrate our accomplishments.  ","version":"Next","tagName":"h2"},{"title":"Communication​","type":1,"pageTitle":"Team norms","url":"/va-mobile-app/docs/About our team/team-norms#communication","content":" Meetings follow communication norms outlined in Inclusive Meeting Best Practices (below).We use Slack &quot;threads&quot; to contain conversations in a single place and aim to work in public channels.We don’t wait for meetings get question answered.We respect before/after hours time commitments and time zones. When we will be away we communicate availability in Slack, team calendars, and out of office docs.We work to balance having just enough meetings for folks to get work done while also feeling connected to teamMeetings have agenda, notes, description and desired outcome, send along read ahead.Cameras are encouraged but optional in meetings.We strive to keep Friday a non-meeting day.Be considerate of long Slack threads. Signals of a thread getting out of hand are if you have to @folks to get attention or there are multiple conversations going on. If you see that happening, consider changing the format to a meeting and link meeting notes in the Slack thread.Reply to all meeting invitations.Use Slack statuses if you are away or unavailable.  ","version":"Next","tagName":"h2"},{"title":"Inclusive meeting best practices​","type":1,"pageTitle":"Team norms","url":"/va-mobile-app/docs/About our team/team-norms#inclusive-meeting-best-practices","content":" Try to share the meeting agenda and materials ahead of time. This allows folks to come to the meeting prepared with questions, review them async if that is more comfortable, or follow along if they can’t attend a meeting. Also it’s helpful to add timecodes when creating meeting invites.Turn on live captioning for every call. Live captioning services are a critical way for some individuals to understand and participate in meetings.Connect your speech and visuals. Try to connect the subject of your talk to the presentation or on-screen visuals. This helps folk understand who might not be able to see on-screen. If folks are using captions remember that during screen share it means they might immediately see or be reading the captions in real-time.Be mindful of the clock. If you are leading a meeting try to time box agenda items so that everyone gets what they need and expect out of the meeting. If you are participating in a meeting try to keep discussion focused to the agenda so the team can try to work through all the items.Use the raise hand feature in meetings. It helps give everyone a chance to take a turn, and helps facilitators moderate discussions. This also will help people using accessibility tools who may otherwise miss verbal or visual cues.Stay on mute until it is your turn to talk. Interruption and interjections can make live captioning difficult. For people using live captioning (or transcription) services, even innocuous interjections, affirmations, and “hmms” can make it difficult to follow the transcript.Unless called on directly, take turns making space to let other folks speak or answer a question. Helps everyone get a chance to speak in meetings and get experience presenting ideas.Cameras encouraged but optional. Zoom fatigue, anxiety, ADHD, chaotic children or pets, and other life things can make turning your camera on a negative experience. In large group meetings try to turn your camera on during the first 2-3 minutes to say hello. Or try turning it on for small group meetings and/or one-on-ones. It’s nice to see folks' faces, but we’ll leave the choice to be on camera up to you.Consider which chat method would work best for your meeting. For some folks, especially those who might be using assistive technology, discussions in the meeting chat software can be distracting or confusing to follow. Also the discussion often will be lost once the meeting ends which means folks not in attendance could miss out. One option is to capture those comments and conversations in Slack or in an asynchronous document used for the meeting.  Other caption specific pro-tips we’ve learned​  Turn on captions for yourself and follow them to make sure what you are saying is translating correctly. For example, some names don’t translate well so you may need to also say folk’s title (e.g. “Let’s check with the product manager on that feature”).Captioning software can struggle if folks talk too fast. It will attempt to autocorrect words as it goes, but keep in mind that you might have to talk a bit slower so it can translate correctly.Captions can be a second or more behind so folks may need time to catch up.Google Meet: You don’t need to do anything to enable captions on Google Meet.Zoom: If you are hosting Zoom meetings here is info on how to enable auto captioning.  ","version":"Next","tagName":"h3"},{"title":"PTO​","type":1,"pageTitle":"Team norms","url":"/va-mobile-app/docs/About our team/team-norms#pto","content":" We respect time off and understand that mental, physical, and personal health is the top priority for team members. ","version":"Next","tagName":"h3"},{"title":"Team Charter","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/About our team/team-charter","content":"","keywords":"","version":"Next"},{"title":"Vision​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#vision","content":" Each Veteran is securely connected to the VA services that matter most to them regardless of device or VA org chart.  ","version":"Next","tagName":"h2"},{"title":"Mission statement​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#mission-statement","content":" A native mobile app that is a trusted source for Veterans to quickly and easily check the status of their VA services and complete simple, transactional tasks across their health and benefits.  ","version":"Next","tagName":"h2"},{"title":"What we work on​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#what-we-work-on","content":" ","version":"Next","tagName":"h2"},{"title":"Product suite​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#product-suite","content":" Health, benefits, payments, and profile products and services.Global systems like UI library, FE components, accessibility, devops, governance and documentation.  ","version":"Next","tagName":"h3"},{"title":"Product portfolio​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#product-portfolio","content":" Health​  AppointmentsSecure MessagesPrescriptionsVaccines  Benefits​  Claims &amp; appeals statusDisability ratingLetters  Profile​  Personal &amp; military information  Payments​  Compensation  ","version":"Next","tagName":"h3"},{"title":"Team organization​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#team-organization","content":" The VA mobile App team is split into two groups covering different areas of focus.  ","version":"Next","tagName":"h2"},{"title":"Red team​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#red-team","content":" Health-related products in the app.  ","version":"Next","tagName":"h3"},{"title":"Blue team​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#blue-team","content":" Benefits-related products, global app features like navigation and single sign on (SIS), and incremental improvements and maintenance (aka TLC).  See teaming information for the team roster.  ","version":"Next","tagName":"h3"},{"title":"How we work​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#how-we-work","content":" ","version":"Next","tagName":"h2"},{"title":"Communications​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#communications","content":" Slack DSVA “#va-mobile-app”:​  This is our main means of communication with each other. Keep as much conversation in public channels as possible, to minimize duplicative and extraneous communication.  GitHub​  Product and research documentation are on VA.gov repository.Codebase and issues are on separate VA mobile repository.Update tickets regularly. If conversations happen in Slack that are pertinent to a product or initiative, copy the useful info into GitHub/ZenHub.  See Team Norms for more details on team communications.  ","version":"Next","tagName":"h3"},{"title":"Team meeting cadence​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#team-meeting-cadence","content":" Stand-up​  Check in on people and product progress. Raise blockers.  Every Tuesday and Thursdays15-30 minutesRed team at 1:30pm ETBlue team at 2pm ET  Sprint Planning​  Outline work to be done this sprint in order to accomplish the team's goals.  Last Tuesday of every sprint1 hourRed team at 1pm ETBlue team at 2pm ET  Demo​  Showcase of work done during the previous sprint.  Thursday after the end of every sprint45 minutesEntire team (Red + Blue) at 2:35 ET  Retro​  Open discussion on what has gone well, what has been challenging, and discussion of action items.  Mid-Thursday of every sprint45 minutesEntire team (Red + Blue) at 2:30 ET  Sprint 0​  Team and POs working ahead of the team to define future initiatives. Create draft product briefs that we can pull from in the future. Open to anyone on the team.  1 hourWeekly on Wednesdays at 1:05pm ET  Scrum of Scrums (SoS)​  Product, leads, and PO get together to discuss:  Highlight the quarterly plan and review progressReview changes in risks, dependencies, assumptions, or priority for the current sprintReview insights from ongoing discovery or delivery work in the current sprintDiscuss the plan for the upcoming sprintRebalance team staffing if necessaryTriage unplanned work  Cadence:  1 hourWeekly on Tuesdays at 4:05pm ET  Quarterly Planning​  Outline work to be done next quarter in order to accomplish the team's goals.  Upcoming tentative dates Q2 2023 - 4/4/23Q3 2023 - 6/27/23Q4 2023 - 10/3/23Q1 2024 - 1/9/24 2 hoursEntire team (Red + Blue)  ","version":"Next","tagName":"h3"},{"title":"GitHub Etiquette​","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter#github-etiquette","content":" Anyone on the team can create a(n) issue/ticket/story.All teammates are responsible for keeping them up to date.Templates are available within the new issue/ticket/story during creation.  Labels to use:​  Team assigned (mobile-blue-team, etc)Discipline(s) (ux, content, front-end, back-end, qa)Feature area(s) if applicable (direct-deposit, payments, etc.)For bugs, add the bug tag and applicable severity tag  Epics should include:​  Clear acceptance criteriaDefinition of doneA user story that reflects the benefit to a Veteran, Caregiver, or other userBeen broken up into discrete tasks/Github tickets that are attached to the epicAll components/steps have been accounted for in the epicDocumented risks: Risks: Value Risk, Feasibility Risk, Business Viability Risk, Usability Risk  Stories/Tickets should include:​  Title that explains the goal in plain languageLinked to another ticket or epicIncludes: Description (what happened &amp; why we need this ticket),General tasks to performAcceptance criteria (expected result)  Estimation​  We use fibonacci numbers (1, 2, 3, 5, 8, 13) to account for the level of effort, complexity, and amount of unknowns in our work. Here is our guide:  ","version":"Next","tagName":"h3"},{"title":"","type":1,"pageTitle":"Team Charter","url":"/va-mobile-app/docs/About our team/team-charter##","content":" Points\tComplexity\tMeaning1\txxsmall\tTrival change - Up to 2 hours (time mostly in submitting the work) 2\txsmall\tSmall change - Up to 4 hours (More validation is required) 3\tsmall\tRoutine addon/none new - 1 to 2 days (small work/high domain knowledge/1 or no moving parts) 5\tmedium\tRoutine addon/none new - 2 to 3 days (medium work/1-2 moving parts) 8\tlarge\tNew work/High Complexity - 3 to 5 days (over 2 moving parts) 13\txlarge\tToo big/Risky, should be broken down - 1 to 2 weeks ","version":"Next","tagName":"h2"},{"title":"Availability Framework","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/App Features/Availability Framework/","content":"","keywords":"","version":"Next"},{"title":"Feature Summary​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#feature-summary","content":" Given the limitations of app store release processes between iOS and Android, we have no way to quickly/instantly turnaround a fix for even an easily resolved problem. Best case scenario with an app store update labelled 'hotfix' is 24 hours which is a really painful amount of time for a meaningful part of the application to be unusable for a veteran. We need to implement a way to quickly react and notify our userbase to a critical problem with a feature, api, or the app as a whole. Availability Framework allows us to stop user navigation to a given screen with a popup message, allow navigation but replace the screen display with an informative alert, or simply tack on a warning alert at the top of existing screen functionality.  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#use-cases","content":" Use Case 1: A screen is broken (for all users) and it can’t be rendered without crashing the app/red screen of death.Use Case 2: A screen element, feature, or part of a feature is broken (for all users) and the feature entry point can still be accessed and screen rendered (with missing or bad data), and we want to prevent everyone from accessing the broken feature.Use Case 3: A screen element, feature, or part of feature is broken (for SOME users. not all) and the feature entry point can still be accessed screen rendered, but some folks will have critically broken data/feature.  ","version":"Next","tagName":"h2"},{"title":"Use Case Screenshots​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#use-case-screenshots","content":" ","version":"Next","tagName":"h2"},{"title":"Use Case 1​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#use-case-1","content":"   ","version":"Next","tagName":"h3"},{"title":"Use Case 2​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#use-case-2","content":"   ","version":"Next","tagName":"h3"},{"title":"Use Case 3​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#use-case-3","content":"   ","version":"Next","tagName":"h3"},{"title":"How to Enable​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#how-to-enable","content":" Here you'll see existing examples of previously enabled availability framework setups:  ","version":"Next","tagName":"h2"},{"title":"Firebase definitions​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#firebase-definitions","content":"   JSON documentation and the parameter setup.  ","version":"Next","tagName":"h3"},{"title":"Developer Notes​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#developer-notes","content":" If we run into an issue that requires ClaimsHistoryScreen to have an AF toggle, we will need to investigate doing the same for 'ClaimsHistory' for releases that happened in january if it's relevant to the scenario.We should endeavor to avoid screen name changes at all costs to avoid duplicative AF requirements.All 'Else' clauses should be set to the default waygate configuration to avoid issues with the remote config developer setup.  ","version":"Next","tagName":"h2"},{"title":"Default waygate configuration​","type":1,"pageTitle":"Availability Framework","url":"/va-mobile-app/docs/App Features/Availability Framework/#default-waygate-configuration","content":" enabled: true, type: undefined, errorMsgTitle: undefined, errorMsgBody: undefined, appUpdateButton: false  ","version":"Next","tagName":"h3"},{"title":"Encouraged Update","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/App Features/EncouragedUpdate/","content":"","keywords":"","version":"Next"},{"title":"Feature Summary​","type":1,"pageTitle":"Encouraged Update","url":"/va-mobile-app/docs/App Features/EncouragedUpdate/#feature-summary","content":" Encouraged update displays to the veteran that there is a newer version in the app store to encourage them to update with a button to click to either download in-app updates (Android) or to go to the app store to download (iOS). In doing so, they will download the latest version of the app and have access to all of the benefits that come with it. We also give them the option of skipping an update for a particular version, which hides this alert until the next version is released. This alert takes priority over the What's New alert.  This is potentially a precursor to forced upgrading in the future after so many versions of the app have gone by without upgrading. Currently there is no plan to have a forced upgrade feature, but the ability is there.  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"Encouraged Update","url":"/va-mobile-app/docs/App Features/EncouragedUpdate/#use-cases","content":" Use Case 1: The version on the device is older than what is in the store, so it displays the encouraged update alert (see screenshot)Use Case 2: The version on the device is older than what is in the store, and the veteran decided to skip the encourage update for this version so it does not display the alertUse Case 3: The version on the device is the same version in the store or newer (updates from the app store roll out to devices periodically, so it is possible that the app was updated but the store's API is returning an older version) so it displays the What's New alert if applicable  ","version":"Next","tagName":"h2"},{"title":"How to force this to appear in Demo Mode​","type":1,"pageTitle":"Encouraged Update","url":"/va-mobile-app/docs/App Features/EncouragedUpdate/#how-to-force-this-to-appear-in-demo-mode","content":" Go to the developer screen in the settings part of the app and scroll to the bottom where it has Encouraged Update and What's New versionsSet the Encouraged Update version override to a version that is lower than the store versionLogout of the app and log back into demo mode  ","version":"Next","tagName":"h2"},{"title":"Screenshot of an encouraged update​","type":1,"pageTitle":"Encouraged Update","url":"/va-mobile-app/docs/App Features/EncouragedUpdate/#screenshot-of-an-encouraged-update","content":"  ","version":"Next","tagName":"h2"},{"title":"What's New","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/App Features/WhatsNew/","content":"","keywords":"","version":"Next"},{"title":"Feature Summary​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#feature-summary","content":" What's new displays to the veteran what is new in the version that they upgraded to. This alert is only shown if the version of the app the user is on is the most recent in the store and if there is asignificant change to announce with the provided notes to display to the user. The user can dismiss this alert from reappearing for the current version.  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#use-cases","content":" Use Case 1: The user is on the most recent version available in the store, and there are notes for the alert to display, resulting in the alert being shown (see screenshot)Use Case 2: The user is on the most recent version with notes to display, but the user has dismissed the alert, causing it to no longer be displayedUse Case 3: The user is on a older version of the app and instead sees Encouraged UpdateUse Case 4: The user is on the most recent version, but there are no notes to be displayed, so there is no alert  ","version":"Next","tagName":"h2"},{"title":"How to force this to appear in Demo Mode​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#how-to-force-this-to-appear-in-demo-mode","content":" Go to the developer screen in the settings part of the app and scroll to the bottom where it has Encouraged Update and What's New versionsSet the Encouraged Update version override to a version that is equal to or greater than the store versionSet the What's New version override to a version that is a valid version in the common.json file in the translations folder (Valid versions at the time of writing this are 2.0, 2.2, 2.3, 2.13, and 2.23) Step 4: Logout of the app and log back into demo mode  ","version":"Next","tagName":"h2"},{"title":"Example Screenshots of the What's New feature​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#example-screenshots-of-the-whats-new-feature","content":" ","version":"Next","tagName":"h2"},{"title":"Expanded​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#expanded","content":"   ","version":"Next","tagName":"h3"},{"title":"Not Expanded​","type":1,"pageTitle":"What's New","url":"/va-mobile-app/docs/App Features/WhatsNew/#not-expanded","content":"  ","version":"Next","tagName":"h3"},{"title":"Contributing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Contributing/","content":"","keywords":"","version":"Next"},{"title":"VA Health & Benefits: Mobile & Web Collaboration​","type":1,"pageTitle":"Contributing","url":"/va-mobile-app/docs/Contributing/#va-health--benefits-mobile--web-collaboration","content":" ","version":"Next","tagName":"h2"},{"title":"Collaboration Phases​","type":1,"pageTitle":"Contributing","url":"/va-mobile-app/docs/Contributing/#collaboration-phases","content":" This model shows how collaboration between web and mobile teams evolves as web teams develop more experience working in the mobile app and add mobile specific resources to their teams.  The outcome is such that an Experience team owns one or multiple Veteran-facing experiences across modalities – mobile app(s), va.gov, and future modalities.  Any support with Experience teams will be dependent on prioritization.  ","version":"Next","tagName":"h3"},{"title":"Definitions​","type":1,"pageTitle":"Contributing","url":"/va-mobile-app/docs/Contributing/#definitions","content":" Web team: An OCTO-led team that owns Veteran-facing va.gov experience(s).  Mobile team: An OCTO-led team that owns all experiences in VA: Health and Benefits mobile app.  Experience team: A yet-to-exist team that owns Veteran-facing experiences across all modalities: native mobile apps, va.gov, and current/future technologies.  Phase A: Mobile works independently\tPhase B: Web experience advises mobile\tPhase C: Mobile and Web split responsibilities\tPhase D: Mobile advises web experience team**\tPhase E: Web team works independently and become an Experience team.VAHB Mobile App team does all of the implementation and maintenance work\tVAHB Mobile App team does all of the implementation and maintenance work\tWeb experience team works to identify, strategize, and design initiatives VAHB builds/ships, measures and maintains.\tWeb experience team does all of the implementation and maintenance work VAHB may lend resources as needed\tExperience team does all the implementation and maintenance work Web experience team advises mobile team as experience subject matter experts\tVAHB team advises the experience team\tVAHB team advises the experience team, runs QA, and reviews code.\tVAHB runs QA and reviews code prior to submission and release Mobile OCTO team POs manage initiatives\tMobile OCTO team POs manage initiatives\tExperience OCTO POs manage initiatives\tExperience OCTO POs manage initiatives\tExperience OCTO POs manage initiatives  ","version":"Next","tagName":"h3"},{"title":"How an initiative will work in detail​","type":1,"pageTitle":"Contributing","url":"/va-mobile-app/docs/Contributing/#how-an-initiative-will-work-in-detail","content":" Transition Phase C (Mobile and Web split responsibilities) represents the next available stage of collaboration that web and mobile teams can move to while most mobile expertise is still within the mobile team.  Success measures for Phase C​  Web teams move through the strategy and design phases with minimal support from the mobile team.The mobile team implement requirements and designs that the web experience team created with minimal rework.  What needs to be done to move on to the next step:  Initiative Steps\tWeb Application Team\tVAHB Mobile TeamStep 0: Identify\tCreate a project brief that roughly lays out abstract requirements, risks, and major players.\t- Mobile reviews the brief and gives feedback on mobile specific elements. - This is the review gate to consider if this feature or update is appropriate for VAHB. Step 1: Strategize\t- Web team drafts product strategy and decides on requirements. - A formal kickoff could be scheduled at this stage to lay out how these teams will collaborate with each other, timelines, and points of contact. - Web team creates tickets on their own board for research and design.\t- Mobile reviews and gives feedback on mobile specific considerations. - Mobile will prioritize resources to consult on Step 2 Step 2: Design\t- Evaluative research, design and product ideation is done in order to define the first version of a feature. Finalize what is in and what isn’t. What does it look like? - Web creates an implementation plan and submits a testplan request to the mobile QA team.\t- Mobile will consult on research, design, data, content, accessibility, etc - Mobile reviews implementation plan - Mobile prioritizes implementation Step 3: Build/Ship\t- Web shares test accounts and assists with testing - Web assists with providing app store and what’s new content\t- Mobile copies over engineering tickets and test plans - Mobile points engineering and QA tickets - Mobile implements - Mobile leads all necessary steps to include in whole app release process, including phased release, app store info, and what’s new content Step 4: Measure\t- Web assists with comparing web and mobile analytics\t- Mobile monitors initial launch success ","version":"Next","tagName":"h3"},{"title":"Rules for Determining UX Modality","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Contributing/DeterminingModality","content":"","keywords":"","version":"Next"},{"title":"Key Decision Criteria​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#key-decision-criteria","content":" ","version":"Next","tagName":"h2"},{"title":"User Experience​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#user-experience","content":" The primary goal is to ensure veterans can complete tasks easily and efficiently. This means providing the best possible experience and removing friction, whether the feature is within the app, uses a WebView, or requires transitioning to a browser.  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#accessibility","content":" All experiences (native, WebView, SSO, or external link) must prioritize accessibility to support veterans with disabilities. This includes ensuring compatibility with screen readers and assistive technologies, as well as adhering to WCAG/MCAG standards for color contrast, font resizing, and navigation simplicity.  ","version":"Next","tagName":"h3"},{"title":"Performance​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#performance","content":" Consider the speed and performance of the experience. High-frequency, performance-sensitive features (e.g., prescription refills) should exist in both the native mobile app and in an authenticated web experience to ensure a fast and reliable experience across platforms.  ","version":"Next","tagName":"h3"},{"title":"Task Frequency and Complexity​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#task-frequency-and-complexity","content":" High-Frequency, Simple Tasks (e.g., prescription refills, scheduling appointments, secure messaging): Should be native to the app for faster performance and a more seamless experience.Complex, Infrequent Tasks (e.g., viewing labs and test results, reviewing medical records): May be better suited for a WebView or an SSO transition to a browser due to the complexity of building and maintaining these experiences natively.    ","version":"Next","tagName":"h3"},{"title":"UX Options for Feature Implementation​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#ux-options-for-feature-implementation","content":" ","version":"Next","tagName":"h2"},{"title":"Native Mobile App​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#native-mobile-app","content":" Condition: Users have to install the mobile app on their hardware device(s)When to Use: For high-frequency, task-oriented actions that benefit from direct interaction with native device functionality (e.g., secure messaging, prescription refills, checking claims &amp; appeals).Example: Prescription refills are available natively due to their frequent use and the need for performance optimization.Additional considerations Many native features, that do not leverage mobile capabilities, will have corresponding web experiences. There should be consistent user experience across platforms.For features not yet available natively in the app but essential for user tasks (e.g., scheduling appointments), teams could start with an SSO integration (see #3) and plan for future native development.  ","version":"Next","tagName":"h3"},{"title":"WebView​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#webview","content":" Condition: Users have to install the mobile app on their hardware device(s) and click on a link in-appWhen to Use: For displaying external content or information within the app without requiring the user to leave the app or log in again. WebViews are ideal for tasks that involve retrieving information from VA.gov but don't need deep interaction.Example: &quot;Find VA Locations&quot; is a WebView implementation, where the top URL, navigation bar, and headers are removed, but the footer remains for key links and guidance. This simplification helps avoid confusion with non-functional elements (e.g., search or login buttons) and maximizes the mobile screen's usable space while speeding up performance.Additional considerations: To create a streamlined experience, remove unnecessary elements like top URLs, navigation bars, and headers. This prevents redundancy with app navigation, optimizes screen space, and focuses the user on the core content.  ","version":"Next","tagName":"h3"},{"title":"Single Sign On (SSO) to Browser​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#single-sign-on-sso-to-browser","content":" Condition: SSO from mobile app to va.gov works -- as of October 2024, development is in progress, with estimated target delivery of December 2024. Users can access directly from a browser. Users install the mobile app on their hardware device(s), click on a link in-app, and navigate to a browser.When to Use: For more complex or secure actions that do not have a native implementation and require authentication (e.g., viewing labs and test results).Example: A &quot;Labs &amp; Tests&quot; feature could be implemented by sending users via SSO to the authenticated VA.gov browser experience, where they can access their results without needing a fully native implementation.Additional considerations: For features where the user SSOs into a browser, an entry point needs to be built. For example, a &quot;Labs &amp; Tests&quot; navigation in the Health category screen.If a user is likely to need their progress saved during a task (e.g., filling out forms), it may benefit from being a web experience where users can return to it later via a web browser.  ","version":"Next","tagName":"h3"},{"title":"External Link​","type":1,"pageTitle":"Rules for Determining UX Modality","url":"/va-mobile-app/docs/Contributing/DeterminingModality#external-link","content":" Condition: Users can access directly from a browser. Users install the mobile app on their hardware device(s), click on a link in-app, and navigate to a browser.When to Use: For linking to informational resources that do not require authentication and are simple to navigate (e.g., informational pages).Example: The link titled &quot;About VA Disability Ratings&quot; in the mobile app directs users to an external VA.gov webpage that provides extensive information without requiring login. ","version":"Next","tagName":"h3"},{"title":"Back End","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/","content":"Back End BackEnd Engineering resources for the VA Mobile app. See the menu at left for sections.","keywords":"","version":"Next"},{"title":"API","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/API/","content":"API OpenAPI docs","keywords":"","version":"Next"},{"title":"Engineering","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/","content":"","keywords":"","version":"Next"},{"title":"How we work is as important as what we work on​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#how-we-work-is-as-important-as-what-we-work-on","content":" Engineering is not a solitary pursuit. We work together as a team to build something that we share into the world and that people will download and use. We strive to build things that make our end-users' lives better or are useful to them in some manner. How we build a thing has effects on how fast we build, how well the thing we are building works, and how straightforward it is to build on in the future. Often we can overlook the downstream effects of our work in order to complete our tasks in a defined timeline. We should take the time to consider how taking the easy or fastest route can complicate our team’s work in the future.  Our team strives to create fast, good code that deploys to high-uptime applications and services. We work to make the codebase better every time we touch it and to make the final product better as a result. Our team’s philosophy is to build in ways that are smart, accurate, skillful, articulate, safe, and understandable–and as a result: faster. Here are our guiding principles that help us reach those objectives.  ","version":"Next","tagName":"h2"},{"title":"Slow is smooth; Smooth is fast​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#slow-is-smooth-smooth-is-fast","content":" This is one of our guiding principles on this team. We should endeavor to be slow and precise in our work. Precision leads to better and more accurate results, which leads to faster ship times. Taking time to do the right things makes the right things more repeatable, and will pay more dividends in the long run than cutting a corner now to meet a deadline.  ","version":"Next","tagName":"h3"},{"title":"Engineers should practice second-order thinking when approaching problems and tasks. (Think then Act, etc)​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#engineers-should-practice-second-order-thinking-when-approaching-problems-and-tasks-think-then-act-etc","content":" Engineering is more than just tickets and tasks and getting things out the door. Engineering is the implementation of a product, which means that there are higher levels of consideration that we need to be aware of and practice. Engineers should always take the time to think about where their work sits within the system of things and not as if it exists in a vacuum.  Second-order thinking involves solving problems and asking ourselves “What is next?” Thinking about how our changes and work interact with the larger work is paramount to building good software and not making mistakes that we could have prevented. When removing something, we should first know why it was there in the first place in order to understand its reason for being there. Only after we understand this context can we be sure that removing it won’t cause more harm than good.  Chesterton’s Fence is the most common metaphor for this, but any quick search about second order thinking provides a wealth of information if you would like to improve your ability to think in this way.  ","version":"Next","tagName":"h3"},{"title":"Do not accept technical debt in exchange for speed​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#do-not-accept-technical-debt-in-exchange-for-speed","content":" We should avoid doing things later in order to merge something now. It seems logical that we will eventually get back to fixing our small omissions or mistakes. This not only assumes that time will be allocated immediately to address this, but it also assumes that technical debt of this kind is value-neutral. Technical debt that is purposely accrued because you believe it can be addressed later is still technical debt.  We should not accrue this debt without careful consideration, and getting work out the door is not a valid reason to accrue such debt. We should work to make sure we address the small issues and fix those inaccuracies the first time, rather than expect a teammate to come by later and clean up the debt we are creating in our code. Not only does this avoid work in the future, it is also being a good steward and teammate.  ","version":"Next","tagName":"h3"},{"title":"Communication is your primary concern​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#communication-is-your-primary-concern","content":" Our team works tirelessly to make the best product possible. In order to do that, we must maintain clear communication between ourselves and our cross-functional peers. Good communication is the bedrock of any good team. It engenders trust, accountability, understanding and fosters an environment of partnership, creativity and problem solving that is necessary for success in any field.  We communicate our wins, as well as our sticking points and blockers. We communicate issues quickly and work to find solutions within the team. No engineer is alone, and you should trust in our team to help you find a way through any obstacle.  ","version":"Next","tagName":"h3"},{"title":"Document everything.​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#document-everything","content":" Better yet, OVER-document. If it is more complex than a tsdoc or API doc, add an .md file to the docs site. Assume you will never touch this again. Make everything abundantly clear as to how it works. If you are reviewing something and have a question about how something works, ask the person to add some quick comments to clarify. There are few things worse than looking at something complicated with no or almost no documentation. I have personally gone back to work from many years ago, not realizing it was mine and became extremely irritated with the code; it was not documented at all and was extremely abstract. Taking two hours to remember your own work is a sure-fire way to realize how hard it would be for people without your memories to grok a thing. Be kind to future-you and all your coworkers.  ","version":"Next","tagName":"h3"},{"title":"Our work should be as atomic as possible​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#our-work-should-be-as-atomic-as-possible","content":" Whatever we do, we should make sure that what we push onto develop can be pulled out. If we are building things in a fashion that is tightly coupled, we make reversing that change in case of emergency easier if we add it to the code base in multiple, decoupled pushes. Atomic-ness also creates smaller pull requests, which are then easier to review and update. This makes the review process faster, which helps overcome the “tediousness” we may feel. An easier review process should lead to faster merge times.  ","version":"Next","tagName":"h3"},{"title":"Global components and utilities are created or updated on the develop branch and pulled into other branches​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#global-components-and-utilities-are-created-or-updated-on-the-develop-branch-and-pulled-into-other-branches","content":" One of the tenets of good software is reusability. When we create or update reusable components and utilities, we should be pushing that work on to develop first, then pulling those changes back into the branch we are using. This is an extension of the rule about work being as atomic as possible. If we are building a thing that everyone will use, we should add it to the code base by itself then add it to our branch and build the specific use. This allows us to roll back the implementation if it breaks without removing the component from the code. Having specific use decoupled from the implementation makes debugging, identifying and addressing issues faster and safer to manage.  ","version":"Next","tagName":"h3"},{"title":"Single-responsibility​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#single-responsibility","content":" This is another tenet of good software engineering I like to call out because it dovetails with other areas discussed above about working in small, atomic chunks and how we do it. Components in any app can start to morph and take on multiple responsibilities. We should always be reviewing the changes we make to ensure we follow this guideline in order to have a usable code base. If you come across changes that seem to be violating this, you should be comfortable calling this out, explaining your diagnosis and formulating a plan to uncouple the responsibilities. Making sure things are only doing one thing helps us reuse them in ways that make building larger applications faster and easier as a developer.  ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#testing","content":" Cover all your code with tests (of course this is silly, you can’t cover it all with tests, but you should shoot for this and land in a really good place if you miss). Tests should be a part of the process that helps us make sure we don’t break other parts of the code with our additions and to make sure any down-stream dependencies are still operating within the correct bounds in our app.  ","version":"Next","tagName":"h3"},{"title":"Before using a 3rd party lib, first see if there is a way to adopt our own version of the needed functionality​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#before-using-a-3rd-party-lib-first-see-if-there-is-a-way-to-adopt-our-own-version-of-the-needed-functionality","content":" Third-party libraries can be super useful, but can often come at costs to security and application file size. When we find a library we would like to use to create a thing, we should take the time to see if we need the whole thing or if we can take the parts we like from it and make our own implementation. This gives us greater control over the code, makes us less dependent on code we don’t control, and gives us much more flexibility if their implementation ever runs up against our business rules.  ","version":"Next","tagName":"h3"},{"title":"Always consider ALL of the accessibility services when building things​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#always-consider-all-of-the-accessibility-services-when-building-things","content":" Remember that accessibility is a set of services layered over the app by the operating system. Accessibility is not just Voice Over or TalkBack, but a large set of services that provide alternate feedback to users. Beyond system services, things like haptic feedback, font scaling and landscape orientation (the latter being an accessibility concern for wheelchair mounted devices). We should endeavor to think comprehensively about how our changes affect accessibility as a whole, to test against all these things when we are writing code, and to provide feedback if we see implementations that break these services for users.  ","version":"Next","tagName":"h3"},{"title":"Engineers should be able to defend their decisions to good-faithed questions​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#engineers-should-be-able-to-defend-their-decisions-to-good-faithed-questions","content":" Engineers are people, and people make mistakes or miss other avenues of approach. When confronted with good-faith questions of why we choose an approach or questions to consider other things, we should also show good faith and give a logical rationale for our decisions. We may have more insights than someone else and our logic can help them understand our thought process and can help them learn a new way to approach problems.  The flip side is that our logic may be flawed and that someone else can help us correct that logic in order to find new ways for us to think. Good engineers know why they are doing something. The higher we are promoted in engineering, the more we will be asked to explain our rationale and to defend our architecture decisions. Practicing this at every level of our work not only makes the team better through collaboration, but improves the skills we need as our careers progress.  ","version":"Next","tagName":"h3"},{"title":"All of our work should have a ticket, be estimated and be planned into a sprint​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#all-of-our-work-should-have-a-ticket-be-estimated-and-be-planned-into-a-sprint","content":" Working in sprints requires planning for work and executing against that plan. A plan is only as good as our ability to estimate the amount of work we can accomplish in a time period. Not accomplishing tasks because we didn’t estimate correctly, or we had “hidden” work that took up our time has downstream effects on our team’s ability to make commitments to deliver. We should make sure that we are taking credit for all of our work by insisting that we always have a ticket for anything that we are doing, including discovery work. Whether it’s coding a screen, a spike for feasibility, or just googling for possible libraries we should be accounting for this work.  This protects us by showing how much work we are actually doing that may not have an obvious delivery purpose. It also makes sure that we have accurate target dates for the whole project and can show progress when there may not be explicit code to point to. Engineering is about 10% writing code and 90% other stuff (including just thinking and planning). Represent all the work you actually do to help other people understand everything that goes into engineering.  ","version":"Next","tagName":"h3"},{"title":"Tickets should always have an output​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#tickets-should-always-have-an-output","content":" Whether it's code, an artifact or a ticket comment, a ticket should indicate the required output and where it lives in order to provide an audit trail for another engineer later.  If we are making sure there is always a task trail for our work, we should also make sure that we are providing an output for everything we do. Most often this is pull requests for the code we wrote. When this is not the case, we should make sure that the tickets are explicit about what the output is and that we create and document the correct output. Sometimes this will be a documentation page. Sometimes this might be a writeup of our discovery or spike findings and our proposed solution.  A strong engineering team is capable of many things beyond coding and we should be creating artifacts that showcase our work on non-code problems. This allows us to be creative and collaborative with the team and creates a permanent record for anyone picking up our work later that doesn’t require us to personally rehash the entire work.  ","version":"Next","tagName":"h3"},{"title":"Engineers should feel empowered to provide feedback to Product and UX teams about what we are building.​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#engineers-should-feel-empowered-to-provide-feedback-to-product-and-ux-teams-about-what-we-are-building","content":" Engineers have valuable experience in how things work when we build them. We spend countless hours clicking through our apps and testing all the calls which gives us a first-row seat to the good and the bad parts of solutions. We should endeavor to provide constructive, effective feedback to the other teams. This feedback should not be limited to things where we see issues, but also where we appreciate the design and product solutions.  The inverse of this is that we should trust that after we provide feedback that the other teams are evaluating our feedback and using it to inform their decisions. If their decisions go against what we as engineers suggested, we should accept that in all but the most limited situations. Software is a collaborative process, but is also a process that frequently requires compromise in order to avoid spinning in circles on features.  ","version":"Next","tagName":"h3"},{"title":"Engineers should have the power to suggest process and implementation changes​","type":1,"pageTitle":"Engineering","url":"/va-mobile-app/docs/Engineering/#engineers-should-have-the-power-to-suggest-process-and-implementation-changes","content":" Developer experience is a real thing, I promise. How we work can be as important as what we work on. When engineers see an area for improvement, they should feel enabled to make process improvement suggestions. Remember that identifying the problem is only the beginning, we also need to have a plan on how to overcome the issue. Learning to create proposals and plans for implementing solutions is a very important skill for engineers as they progress in their careers, and we should be practicing those skills whenever we have the chance. We gain skills for thinking about a project above the code, we learn creative ways to solve problems and learn how to give and receive feedback from others, and then learn to incorporate that feedback into our own work to become better engineers and teammates. The idea of a player-led team starts with empowering the players to make suggestions and to learn from feedback in a safe space.  While this is not a promise to implement all solutions that are offered up–sometimes ideas may not work for the project or for the context or may just not work yet. We promise to review all of the ideas and to communicate the why or why not so that we all can understand the context. There is still valuable insight and skill to be gained in the process and can help level-up our ability to influence people. ","version":"Next","tagName":"h3"},{"title":"Background Workers and Caching","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/BackgroundWorkersAndCaching","content":"","keywords":"","version":"Next"},{"title":"Background Workers​","type":1,"pageTitle":"Background Workers and Caching","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/BackgroundWorkersAndCaching#background-workers","content":" Vets-api uses Sidekiq for background processing and scheduling.Mobile typically uses async jobs for caching, updating user accounts, and logging (to avoid taxing the system on a log that would otherwise be hit too often)Mobile has various jobs that can be found in modules/mobile/app/workers directory.New job schedules must be initialized in lib/periodic_jobs.rb (event-driven async jobs do not need to be set here)When scheduling a new job, try to spread out jobs to run at different times of the day but keep in mind that many upstream services go down for maintenance in the evening and on weekends.  ","version":"Next","tagName":"h2"},{"title":"Caching​","type":1,"pageTitle":"Background Workers and Caching","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/BackgroundWorkersAndCaching#caching","content":" Caching within Mobile is done on a feature by feature basis. Some services used within vets-api do the caching, and in some cases when performance is struggling, Mobile will implement our own caching.If caching is implemented within Mobile, add a useCache parameter to enable/disable caching. This is useful for debugging issues.Cached data within Mobile typically has a Time to Live (TTL) of 30 minutes (session caches are much shorter)Cache TTL can be found in config/redis.yml ","version":"Next","tagName":"h2"},{"title":"Continuous Integration and Deployment","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment","content":"","keywords":"","version":"Next"},{"title":"Production Deployment​","type":1,"pageTitle":"Continuous Integration and Deployment","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment#production-deployment","content":" See Platform Support docs for schedule of production deploymentTry to merge in your PR with adequate time to check that it works in staging. Because Staging and Production both use the master branch, once your PR is merged, you only have until the next production deploy to test your changes and revert them if necessary. Your code can occasionally get pulled into an off cycle deploy hotfix that can happen outside the regularly scheduled daily deploys. You can test changes on your branch without merging into master through review instances but this is not commonly used due to workarounds required to get a SIS user token. See Review Instances.Checking when production was last re-deployed can be done at through Argo via the last sync result section.  ","version":"Next","tagName":"h2"},{"title":"Staging Deployment​","type":1,"pageTitle":"Continuous Integration and Deployment","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment#staging-deployment","content":" Staging automatically redeploys after every new commit to Master (only during business hours). This typically takes up to 20 minutes.Checking when staging was last re-deployed can be done at through Argo via the last sync result section.  ","version":"Next","tagName":"h2"},{"title":"Pull Request Continuous Integration​","type":1,"pageTitle":"Continuous Integration and Deployment","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment#pull-request-continuous-integration","content":" Follow PR best practicesWhen a PR is created, multiple checks are done before it is allowed to merge. Rubocop, all changes must comply with the linter, see Rubocop.All specs must pass. There are some specs (non-mobile) that do not pass consistently. This typically get disabled for this check but can occasionally slip through and fail your specs. If this check does fail, it may be a transient issue with the CI pipeline and just needs to be re-run. Occassionally, bad code gets merged into master that eventually gets corrected. You may need to re-merge with master to bring in these fixes to get this job to succeed (use re-merge master button on PR github page, don't have to do it manually). If after about 4 to 5 re-runs and re-merges of master into your branch, if it is still not passing, reach out to DSVA Platform Support.Total lines of change (LOC) is under 500. If it is above 500 and cannot realistically be reduced, you can request an exception through DSVA Platform Support (See above link). JSON and YML files such as VCR cassettes used in specs do not count towards LOC.Approved review by a Mobile team member. (Technically, a VA API Engineer from platform support approval will allow you to merge but as an internal policy, we require at least one mobile engineer to approve.)If there are changes outside the mobile module, an additional review will be required by VA API Engineers group. This can also be requested by the DSVA Platform support (see above link).  ","version":"Next","tagName":"h2"},{"title":"Rubocop​","type":1,"pageTitle":"Continuous Integration and Deployment","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment#rubocop","content":" A linter used within vets-api that enforces style rules.Can be run locally on all of the mobile code by running bundle exec rubocop modules/mobile -aRules and exceptions for these styles can be modified in the .rubocop.yml in the root of vets-apiRules can be disabled on a case by case basis by disabling the rule inline in your ruby file. EX: module length rule can be disabled by putting # rubocop:disable Metrics/ModuleLength before the module than # rubocop:enable Metrics/ModuleLength after the module. This should only be done if complying with the rule creates even worse looking code. ","version":"Next","tagName":"h2"},{"title":"Authentication Diagrams","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams","content":"","keywords":"","version":"Next"},{"title":"Username and Password Authorization Flow​","type":1,"pageTitle":"Authentication Diagrams","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams#username-and-password-authorization-flow","content":"   sequenceDiagram participant User participant App participant Server User-&gt;&gt;App: Enter username and password App-&gt;&gt;Server: Send username and password Server--&gt;&gt;App: Send auth result App--&gt;&gt;User: Display auth result   ","version":"Next","tagName":"h2"},{"title":"Biometrics Flow for Username and Password Initial Login​","type":1,"pageTitle":"Authentication Diagrams","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams#biometrics-flow-for-username-and-password-initial-login","content":"   sequenceDiagram participant User participant Keychain participant App participant Server User-&gt;&gt;App: Enter username and password App--&gt;&gt;User: Do you want to login with biometrics next time? User-&gt;&gt;App: Yes! App-&gt;&gt;Keychain: Here is the username and pw for this app, keep it safe, please App-&gt;&gt;Server: Send username and password Server--&gt;&gt;App: Send auth result App--&gt;&gt;User: Display auth result   ","version":"Next","tagName":"h2"},{"title":"Biometrics Flow for Username and Password Subsequent Login​","type":1,"pageTitle":"Authentication Diagrams","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams#biometrics-flow-for-username-and-password-subsequent-login","content":"   sequenceDiagram participant User participant Keychain participant App participant Server App-&gt;&gt;Keychain: Is there a username and pw saved for this app? Keychain--&gt;&gt;App: Yes there is! App-&gt;&gt;User: Can I please have your biometrics? User--&gt;&gt;App: Here you go! App-&gt;&gt;Keychain: Here are the biometrics, can you send the username/pw to me? Keychain--&gt;&gt;App: Here are the username and pw. App-&gt;&gt;Server: Send username and password Server--&gt;&gt;App: Send auth result App--&gt;&gt;User: Display auth result   ","version":"Next","tagName":"h2"},{"title":"VA: Health and Benefits Biometrics Initial Login​","type":1,"pageTitle":"Authentication Diagrams","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams#va-health-and-benefits-biometrics-initial-login","content":"   sequenceDiagram participant User participant Secure App Storage participant App participant SIS participant Identity Provider User-&gt;&gt;App: Tap Login button App-&gt;&gt;SIS: Start the sign in process SIS-&gt;&gt;User: Which Identity Provider do you want? User--&gt;&gt;SIS: This one please. SIS--&gt;&gt;Identity Provider: Please authenticate this person at IAL2/AAL2/LOA3 Identity Provider-&gt;&gt;User: Please send your username and password User--&gt;&gt;Identity Provider: Here they are Identity Provider--&gt;&gt;SIS: It's them, I'm sure of it SIS--&gt;&gt;App: Here is a code to get your tokens App-&gt;&gt;SIS: Please create a token and session for me SIS--&gt;&gt;App: Done and done! Here is the token App-&gt;&gt;User: Do you want to use biometrics to log in? User--&gt;&gt;App: Yes please! App-&gt;&gt;Secure App Storage: Please hang on to this for us and lock it with biometrics Secure App Storage--&gt;&gt;App: You got it! App--&gt;&gt;User: Display Auth Result   ","version":"Next","tagName":"h2"},{"title":"VA: Health and Benefits Biometrics Subsequent Login​","type":1,"pageTitle":"Authentication Diagrams","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Auth Diagrams#va-health-and-benefits-biometrics-subsequent-login","content":"   sequenceDiagram participant User participant Secure App Storage participant App participant SIS App-&gt;&gt;Secure App Storage: Is there a stored token? Secure App Storage--&gt;&gt;App: Yes there is App-&gt;&gt;User: Can I please have your biometrics? User--&gt;&gt;App: Here you go! App-&gt;&gt;Secure App Storage: Here are the biometrics, can you send the token to me? Secure App Storage--&gt;&gt;App: Here it is! App-&gt;&gt;SIS: Can I get a refreshed token, please? Here is the old one. SIS--&gt;&gt;App: Here you go, one new token. App--&gt;&gt;User: Display Auth Result   In order to regenerate these graphs, add 'mermaid' to the end of the ``` at the beginning of each codeblock. ","version":"Next","tagName":"h2"},{"title":"Devops","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops","content":"","keywords":"","version":"Next"},{"title":"AWS​","type":1,"pageTitle":"Devops","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops#aws","content":" All variables should first be put in AWS. If it is not done first, when Manifests repo looks for the new variables, it will fail deployment if it is not found. This can be done at AWS with the following steps:  Login and find service Systems ManagerGoto Parameter Store in left columnIn search bar, type in mobile and use other mobile keys and urls as reference to how to format new ones. The path need to match exactly what is added to Manifests.  ","version":"Next","tagName":"h2"},{"title":"Manifests Repo​","type":1,"pageTitle":"Devops","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops#manifests-repo","content":" Once AWS has the variable, add it to the vsp-infra-application-manifests repo in the following locations:  apps/vets-api/staging/templates/secrets.yaml: This file maps the AWS path to a variable name.  - key: /dsva-vagov/vets-api/prod/mobile_lighthouse_letters/api_url name: mobile_lighthouse_letters_api_url   apps/vets-api/staging/values.yaml: This file needs two additions: mapping that name from secrets.yaml to an env variables and fetching env variable.  - name: mobile_lighthouse_letters_api_url path: /dsva-vagov/vets-api/prod/mobile_lighthouse_letters/api_url env_var: MOBILE_LIGHTHOUSE_LETTERS_API_URL   mobile_lighthouse_letters: api_url: &lt;%= ENV['MOBILE_LIGHTHOUSE_LETTERS_API_URL'] %&gt;   Repeat these steps for the production files in apps/vets-api/prod. Dev env is not used by mobile and does not need to be added there.  ","version":"Next","tagName":"h2"},{"title":"Devops Repo​","type":1,"pageTitle":"Devops","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops#devops-repo","content":" If you'd like to use these values in review instances, after updating Manifests repo, add the variables to devops repo in ansible/roles/review-instance-configure/vars/settings.local.yml  ","version":"Next","tagName":"h2"},{"title":"Adding Local Settings​","type":1,"pageTitle":"Devops","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops#adding-local-settings","content":" Add a new section to config/settings.yml in the vets-api. See mobile entry lighthouse_health_immunization as reference.  This file populates these variables in local spec environment. Variables will get overwritten by the Devops/Manifest values in staging and production.  The names of the variables should be identical to what is in Devops/Manifests repos but the values can be dummy values. They can then be referenced by Settings variable in specs.  ","version":"Next","tagName":"h2"},{"title":"Forward Proxy​","type":1,"pageTitle":"Devops","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Devops#forward-proxy","content":" If updating forward proxies to a URL is necessary, this can be done at ansible/deployment/config, fwdproxy-vagov-staging.yml, and ansible/deployment/config/fwdproxy-vagov-prod.yml ","version":"Next","tagName":"h2"},{"title":"Directory Layout","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout","content":"","keywords":"","version":"Next"},{"title":"Controllers Directory​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#controllers-directory","content":" /modules/mobile/app/controllers   Versioning of controllers happens when there is an incompatibility with schema changes from upstream. This does not include new fields additions.  ","version":"Next","tagName":"h2"},{"title":"Models Directory​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#models-directory","content":" /modules/mobile/app/models   The models directory contains several specific types of classes.  ","version":"Next","tagName":"h2"},{"title":"Standard Models​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#standard-models","content":" Even though ActiveRecord is not in use, there are files here that still define the representations of data.  ","version":"Next","tagName":"h3"},{"title":"Adapters​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#adapters","content":" Adapters are used whenever we need to massage data from one schema to another. For instance, if we're upgrading to a new upstream endpoint and the data from the new endpoint changed names and/or is in a different format, we use adapters so that the new data is backwards compatible.  ","version":"Next","tagName":"h3"},{"title":"Contracts​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#contracts","content":" Used for validating params in controllers  ","version":"Next","tagName":"h3"},{"title":"Policies​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#policies","content":" /modules/mobile/app/policies   Authorization policies used to verify access to routes and resources  ","version":"Next","tagName":"h2"},{"title":"Serializers​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#serializers","content":" /modules/mobile/app/serializers   Definitions of how different models should be serialized. These all conform to the JSON API standard.  ","version":"Next","tagName":"h2"},{"title":"Services​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#services","content":" /modules/mobile/app/services   Objects used for communicating with upstream service objects. These can be a mixture of services we've written directly, or proxy objects we've written that communicate with other teams' objects. Usually objects here inherit fromCommon::Client::Base or are related to configuration for such objects.  ","version":"Next","tagName":"h2"},{"title":"Workers​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#workers","content":" /modules/mobile/app/workers   View information about vackground workers  ","version":"Next","tagName":"h2"},{"title":"Helpers​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#helpers","content":" /modules/mobile/app/helpers   Not traditional rails helpers because this is a pure api without views. These are just POROs. Some do make requests to upstream services and, as such, are indistinguishable from our proxies  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#testing","content":" The various paths for testing are as follows  # Specs /modules/mobile/spec/ # VCR Cassettes /spec/support/vcr_cassettes/mobile/   ","version":"Next","tagName":"h2"},{"title":"Docs​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#docs","content":" /modules/mobile/docs   ","version":"Next","tagName":"h2"},{"title":"Misc​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#misc","content":" ","version":"Next","tagName":"h2"},{"title":"Lib​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#lib","content":" /modules/mobile/lib   Traditionally, lib contains code that is not specific to the rails app. our contains:  Validation errors classesEnginesScripts  ","version":"Next","tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#config","content":" /modules/mobile/config   Standard rails config, such as routes  ","version":"Next","tagName":"h3"},{"title":"DB​","type":1,"pageTitle":"Directory Layout","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/DirectoryLayout#db","content":" /modules/mobile/db   Data migrations, though we seldom used because we rarely have db backed models ","version":"Next","tagName":"h3"},{"title":"Address Update Flow","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow","content":"","keywords":"","version":"Next"},{"title":"Single match valid address​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#single-match-valid-address","content":" POST /v0/user/addresses/validate   ","version":"Next","tagName":"h2"},{"title":"Validate Address Request​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#validate-address-request","content":" { &quot;addressLine1&quot;: &quot;51 W Weber Rd&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryName&quot;: &quot;United States&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;type&quot;: &quot;DOMESTIC&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot; }   ","version":"Next","tagName":"h3"},{"title":"Validate Address Response​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#validate-address-response","content":" The address has a 100% confidence score. The address that's returned can be sent in a new/update request. In this case the address object in the meta data should be passed along in that request.  { &quot;data&quot;: [ { &quot;id&quot;: &quot;a3add173-380c-4387-9d72-276b755aa980&quot;, &quot;type&quot;: &quot;suggested_address&quot;, &quot;attributes&quot;: { &quot;addressLine1&quot;: &quot;51 W Weber Rd&quot;, &quot;addressLine2&quot;: null, &quot;addressLine3&quot;: null, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;internationalPostalCode&quot;: null, &quot;province&quot;: null, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;zipCodeSuffix&quot;: &quot;1922&quot; }, &quot;meta&quot;: { &quot;address&quot;: { &quot;confidenceScore&quot;: 100.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;CONFIRMED&quot;, &quot;residentialDeliveryIndicator&quot;: &quot;RESIDENTIAL&quot; }, &quot;validationKey&quot;: -1398777841 } } ] }   PUT /v0/user/addresses   ","version":"Next","tagName":"h3"},{"title":"User Address Request​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#user-address-request","content":" { &quot;addressMetaData&quot;: { &quot;confidenceScore&quot;: 100.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;CONFIRMED&quot;, &quot;residentialDeliveryIndicator&quot;: &quot;RESIDENTIAL&quot; }, &quot;addressLine1&quot;: &quot;51 W Weber Rd&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryName&quot;: &quot;United States&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;id&quot;: 181513 }   Addresses Response​  { &quot;data&quot;: { &quot;id&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;type&quot;: &quot;async_transaction_vet360_address_transactions&quot;, &quot;attributes&quot;: { &quot;transactionId&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;transactionStatus&quot;: &quot;COMPLETED_SUCCESS&quot;, &quot;type&quot;: &quot;AsyncTransaction::Vet360::AddressTransaction&quot;, &quot;metadata&quot;: [] } } }   ","version":"Next","tagName":"h3"},{"title":"Multiple match addresses​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#multiple-match-addresses","content":" POST /v0/user/addresses/validate   ","version":"Next","tagName":"h2"},{"title":"Multiple Addresses Request​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#multiple-addresses-request","content":" { &quot;addressLine1&quot;: &quot;37 1st st&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Brooklyn&quot;, &quot;countryName&quot;: &quot;United States&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;NY&quot;, &quot;zipCode&quot;: &quot;11249&quot;, &quot;type&quot;: &quot;DOMESTIC&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, }   ","version":"Next","tagName":"h3"},{"title":"Multiple Addresses Response​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#multiple-addresses-response","content":" In this case two address matches are returned and should be displayed to the user so they can pick which they'd like to use. As above the meta.address object is passed along in the new/update request.  { &quot;data&quot;: [ { &quot;id&quot;: &quot;56c30b81-9162-4f64-86ce-e7eaa3ae0327&quot;, &quot;type&quot;: &quot;suggested_address&quot;, &quot;attributes&quot;: { &quot;addressLine1&quot;: &quot;37 N 1st St&quot;, &quot;addressLine2&quot;: null, &quot;addressLine3&quot;: null, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Brooklyn&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;internationalPostalCode&quot;: null, &quot;province&quot;: null, &quot;stateCode&quot;: &quot;NY&quot;, &quot;zipCode&quot;: &quot;11249&quot;, &quot;zipCodeSuffix&quot;: &quot;3939&quot; }, &quot;meta&quot;: { &quot;address&quot;: { &quot;confidenceScore&quot;: 100.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;UNDELIVERABLE&quot; }, &quot;validationKey&quot;: -73046298 } }, { &quot;id&quot;: &quot;671e752c-3292-4a2b-8747-d42b2bd56055&quot;, &quot;type&quot;: &quot;suggested_address&quot;, &quot;attributes&quot;: { &quot;addressLine1&quot;: &quot;37 S 1st St&quot;, &quot;addressLine2&quot;: null, &quot;addressLine3&quot;: null, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Brooklyn&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;internationalPostalCode&quot;: null, &quot;province&quot;: null, &quot;stateCode&quot;: &quot;NY&quot;, &quot;zipCode&quot;: &quot;11249&quot;, &quot;zipCodeSuffix&quot;: &quot;4101&quot; }, &quot;meta&quot;: { &quot;address&quot;: { &quot;confidenceScore&quot;: 100.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;CONFIRMED&quot;, &quot;residentialDeliveryIndicator&quot;: &quot;MIXED&quot; }, &quot;validationKey&quot;: -73046298 } } ] }   PUT /v0/user/addresses   ","version":"Next","tagName":"h3"},{"title":"Multiple Addresses Request 2​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#multiple-addresses-request-2","content":" { &quot;addressMetaData&quot;: { &quot;confidenceScore&quot;: 100.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;CONFIRMED&quot;, &quot;residentialDeliveryIndicator&quot;: &quot;MIXED&quot; }, &quot;addressLine1&quot;: &quot;37 S 1st St&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Brooklyn&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;NY&quot;, &quot;zipCode&quot;: &quot;11249&quot;, &quot;zipCodeSuffix&quot;: &quot;4101&quot;, &quot;id&quot;: 181513 }   ","version":"Next","tagName":"h3"},{"title":"Multiple Addresses Response 2​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#multiple-addresses-response-2","content":" { &quot;data&quot;: { &quot;id&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;type&quot;: &quot;async_transaction_vet360_address_transactions&quot;, &quot;attributes&quot;: { &quot;transactionId&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;transactionStatus&quot;: &quot;COMPLETED_SUCCESS&quot;, &quot;type&quot;: &quot;AsyncTransaction::Vet360::AddressTransaction&quot;, &quot;metadata&quot;: [] } } }   ","version":"Next","tagName":"h3"},{"title":"Overridding and 'invalid' address​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#overridding-and-invalid-address","content":" POST /v0/user/addresses/validate   ","version":"Next","tagName":"h2"},{"title":"Invalid Address Request​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#invalid-address-request","content":" { &quot;addressLine1&quot;: &quot;4200 Weasel Rd&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryName&quot;: &quot;United States&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;type&quot;: &quot;DOMESTIC&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot; }   ","version":"Next","tagName":"h3"},{"title":"Invalid Address Response​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#invalid-address-response","content":" This response comes back with a 0% confidence score. We can let the user override the validation by passing back the meta.validationKey in the new/update request.  { &quot;data&quot;: [ { &quot;id&quot;: &quot;6ba2f94b-c143-40da-8c5d-a76a637945b5&quot;, &quot;type&quot;: &quot;suggested_address&quot;, &quot;attributes&quot;: { &quot;addressLine1&quot;: &quot;4200 Weasel Rd&quot;, &quot;addressLine2&quot;: null, &quot;addressLine3&quot;: null, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;internationalPostalCode&quot;: null, &quot;province&quot;: null, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;zipCodeSuffix&quot;: null }, &quot;meta&quot;: { &quot;address&quot;: { &quot;confidenceScore&quot;: 0.0, &quot;addressType&quot;: &quot;Domestic&quot;, &quot;deliveryPointValidation&quot;: &quot;MISSING_ZIP&quot; }, &quot;validationKey&quot;: 377261722 } } ] }   PUT /v0/user/addresses   ","version":"Next","tagName":"h3"},{"title":"User Addresses Request​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#user-addresses-request","content":" { &quot;validationKey&quot;: 377261722, &quot;addressLine1&quot;: &quot;4200 Weasel Rd&quot;, &quot;addressType&quot;: &quot;DOMESTIC&quot;, &quot;city&quot;: &quot;Columbus&quot;, &quot;countryName&quot;: &quot;United States&quot;, &quot;countryCodeIso3&quot;: &quot;USA&quot;, &quot;stateCode&quot;: &quot;OH&quot;, &quot;zipCode&quot;: &quot;43202&quot;, &quot;type&quot;: &quot;DOMESTIC&quot;, &quot;addressPou&quot;: &quot;CORRESPONDENCE&quot;, &quot;id&quot;: 181513 }   ","version":"Next","tagName":"h3"},{"title":"User Addresses Response​","type":1,"pageTitle":"Address Update Flow","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/AddressUpdateFlow#user-addresses-response","content":" { &quot;data&quot;: { &quot;id&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;type&quot;: &quot;async_transaction_vet360_address_transactions&quot;, &quot;attributes&quot;: { &quot;transactionId&quot;: &quot;b2e51260-00c9-4db6-80f6-b6c7541a9e54&quot;, &quot;transactionStatus&quot;: &quot;COMPLETED_SUCCESS&quot;, &quot;type&quot;: &quot;AsyncTransaction::Vet360::AddressTransaction&quot;, &quot;metadata&quot;: [] } } }  ","version":"Next","tagName":"h3"},{"title":"Endpoint Creation Checklist","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist","content":"","keywords":"","version":"Next"},{"title":"Checklist for creating new endpoints​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#checklist-for-creating-new-endpoints","content":" ","version":"Next","tagName":"h2"},{"title":"App Functionality​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#app-functionality","content":" Added endpoint to routes.rb (modules/mobile/config/routes.rb)Created new controller method for endpoint (modules/mobile/app/controllers)Created new serializer (modules/mobile/app/serializers/mobile) (if applicable)Created new model (modules/mobile/app/models) (if applicable)Created new pagination contract (modules/mobile/app/models/mobile/v0/contracts) (if applicable)  ","version":"Next","tagName":"h3"},{"title":"Specs​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#specs","content":" Wrote request specs for new endpoint in rspec (modules/mobile/spec/request)Created JSON schema for endpoint (modules/mobile/spec/support/schemas) (if applicable)  ","version":"Next","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#documentation","content":" Created $ref schema for new endpoint (modules/mobile/docs/schemas)Updated openapi.yaml for new endpoint (modules/mobile/docs/openapi.yaml)Included standard error responses in docs (more responses may be applicable for some endpoints):  '401': $ref: '#/components/responses/401' '403': $ref: '#/components/responses/403' '404': $ref: '#/components/responses/404' '408': $ref: '#/components/responses/408' '500': $ref: '#/components/responses/500' '502': $ref: '#/components/responses/502' '503': $ref: '#/components/responses/503' '504': $ref: '#/components/responses/504'   Regenerated OpenAPI documentation HTML file by running modules/mobile/docs/generate_static_docs.sh  ","version":"Next","tagName":"h3"},{"title":"Monitoring​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#monitoring","content":" Added new endpoint to SERVICE_GRAPH (modules/mobile/app/controllers/mobile/v0/maintenance_windows_controller.rb) (only applicable for new upstream services used) Updated request specs (modules/mobile/spec/models/service_graph_spec.rb) Added new endpoint component to api_mobile_components in devops repo (ansible/deployment/config/revproxy-vagov/vars/nginx_components.yml) (only applicable if new endpoint not already covered by any existing components) Ordered the components accordingly to avoid incorrect matches (Components are used to match the routes of incoming requests. When a new request is received by the vets-api, datadog will attempt to associate it with the first component in the list that matches- e.g. if a new request comes in for /mobile/v0/appointments and appointment is listed above appointments in the components list, it will associate the request with the appointment component.)Added mapping of component section to nginx_api_server.conf.j2 (ansible/deployment/config/revproxy-vagov/templates/nginx_api_server.conf.j2) (if new component section added in nginx_components.yml)Added mapping of component section to nginx_new_api_server.conf.j2 (ansible/deployment/config/revproxy-vagov/templates/nginx_new_api_server.conf.j2) (if new component section added in nginx_components.yml)  ","version":"Next","tagName":"h3"},{"title":"Lighthouse CCG authorization services​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#lighthouse-ccg-authorization-services","content":" Some Lighthouse APIs use an authorization flow called, client credentials grant (CCG). See Lighthouse documentation for more information. Mobile has already implemented this authorization flow with at least the immunizations endpoints so generating the JWT token logic can be borrowed from that.  Adding a new service will require the following steps (For questions on the first two steps, contact Derek Brown):  Request sandbox access or ask Lighthouse to expand the permissions of an existing client id we have with them to include the new API. Client ids can be shared by anyone with the same VASI number. All of Vets-api uses the same VASI number so if possible, try to use an existing one. If a new client id is required, follow these steps: install pem-jwk toolIn terminal, execute openssl genrsa -out private.pem 2048openssl rsa -in private.pem -out public.pem -outform PEM -puboutcat public.pem | pem-jwk &gt; public.jwkUse the generated public.jwk file as your Oauth submission to Lighthouse and save the private.pem file for a later step.client_id will be provided upon submission of the lighthouse onboarding form Add a new settings to config/settings.yml in the vets-api. See section Adding Local Settingsfind the config valuesselect the the desired service from the &quot;Select an API&quot; dropdown menu and click &quot;Update page&quot;the aud_claim_url can be found in the &quot;aud&quot; section of the pagethe access_token_url can be found in the &quot;Retrieving an access token&quot; section. It will be the url in the example POST.the api_scopes can be found in the &quot;scopes&quot; section. Only include the ones you need.to get the other values, use the left nav bar to navigate to the documentation for the correct API. For example the Appeals Status API.Near the top of the page, there should be a link to that APIs openapi.json. Click this link to reveal the json in a new tab. The api_url should be in that page as url. Add new AWS RSA key if new client id was generated as well as any other sensitive information that can't be publicly shared. See section AWSThe formatting of the private RSA key is very particular. the key string should have a new line for every 64 characters. Reference formatting of another RSA key in AWS to see an example. Add new variables Manifests repo and Devops repo as instructed in See section DevopsOnce sandbox is working, you must request production access separately though the same onboarding link above. ","version":"Next","tagName":"h3"},{"title":"Error Handling","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling","content":"","keywords":"","version":"Next"},{"title":"The request lifecycle​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#the-request-lifecycle","content":" The vets-api mobile endpoints generally follow the following pattern:  request is received and routed to the controllerthe controller verifies the validity of the user's bearer tokenthe controller runs any other necessary validations, such as confirming the user has access to the content and that any provided parameters are validthe controller then uses service objects to communicate with other servers in the vets-api ecosystem. those service objects may perform their own validations. These will generally be the same as the ones performed in the controller but may occasionally differ.the external service processes that request and responds or times outthe service object processes the response.when the request fails (status is &gt;= 400), the service objects will raise corresponding errors. These errors are rescued by ExceptionHandling and responds with error details to the client. (Note: this is only true if the service configuration uses the Faraday plug faraday.use Faraday::Response::RaiseError. Most services that make requests for data do use this plug.)when the request is successful (status is &lt; 400), any additional business logic will be applied by the service object. This often includes parsing and converting the data to models.the data is then returned to the controller.the controller then performs any additional modifications that are necessary, serializes the data, and returns it to the client with an appropriate status code.  ","version":"Next","tagName":"h2"},{"title":"Outbound Request Service Objects​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#outbound-request-service-objects","content":" The mobile controllers use a variety of service objects to communicate with upstream servers. These are typically written by other teams and are not under the control of the mobile team. The service objects provide a common interface for establishing connections using Faraday (a ruby library for making network requests) and making requests to external services. They consist of two parts:  the configuration. The configuration must be a subclass of Common::Client::Configuration::Base. The configuration is primarily responsible for setting values necessary for connecting to the upstream server–such as base URLs and api keys–and for establishing that connection via the connection method. In addition to determining which URLs, headers, and options to use when connecting to the upstream server, the connection method also adds a variety of middleware plugs that determine how requests and responses are processed by Faraday. Some of these plugs are very simple built-ins, such as the json plug used to process json responses and the snakecase plug used to specify that the response keys will be in snakecase format. Other plugs are custom-written within the vets-api. These plugs are all types of Faraday middleware that have the ability to modify the outbound request or process the inbound response. These plugs can raise errors. For example, if the configuration specifies a json plug but the response is not parsable json, it will raise an error. the service itself. These are subclasses of Common::Client::Base. The service object is responsible for using the connection created by the configuration to make upstream requests and for processing the responses. These service objects sometimes include user access checks and request data validity checks, which can raise errors. They often process the response by modifying status codes and by adapting data to models. They also provide some default error handling in the request method that rescues some common errors that can arise during the request and converts them into errors that are defined within the vets-api.  ","version":"Next","tagName":"h2"},{"title":"Upstream Servers​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#upstream-servers","content":" Nearly all data returned from the vets-api comes from external servers within the VA digital ecosystem. Some of the endpoints we consume are not well documented. As a result, it's sometimes impossible to fully know what response statuses and bodies to expect from these servers. We are usually able to find out most of this information by talking to the product owners of these APIs or by testing the API ourselves, but we don't always receive an exhaustive list and often aren't told what all of the errors mean. These services can also change without our knowledge because they are still under active development. As a result, these external services can be a bit of a black box. Thankfully, this is improving with newer APIs, such as those provided by lighthouse, which are now being documented as part of the development process.  ","version":"Next","tagName":"h2"},{"title":"Error Classes​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#error-classes","content":" All errors in the vets-api will ultimately be subclasses of Common::Exceptions::BaseError, either because they were explicitly raised within the vets-api or because they were converted to known error classes within the mobile app module, the service object, or Exception Handling. This is useful for providing a common interface for errors, which allows error classes to define their own response statuses, messages, and logging behavior.  The error classes work in coordination with values set in config/locales/exceptions.en.yml. The error classes implement an i18n_key method that matches an entry in that yaml file that can include additional error details, such as messages and statuses, that can be used by ExceptionHandling.  ","version":"Next","tagName":"h2"},{"title":"Exception Handling​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#exception-handling","content":" All controllers in the vets-api mobile backend include the ExceptionHandling module, which catches any errors that arise during a request, remaps any unknown errors to known errors, then renders the error to the user with the status code and details defined in the error class. Any errors that are not otherwise explicitly handled will be mapped to Common::Exceptions::InternalServerError and will return 500 to the client.  ","version":"Next","tagName":"h2"},{"title":"Coupling between Service Objects, Exception Handling, and Error Classes​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#coupling-between-service-objects-exception-handling-and-error-classes","content":" The service objects need ExceptionHandling to handle its errors. ExceptionHandling needs errors to be subclasses of BaseError because it relies on methods in BaseError to respond to the client with the appropriate information. These three components are coupled.  This coupling provides a great deal of value. It prevents us from recreating the error handling wheel with every new endpoint. Without it, each controller would have to have explicit handling for each potential error case. But it also comes at a cost. That cost is that it's difficult to know exactly which errors the controller can return because to know that you have to know which errors the upstream can return, which errors the service object can produce, and how those errors can be modified by the service object, error class, and ExceptionHandling.  It also makes it difficult to fully test service object code in isolation, which makes it important to write thorough integration tests because ExceptionHandling can call methods on error classes that might not be called in service object unit tests. Bugs can exist in service objects and even within error classes that will not be revealed without integration testing with the ExceptionHandling class.  ","version":"Next","tagName":"h2"},{"title":"Wrapup​","type":1,"pageTitle":"Error Handling","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ErrorHandling#wrapup","content":" Errors can arise during any portion of the request lifestyle. Errors that arise in the mobile portion of the vets-api are generally predictable. For example, we know that failure to authenticate the user will result in a 401, failure to authorize the user to access the resource will result in a 403, and a syntax error within the code itself will result in a 500.  Once we leave the mobile backend, the possible errors become more difficult fully know due code complexity and coupling between our service objects, errors, and ExceptionHandling. Code outside of the mobile backend can also be changed without our knowledge, potentially removing, changing, or introducing errors.  Once we make a request to an external service, the errors become even less predictable, due to a combination of poor documentation, poor interteam communication, and ongoing changes being made to the upstream code.  As a result, errors may at times be possible that aren't listed in our api documentation. But much as the vets-api has ExceptionHandling to ensure that all errors encountered in the vets-api will be handled gracefully even if we don't know anything about that error, the mobile app has built-in error handling for common cases like 401 and 403 but also handles any unknown 400+ status codes so there should be no inherent problem with an occasional unexpected error.  While it may not be possible to know every possible error that can occur, what is more important is that we document any errors that change behavior in the mobile app so the mobile app can be coded to handle those cases appropriately. For example, a few endpoints can return 207 with detailed messages when only partial data was received. This must be communicated to the user, so coordination is needed between frontend, backend, and product to ensure a smooth user experience. Given the inherent unknowns of the VA digital services ecosystem, fault tolerance is a critical feature of the VA mobile app. ","version":"Next","tagName":"h2"},{"title":"JSON API","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/JSONAPI","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"JSON API","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/JSONAPI#overview","content":" With a few exceptions, all Mobile API endpoints adhere to the JSON API specification which can be found at https://jsonapi.org/.  ","version":"Next","tagName":"h2"},{"title":"Exceptions​","type":1,"pageTitle":"JSON API","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/JSONAPI#exceptions","content":" There are two types of exceptions for endpoints that deviate from the JSON API spec:  Some older endpoints unintentionally deviates from the JSON API spec and cannot be fixed without versioning the endpoint.All endpoints that return a file are intentionally not following the JSON API spec as there are a number of disadvantages to nesting a file in a JSON object.  These exceptions can be found by going through the request specs that have the option skip_json_api_validation: true. ","version":"Next","tagName":"h2"},{"title":"Feature Flagging","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging","content":"","keywords":"","version":"Next"},{"title":"Flipper​","type":1,"pageTitle":"Feature Flagging","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging#flipper","content":" We use Flipper to manage feature flags. View instructions for use and best practices.  ","version":"Next","tagName":"h2"},{"title":"Access​","type":1,"pageTitle":"Feature Flagging","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging#access","content":" ","version":"Next","tagName":"h2"},{"title":"Staging​","type":1,"pageTitle":"Feature Flagging","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging#staging","content":" In order to turn features on and off in staging and in review instances, you will first need to create an id.me account. You can do this by going to staging, clicking &quot;sign in&quot;, choosing to sign in with id.me, then choosing to sign in using the google integration. Enter your Ad Hoc email address. It will then take you through an identity verification process. This is done on the id.me sandbox environment. DO NOT PROVIDE YOUR REAL SSN OR OTHER SENSITIVE DATA. IT WILL ACCEPT ANY PERSONAL IDENTIFYING INFORMATION.  Once this is done, you will need to add your Ad Hoc email to the flipper section in config/settings.yml. You will have flipper access once this file has been deployed to staging.  ","version":"Next","tagName":"h3"},{"title":"Production​","type":1,"pageTitle":"Feature Flagging","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging#production","content":" In order to change feature flags in production, you will need a real id.me account. Because you're only allowed to have one id.me account, it is strongly recommended that you sign up using your personal email address. You can create an account at id.me. You can then add other email addresses to your id.me profile. If you've already created a sandbox id.me account with your AdHoc email address, you may experience difficulty linking your AdHoc address to your production account.  You will then need to add your production id.me email address to config/settings.yml. You will have flipper access once this file has been deployed to production.  ","version":"Next","tagName":"h3"},{"title":"Toggling Feature Flags​","type":1,"pageTitle":"Feature Flagging","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/FeatureFlagging#toggling-feature-flags","content":" Flipper URLS (note the 'api' in the url)  staging: staging-api.va.gov/flipper/featuresproduction: api.va.gov/flipper/features  From there, you can select individual features and turn them on and off for all users, individual users, or even a percentage of random users. ","version":"Next","tagName":"h2"},{"title":"Models","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ModelsAndSerializers","content":"","keywords":"","version":"Next"},{"title":"Serializers​","type":1,"pageTitle":"Models","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ModelsAndSerializers#serializers","content":" Mobile serializers use JSONAPI::Serializer and they do two things:  ensure that our responses are formatted as valid JSONAPIdetermine which attributes from the model are included in the response  ","version":"Next","tagName":"h2"},{"title":"Best Practice​","type":1,"pageTitle":"Models","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ModelsAndSerializers#best-practice","content":" all data should be converted to models in order to use type validationall nested attributes should be fully detailed within the data model in order to whitelist and validate all attributes that will be serialized. In other words, if a model has an attribute that is a hash or an array of hashes, all attributes in the hash should also be validated with Dry::Types. For example, a hash could look like:   attribute :debt_history do attribute :date, Types::Date attribute :letter_code, Types::String attribute :description, Types::String end   an array of hashes could look like:   attribute :debt_history, Types::Array do attribute :date, Types::Date attribute :letter_code, Types::String attribute :description, Types::String end   all data should be serialized to ensure JSONAPI compliance ","version":"Next","tagName":"h2"},{"title":"Parallel Calls","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ParallelCalls","content":"Parallel Calls The mobile API often needs to make requests to external services to fetch data to return to the client. In some cases, a single request from the client can require data from multiple external services. This can cause those requests to be slow and creates a bad user experience. To mitigate the issue, we use the Parallel Gem, which provides a simple interface for executing functions in parallel using threads. A simple use pattern is: Find the common location where code branches off into the multiple network calls.Wrap the methods that initiate those branches in lambdas.Pass an array of those lambdas to the gem, telling it how many threads to use and specifying that it should execute the call method on each lambda to execute it.Capture return values if needed.It is possible to rescue errors either within lambdas or around the entire parallelization code block. This allows us the ability to capture errors and either log them or provide helpful information back to the client. If we do not rescue, errors will stop execution and be handled as they normally would.","keywords":"","version":"Next"},{"title":"OpenAPI Documentation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation","content":"","keywords":"","version":"Next"},{"title":"OpenAPI Creation and Artifact Generation​","type":1,"pageTitle":"OpenAPI Documentation","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation#openapi-creation-and-artifact-generation","content":" We document our API endpoints using OpenAPI3. The documentation is recorded in a group of yaml files, which are converted to HTML and JSON via the modules/mobile/docs/generate_static_docs.sh script. Developers must run that script each time they change the yaml to ensure that our documentation is up to date.  ","version":"Next","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"OpenAPI Documentation","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation#setup","content":" Developers will need to install redocly in order to run the generate_static_docs script.  ","version":"Next","tagName":"h2"},{"title":"Using OpenAPI in RSpec​","type":1,"pageTitle":"OpenAPI Documentation","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation#using-openapi-in-rspec","content":" The backend team uses the committee-rails gem to tie our documentation and specs together. This gem should be used in request specs to validate requests and responses against the JSON file generated by the generate_static_docs script. To add it to a request spec, simply call the method assert_schema_conform(expected_status). This will use the uri path from the request object and the expected status (e.g., 200) to look up which schema the response should match and validate the response.body against it.  ","version":"Next","tagName":"h2"},{"title":"Limitations​","type":1,"pageTitle":"OpenAPI Documentation","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation#limitations","content":" Our schema tests are only as good as the data we're testing against. These tests run against VCR cassettes we've either recorded or been given. These cassettes will not necessarily cover all cases. It's also possible for cassettes to become out of date, which can cause drift between our specs/OpenAPI documentation and reality.  Schema tests are also only as good as the schema they're testing against. Schema should be written as strictly as possible. That means indicating when properties are required or nullable, when additional properties are not permitted in objects, indicating string formats, and specifying which strings are possible via the enum type. Greater specificity results in better documentation.  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"OpenAPI Documentation","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation#best-practices","content":" use models and serializers to lock down the schemause all VCR cassettes available to ensure broad test coverageonly validate the schema once per unique case. In other words, if you need to run several tests with the same data setup and you expect the same response each time, there's no need to validate the schema each time.use nullable: true when you know an attribute may be null. This should also be reflected in the model.use additionalProperties: false on all objects. Additional properties should be prevented by the model and serializer. ","version":"Next","tagName":"h2"},{"title":"Record Filtering","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Record Filtering","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering#overview","content":" The vets-api has a mechanism built into the Common::Collection class that's intended to be used to filter lists of records. However, there are a number of problems with this, including the fact that many of the services we use to fetch indexes do not return data in collections and instead just use arrays. Additionally, the filtering mechanism requires changes to the filtered model to enable filtering and to define the type of filtering allowed. There are also some limits to the collection's filtering logic that have prevented this library from meeting our requirements. And since both Common::Collection and many of the models we use exist outside of the mobile module, they're not easy for us to change.  To address these limitations, we've created our own filtering library that borrows the same param syntax from Common::Collection but removes the requirement to make changes to the model. This will allow us to easily apply filters to all of our indexes and make changes to the filtering logic as needed without the risk of impacting other teams.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Record Filtering","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Backend​","type":1,"pageTitle":"Record Filtering","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering#backend","content":" Adding filtering is a per-endpoint action. After fetching the records, call:records, errors = ListFilter.matches(records, params[:filter])  The records object passed to ListFilter must be an array of either Common::Resource or Common::Base objects. The filter argument must be a controller params object. ListFilter will always return two objects: the matching records and any errors encountered. See error handling for details.  Any caching should be done on the unfiltered records, not on the results of the filtering. Any pagination should be done on the results of the filtering.  ","version":"Next","tagName":"h3"},{"title":"Frontend​","type":1,"pageTitle":"Record Filtering","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering#frontend","content":" The front end must provide filters as query params in the format filter[model_attribute][operation]=value. For example, if your model implements an attribute called &quot;status&quot; and you want to receive only records where the status equals &quot;complete&quot;, you would add the param filter[status][eq]=complete.  At this time, our filtering system only supports two operations: eq and not_eq. Attribute/operation pairs can only be used once. In other words, you can't request filter[status][eq]=complete and filter[status][eq]=pending. This is a limitation in how params are processed by the rails app. We intend to add &quot;one of these values&quot; functionality as well as other operations later.  Filters are additive. In other words, if the request contains filter[status][eq]=complete and filter[telehealth][not_eq]=true, you will receive only records where the status is complete and telehealth is not true.  As discussed below, error behavior can be defined on a per-endpoint or even per-error-case basis.  ","version":"Next","tagName":"h3"},{"title":"Error Handling​","type":1,"pageTitle":"Record Filtering","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/RecordFiltering#error-handling","content":" Any errors encountered during the filter process, either due to invalid filters or other causes, will cancel the filtering process. The filter library will return all records as well as the error encountered. What we do with that information can be determined on a per-endpoint basis. It is up to the controller to determine whether to re-raise the error or pass it back to the client in the metadata.  This approach was chosen in order to keep our endpoints as stable as possible until we determine that filtering is reliable and error-free. As we develop greater confidence in the filtering and our requirements become clearer, we may later decide to always allow the error to be raised. ","version":"Next","tagName":"h2"},{"title":"Custom Error Responses","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/CustomErrorResponses","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Custom Error Responses","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/CustomErrorResponses#how-it-works","content":"   When emergency custom error content is needed the backend will create a feature flag on the necessary endpoints in order to return a hardcoded response to the the frontend. The frontend will use the status code to know when the error content provided in the response should be combined with the existing error component. If you want to use this feature reach out to the Mobile API team in #va-mobile-app in Ad Hoc or OCTO slack.  Characteristics of the response:  title: custom string provided by content to fill the bold title portion of the frontend error componentbody: custom string provided by content to fill the body of the error component. The frontend is prepared to respect \\\\n for new lines in this string, as well as apostrophes.status: will always be 418source: upstream system associated with the endpointtelephone: sting providing a custom phone numberrefreshable: boolean telling the frontend to show or hide the refresh button ","version":"Next","tagName":"h2"},{"title":"SIS","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/sis","content":"","keywords":"","version":"Next"},{"title":"Provider Details​","type":1,"pageTitle":"SIS","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/sis#provider-details","content":" DSLogon - Oldest authentication method. Connected to DoD. Vets who already have this login info can use it to access services on VA.gov and Mobile that don't require MFA.  MHV - Allows users to use their My HealtheVet credentials to utilize other services such as va.gov and our mobile app. Similar to DSLogon users, authenticating this way can't access services that require users to have MFA.  Id.me - Owned by a 3rd party company, paid for by the VA. Requires identity verification and MFA (via OTPs).  Login.gov - Newest authentication method. Recently built and owned by the VA. Requires identity verification and MFA (via many different options). Long term goal is to move everyone to login.gov so all users will be verified and the VA can stop paying for id.me  ","version":"Next","tagName":"h2"},{"title":"Test Users​","type":1,"pageTitle":"SIS","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/sis#test-users","content":" DSLogon - Currently we only have one DSL test user, Arfan Russel. The login password in for can be found in the VA Mobile 1Password under &quot;DSlogon staging (claims)&quot;  MHV - Users can be found here: MHV test users. Premium users are the only ones who work with the mobile app.  Id.me - Can be found here: MVI staging test users or can be found in the VA.gov 1Password vault under vets.gov.user+NNN@gmail.com where NNN is a number 1 to 3 digits long.  Login.gov - Located in the VA.gov 1Password vault. Can be found by searching &quot;login.gov&quot;. ","version":"Next","tagName":"h2"},{"title":"Services","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Services","content":"","keywords":"","version":"Next"},{"title":"Upstream Service Map​","type":1,"pageTitle":"Services","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Services#upstream-service-map","content":"   ","version":"Next","tagName":"h2"},{"title":"Service Contacts​","type":1,"pageTitle":"Services","url":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/Services#service-contacts","content":" Service\tSlack Channel\tContactsCaseflow\t#caseflow-support-team\tn/a CDC\tn/a\tiisinfo@cdc.gov Check-in\t#check-in-experience\tn/a DSLogon\t#vsp-identity\tn/a EVSS\t#evss-prod\tn/a ID.ME\t#vsp-identity\tn/a Lighthouse\t#lighthouse-infrastructure\tn/a MHV\t#mhv-secure-messaging, #mhv-medical-records, #vsp-identity\tn/a SIS\t#vsp-identity\tn/a VAOS\t#appointments-team, #vaos-engineering\tn/a VA Profile\t#va-profile\tn/a VEText\t#va-mobile-app-push-notifications\tn/a ","version":"Next","tagName":"h2"},{"title":"Maintenance Windows","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/MaintenanceWindows","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Maintenance Windows","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/MaintenanceWindows#overview","content":" Maintenance windows are periods of time during which specific vets-api functionality are expected to be down for maintenance. The mobile app requests this information at the beginning of new sessions and stores the data locally. If the user navigates to a page that relies on the service during the window, they will be shown a banner informing them that the data is temporarily unavailable and the app will not attempt to fetch the data.  ","version":"Next","tagName":"h2"},{"title":"Back-end​","type":1,"pageTitle":"Maintenance Windows","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/MaintenanceWindows#back-end","content":" Unlike most of the data used in the vets-api engine, MaintenanceWindows come from the vets-api database and not from upstream servers. They contain the external service name, start time, and end time. Maintenance windows are added to PagerDuty by other teams, and a vets-api sidekiq job polls PagerDuty and populates MaintenanceWindow database records with the response. There is an allow list of maintenance windows on GitHub that the sidekiq job uses to connect to PagerDuty and populate the maintenance windows. The mobile app requests maintenance windows via the maintenance windows controller, which searches the database for MaintenanceWindow records that end in the future and creates a ServiceGraph object to process those windows into a format that is more easily used by the front-end.  The ServiceGraph is an abstraction that accepts a list of arguments that define a hierarchy that matches upstream services to downstream features and returns a list of upcoming Mobile::MaintenanceWindow records that have upcoming outages. Note that Mobile::MaintenanceWindows are different than MaintenanceWindows but contain the same basic data with service names that are specific to mobile app features. This allows the mobile team to define its own mapping of services to features. Each argument is an array of two symbols in which the first element is an upstream service or intermediate service and the second key is either an intermediate service or the feature name that would be received by the mobile app. Intermediate services are not included in the results, only terminal nodes (i.e., second items in the array that do not match the first items of any subsequent arrays).  An example ServiceGraph instance could be something like:  Mobile::V0::ServiceGraph.new( %i[bgs evss], %i[vet360 military_service_history], %i[evss claims], %i[evss direct_deposit_benefits] )   This gets processed into a hierarchy like:  { bgs: [claims, direct_deposit_benefits], evss: [claims, direct_deposit_benefits], vet360: [military_service_history] }   So if there's an upcoming maintenance window for either bgs or evss, the ServiceGraph would return an array of Mobile::MaintenanceWindow objects including start and end times for claims and direct_deposit_benefits. If there's an upcoming maintenance window for vet360, it would return mobile maintenance window data for military_service_history. And if all three services had upcoming maintenance windows, it would return data for claims, direct_deposit_benefits, and military_service_history.  ","version":"Next","tagName":"h2"},{"title":"Front-end​","type":1,"pageTitle":"Maintenance Windows","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/MaintenanceWindows#front-end","content":" See front-end documentation. It is important to note that coordination with front-end will be required for any changes to the ServiceGraph hierarchy in the maintenance windows controller because effort is required on the front-end to add handling for new maintenance windows within the mobile app. ","version":"Next","tagName":"h2"},{"title":"Schema Contract Testing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting","content":"","keywords":"","version":"Next"},{"title":"Background​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#background","content":" We developed a schema contract testing libary that alerts us to schema changes in responses from services upstream of the vets-api.  ","version":"Next","tagName":"h2"},{"title":"What is a contract?​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#what-is-a-contract","content":" Within the context of this library, a contract is a means of ensuring that interactions between the vets-api and external services that it consumes remain unchanged over time. They're defined in json files within the vets-api that define the shape of the data that is expected to be received from the external service. The contract specifies which data fields are expected and the data types of the values.  Contracts will typically exist per endpoint or resource that is being consumed. For example, the appointments index and immunizations index will require different contracts because the underlying resources are different. Whereas the appointments index and appointment show endpoints return the same resource but will require different contracts because the index will expect an array of appointments while the show will expect a single appointment. However, it is possible for contracts to be applied to multiple endpoints if their format is expected to be identical.  ","version":"Next","tagName":"h2"},{"title":"How does contract testing work?​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#how-does-contract-testing-work","content":" When the vets-api receives information from upstream, we can pass the unaltered response to the testing library. If the response was successful, the library checks the database to see if a contract test record for that contract has been created yet for the current day. If no record exists, it creates one with the response body and initiates a background job for validating the response against the schema. When the background job is executed, it looks up the newly created record and compares the saved response against the contract. If any errors are found, they are raised with a detailed error message to alert developers to investigate. The database record is then updated to include the error details and status of the comparison (i.e., success or schema errors found) to provide a persistent papertrail for debugging.  The contract testing library is designed to only run once per day per contract in order to limit the impact on servers.  ","version":"Next","tagName":"h2"},{"title":"Feature flagging​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#feature-flagging","content":" Schema contract testing is feature flagged per contract. This feature is only expected to ever be turned on in staging but could be turned on in production if we ever have reason to think production responses differ from staging.  ","version":"Next","tagName":"h2"},{"title":"How to add a new contract​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#how-to-add-a-new-contract","content":" add a contract json file. It will require a unique contract name. For example, the appointments index method has a contract called appointments_index.json. This name is used to bind the contract and feature flag together. The file can be placed anywhere in the vets-api but best practice is to put it in the module that uses it.add a new entry to the schema_contract section of config/settings.yml that speficies the location of the contract json file.add a new feature flag. The feature flag name must be in the format of schema_contract_#{unique_contract_name}.in the vets-api, pass the unaltered response from upstream to the validation initator: SchemaContract::ValidationInitiator.call(user:, response:, contract_name: 'unique_contract_name')  ","version":"Next","tagName":"h2"},{"title":"Limitations​","type":1,"pageTitle":"Schema Contract Testing","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/SchemaContractTesting#limitations","content":" The tests are only as good as the schema provided. It's critical to specify which properties are required or nullable and to use additionalProperties: false within each object within the schema in order to know when properties are added or removed or have suddenly started returning null values. ","version":"Next","tagName":"h2"},{"title":"Push Notifications","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/PushNotifications","content":"","keywords":"","version":"Next"},{"title":"Architectural Overview​","type":1,"pageTitle":"Push Notifications","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/PushNotifications#architectural-overview","content":"   ","version":"Next","tagName":"h2"},{"title":"Getting Your Push In The App​","type":1,"pageTitle":"Push Notifications","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/PushNotifications#getting-your-push-in-the-app","content":" Contact VANotify and VEText to get onboarded to their API and get a push template created. Reach out in slack: #va-notify-public or by emailing oitoctovanotify@va.govGet your push template content approved by the mobile team  ","version":"Next","tagName":"h2"},{"title":"Example push template content​","type":1,"pageTitle":"Push Notifications","url":"/va-mobile-app/docs/Engineering/BackEnd/Features/PushNotifications#example-push-template-content","content":" { &quot;default&quot;: &quot;Appointment Reminder Default&quot;, &quot;APNS&quot;: {&quot;aps&quot;:{&quot;alert&quot;: {&quot;title&quot;:&quot;VA Appointment Reminder&quot;,&quot;body&quot;:&quot;You have an upcoming VA appointment.&quot;}}, &quot;appt&quot;:&quot;%APPOINTMENT%&quot;}, &quot;APNS_SANDBOX&quot;: {&quot;aps&quot;:{&quot;alert&quot;: {&quot;title&quot;:&quot;VA Appointment Reminder&quot;,&quot;body&quot;:&quot;You have an upcoming VA appointment.&quot;}},&quot;appt&quot;:&quot;%APPOINTMENT%&quot;}, &quot;GCM&quot;: {&quot;notification&quot;: {&quot;title&quot;: &quot;VA Appointment Reminder&quot;,&quot;body&quot;:&quot;You have an upcoming VA appointment.&quot;},&quot;data&quot;: {&quot;appt&quot;: &quot;%APPOINTMENT%&quot;}} }   tip The &quot;data&quot; field should include any variable data for the alert title or body, and the necessary metadata from the app to deeplink to the correct location.  Connect your system to VANotify API to trigger push and test pre-app triggering in staging. General VANotify DocsGet access to testflight app from mobile team to test notifications and notification preferences in staging. Testflight &amp; App TesterDo a Prod test if possibleMobile will update store info to acknowledge new notifications if necessaryGo live ","version":"Next","tagName":"h3"},{"title":"Datadog","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/DataDog","content":"","keywords":"","version":"Next"},{"title":"Existing Mobile Dashboards​","type":1,"pageTitle":"Datadog","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/DataDog#existing-mobile-dashboards","content":" Service PageAlertsNew Issue Monitor (see instructions)and Dashboard (Legacy)  If you have issues accessing the dashboard or the VA Datadog site reach out in the VA mobile slack channel  ","version":"Next","tagName":"h2"},{"title":"Creating Alerts​","type":1,"pageTitle":"Datadog","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/DataDog#creating-alerts","content":" Reference existing alerts linked above to define new alerts. To receive alert messages in slack the Datadog slack tool will need to be added to the channel where you want notifications then the channel also needs to be added via the slack integration within Datadog. Once this is complete the channel will be in a dropdown in the 'Notify your team' section shown above. Slack integration docs    Read more about Datadog on the official documentation  ","version":"Next","tagName":"h2"},{"title":"New Issues Monitor​","type":1,"pageTitle":"Datadog","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/DataDog#new-issues-monitor","content":" The new issues monitor alerts us to any new errors (i.e., 400+ response status with stacktraces that have not been seen before) that occur in requests that route through the mobile module. It is configured to send an alert to the mobile-new-issue-alerts slack channel anytime a new issue is seen. Many of the new issues are non-concerning and may not appear to be new at all. Changes in the stacktrace can make DataDog consider an issue &quot;new&quot; even if the same error has occurred before. As a result, we need to investigate each new issue to determine whether it's a problem or not.  The slack posts sent from DataDog to slack link to the new issue alert, which generally does not contain enough information to understand the underlying problem. To find the stacktrace:  Go to VA Mobile new issue monitorExpand the date range if necessaryA list of new issues that were observed during that date range will appear in the Events -&gt; Messages sectionClick on the error. An error detail modal will emerge from the right side of the page and with the detailed error message.Click “View in Error Tracking”. This will navigate to a list of new errors that were observed during a period leading up to the error. This will sometimes pick up other new issues that occurred during that period and may include instances of the error observed by both the mobile-app and vets-api APMs. Sometimes this will be empty and the only path forward is to search logs for the error message Click on the instance of the error. An error detail modal will emerge from the right side of the page Sometimes this modal will correctly attach to the error stack traceOther times, it will not provide any stacktrace. In those cases, you can: Search logs for the error messageClick “Investigate in APM” button ","version":"Next","tagName":"h2"},{"title":"On-Call Procedure","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/OnCallProcedure","content":"","keywords":"","version":"Next"},{"title":"On-Call Rotation​","type":1,"pageTitle":"On-Call Procedure","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/OnCallProcedure#on-call-rotation","content":" Each week a backend engineer will be on-call. Their on-call hours are the same as their business hours and a slack reminder will show up in va-mobile-app-alerts each Monday tagging whoever is on for that week.  ","version":"Next","tagName":"h2"},{"title":"Handling Backend Alerts​","type":1,"pageTitle":"On-Call Procedure","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/OnCallProcedure#handling-backend-alerts","content":" First use tools described above to track down the source of an issue. Services in Datadog can show a good overview of the health of our endpoints. This is also a great starting point to dive deeper into various issues.Logs in Datadog can help you find more data or trace the requests before the error occurred.Datadog's Application Performance Management tool is also configured for vets-api. It breaks down the ruby, database, and upstream calls down so you can determine the source latency. The APM also provides p50 and p99 latency data to let us know how slow the worst 50% and 1% of calls are doing.Lighthouse API Status Page is helpful in finding out if lighthouse errors were expected If you've determined that the source of the issue is an upstream service contact the relevant party.If you believe a forward proxy is down or having trouble connecting to the service. Then contact the Operations team via DSVA Slack's #vfs-platform-support channel. To open a support ticket type /support. This will open a modal window with a form rather than posting a Slack message. For the 'I need help from' field select 'Operations Team'. Then add the details in the 'Summary of request' field. Additionally, if you are unsure of who to contact you can make a support request.Finally if the error is not from the API, a forward proxy connection to an upstream service, or an upstream service itself but rather an issue with infrastructure that we (and VSP/VFS) control then a SNOW ticket should be opened. Only a DSVA team member can do this. Reach out to a stakeholder and have them open a SNOW ticket for you.  ","version":"Next","tagName":"h2"},{"title":"Handling New Issues​","type":1,"pageTitle":"On-Call Procedure","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/OnCallProcedure#handling-new-issues","content":" The on-call engineer is responsible for monitoring the mobile-new-issue-alerts channel, look into each new issue, and determining whether the issue is worth a ticket for further investigation or remediation. The engineer should add a comment to the issue in the channel with either a link to the investigation ticket or an explanation of why it's not worth a ticket. See new issue monitor documentation for more information about new issues.  ","version":"Next","tagName":"h2"},{"title":"Other Slack channels to monitor​","type":1,"pageTitle":"On-Call Procedure","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/OnCallProcedure#other-slack-channels-to-monitor","content":" There are other slack channels that the on-call enginner should pay attention to in case there are updates to maintenance windows and/or other urgent changes. For these channels, the on-call engineer should only need to pay attention to @here and @channel messages.  #vfs-platform-support Slack channel#vfs-change-announcements Slack channel#vfs-all-teams Slack channel ","version":"Next","tagName":"h2"},{"title":"Logs","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Logs","content":"","keywords":"","version":"Next"},{"title":"How to Access and Search Logs​","type":1,"pageTitle":"Logs","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Logs#how-to-access-and-search-logs","content":" Locate the Logs section in the menu on the left, and select search. From this screen, you should be able to find all logs that you may need.  A few things to keep note of:  At the top, DataDog defaults to searching for logs in the past 15 minutes. This may not be a wide enough window for you to find what you want The &quot;Search for&quot; section does not allow you to search something as simple as mobile to find all mobile endpoints. It is best to select the facets you'd like from the menu on the left When selecting options from the fields on the left, clicking the check box unchecks that options, clicking the text of the option itself only selects that optionYou can customize the table columns for the results. Clicking the dropdown arrow next to a column header will show options to replace the column, or insert one to the left or right. Depending on the type of search, it may be helpful to add a column that for @http.url_details.path You will most likely want to select vets-api under the source optionThe options on the left are populated by options DataDog found in the current timeframe. So, if you're looking for logs on an endpoint that is not used often, you may not find it in the options on the left until you change the time frame you're searching for in the top right corner  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Logs","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Logs#example","content":" Let's say we wanted to check for any errors in the past week for the endpoint /mobile/v1/user  In the time select at the top right, change 15 Minutes to Past 7 daysIn the URL Path section, search for /mobile/v1/user and click on the word itself so that all other options are unchecked Click on any specific logs you want to view  There are a lot of options for visualizations that you can play around with that may be helpful to your unique searching.  ","version":"Next","tagName":"h2"},{"title":"Worker Logs​","type":1,"pageTitle":"Logs","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Logs#worker-logs","content":" If you wanted to search for worker logs, you can paste the following in the Search for field:  @application:vets-api-worker @named_tags.class:*ClassNameOfLogger* @message_content:Mobile*   ","version":"Next","tagName":"h3"},{"title":"Further reading​","type":1,"pageTitle":"Logs","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Logs#further-reading","content":" Lighthouse Upstream Dependencies ","version":"Next","tagName":"h2"},{"title":"Sentry","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Sentry","content":"Sentry Sentry is our automated error tracking tool. New exceptions in the API will cause Sentry to send us an email alert. We also audit the existing errors when fixing tech debt or silencing errors that are expected, i.e. unexceptional, such as when sub-systems return validation or not-found errors as 500s rather than 422s or 404s. All our classes are namespaced with a 'Mobile' Ruby module. When auditing errors a custom search of 'Mobile' filters out other vets-api errors. To further refine the search to only 'error', rather than 'warn' or 'info' level errors you can toggle open the search builder bar. And then select 'error' from the list. Once you've found an error, or have been linked to one directly from an alert email, you'll be taken to the error details page. The majority of our errors occur during HTTP responses. Often the errors first present themselves deep within the API framework's base classes. Selecting the 'Full' tab reveals the full call stack and as seen below the true source of the error. Once the location of the error has been determined the next step is determining the cause. Errors from bugs we have introduced (500s in our API responses) will have clear Ruby errors such as 'NoMethodError'. For errors from sub-systems you'll need to check the 'ADDITIONAL DATA' section of the error details page. As seen below this section includes the errors from the upstream service as well as any custom tags added for that specific service. In this case 'ICN' and 'MHV Correlation ID' can be used to cross-reference Loki based logs to get an idea of the full request flow and any user actions that lead up to the error.","keywords":"","version":"Next"},{"title":"Statsd Metrics","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Monitoring/Statsd","content":"Statsd Metrics You can create custom Mobile metrics within Vets API by adding new statsd entries to modules/mobile/config/initializers/statsd.rb. Read more about Statsd. In order for metics to be picked up an entry for the associated endpoint must also be in ansible/deployment/config/revproxy-vagov/vars/nginx_components.yml in the DevOps repo","keywords":"","version":"Next"},{"title":"Testing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/","content":"Testing This guide assumes that you have locally: Configured and turned on the SOCKS proxyChecked out the DevOps repoConfigured your AWS credentials and MFA","keywords":"","version":"Next"},{"title":"API Tokens","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ApiTokens","content":"","keywords":"","version":"Next"},{"title":"Authorization and token types​","type":1,"pageTitle":"API Tokens","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ApiTokens#authorization-and-token-types","content":" The mobile app currently SIS tokens (short for Sign-In Service). SIS is an in-house VA auth service.  SIS tokens are over a thousand characters long.  You have to include an additional header when using SIS tokens: Authentication-Method: SIS  ","version":"Next","tagName":"h2"},{"title":"Fetching API tokens​","type":1,"pageTitle":"API Tokens","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ApiTokens#fetching-api-tokens","content":" We host a web app on heroku for fetching api tokens. You can fetch tokens in two ways:  Manual: Go to the token generator web app and log in with a test user. User credentials are in 1Password. Automated: These requests use basic auth (ask teammates for username and password) and will only work if the test user has previously been logged in via the manual approach and the user's refresh token is still valid. The route for fetching SIS tokens is:  GET https://va-mobile-cutter.herokuapp.com/auth/sis/token/judy.morrison@id.me   ","version":"Next","tagName":"h2"},{"title":"Working on the token app​","type":1,"pageTitle":"API Tokens","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ApiTokens#working-on-the-token-app","content":" View code for the token fetcher app and instructions for development can be found in the README. To work on the app, you will need write access to the repo and admin access to the heroku instance. ","version":"Next","tagName":"h2"},{"title":"Postman","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Postman","content":"","keywords":"","version":"Next"},{"title":"Postman Collection​","type":1,"pageTitle":"Postman","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Postman#postman-collection","content":" In the mobile module for vets-api, there is a postman collection that can be downloaded and used to run commands against the staging instances. In order to use the collection, download the json file.  After installing Postman, go to the collection section of Postman. From there, you can click &quot;import&quot;, and drag the file into the import window.  ","version":"Next","tagName":"h2"},{"title":"Layout​","type":1,"pageTitle":"Postman","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Postman#layout","content":" The top directory Mobile Endpoints contains the settings for authorization. After aquiring a token, click on the directory itself, open the Authorization tab, and paste the token here. Every endpoint within the directory will now use this token for the requests. ","version":"Next","tagName":"h3"},{"title":"Specs","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Specs","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Specs","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Specs#overview","content":" The majority of testing done before deploying code changes is through Rspec tests. These can be found in vets-api at /modules/mobile/specs.  ","version":"Next","tagName":"h2"},{"title":"Debugging Flaky Specs​","type":1,"pageTitle":"Specs","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/Specs#debugging-flaky-specs","content":" Specs will sometimes pass/fail inconsistently due to the complicated testing environment.  To reproduce and debug these type of issues, follow these steps:  Push code branch into a draft PR if it is not already in PR.Go to the code check action that failed and download the Test Results in the artifacts section.There may be multiple xml files, find the one that has the failure.Run ruby modules/mobile/lib/scripts/parse_rspec_xml.rb &lt;PATH TO XML&gt; (this will recreate the exact testing order that caused the failure)Run the command that the script outputs, running the specs to reproduce the error. ","version":"Next","tagName":"h2"},{"title":"Review Instances","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ReviewInstances","content":"","keywords":"","version":"Next"},{"title":"API Calls​","type":1,"pageTitle":"Review Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ReviewInstances#api-calls","content":" ","version":"Next","tagName":"h2"},{"title":"Making Requests​","type":1,"pageTitle":"Review Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ReviewInstances#making-requests","content":" As with the URLs you've been accessing so far, all API requests must go through the SOCKS proxy. You can configure this in your API client (Postman, Insomnia, Paw, etc). The proxy URL is socks5h://127.0.0.1:2001. Requests, as in staging and production, require that you include an 'Authorization' header with a bearer token. An example request using the SOCKS proxy to the user endpoint would look like below.  curl --proxy socks5h://127.0.0.1:2001 --request GET \\ --url http://a8710e1eb08cd469aa43874b25f86278-api.review.vetsgov-internal/mobile/v1/user \\ --header 'Authorization: Bearer EESBp0xiLD6p1g86q4g1' --header 'X-Key-Inflection: camel'   ","version":"Next","tagName":"h3"},{"title":"Console Access​","type":1,"pageTitle":"Review Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ReviewInstances#console-access","content":" You can SSH into the review instance and test code directly in a review instance Rails console. You retrieve the instance name via the Jenkins console output. To get to Jenkins, return to the PR on Github and click 'Show environments' within the 'This branch was successfully deployed' section. Click the 'Deployed' link to the left of the 'View deployment' button. This will open Jenkins. Next, select 'Console Output' from the menu on the left.    Then search for &quot;SSH at&quot;.  07:15:00 [0;32m msg: Review instance available at http://9bbbb1184faf0a6cb1c551390c073923.review.vetsgov-internal/, or via SSH at ip-172-30-18-119.us-gov-west-1.compute.internal[0m   In the example above 'ip-172-30-18-119.us-gov-west-1.compute.internal' is the address for the instance. To open a Rails console SSH in and then run the console Docker command as below.  ssh ip-172-30-18-119.us-gov-west-1.compute.internal cd ~/vets-api; docker-compose -f docker-compose.review.yml exec vets-api bundle exec rails c {&quot;host&quot;:&quot;0fca69c2c0fa&quot;,&quot;application&quot;:&quot;vets-api-server&quot;,&quot;environment&quot;:&quot;production&quot;,&quot;timestamp&quot;:&quot;2021-12-02T16:32:05.979827Z&quot;,&quot;level&quot;:&quot;info&quot;,&quot;level_index&quot;:2,&quot;pid&quot;:632,&quot;thread&quot;:&quot;65000&quot;,&quot;name&quot;:&quot;Rails&quot;,&quot;message&quot;:&quot;Raven 2.13.0 ready to catch errors&quot;} 2021-12-02 16:32:08.420676 W [632:65000] SemanticLogger::Appenders -- Ignoring attempt to add a second console appender: SemanticLogger::Appender::File since it would result in duplicate console output. Loading production environment (Rails 6.1.4.1) irb(main):001:0&gt;   To generate a user session, see section User Token below then follow User Sign-in instructions.  ","version":"Next","tagName":"h2"},{"title":"User Token​","type":1,"pageTitle":"Review Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/ReviewInstances#user-token","content":" Currently, there are two authentication options, IAM and SIS. IAM authentication isn't working for RIs or staging right now for unknown reasons that may not be fixed because IAM is being deprecated for SIS, which is why the instructions in the next section (User Sessions) don't work right now on RIs.  We lack the ability to log in via SIS on RIs due to limitations the SIS team is working on. We expect this to be fixed at some point, but in the meantime it means we have to use staging to help us spoof the sign-in process with the instructions below:  Open a browser and start the authorization process for your review instance (remember your -api): http://dc02d94d6648a008950cc9c84056a860-api.review.vetsgov-internal/v0/sign_in/authorize?type=idme&amp;code_challenge_method=S256&amp;acr=loa3&amp;client_id=mobile&amp;code_challenge=1BUpxy37SoIPmKw96wbd6MDcvayOYm3ptT-zbe6L_zM=Open network tab on browser Inspector then complete sign in. After sign in, you will be redirected to staging and there will be a failed callback request in the Inspector network tab.With your network tab still open, replace https://staging-api.va.gov in your browswer url bar with your review instance (remember your -api) and go to that urlIn the network tab, you should see another request to /callback. In the request headers, there will be a location with a value starting with vamobile: that will contain a code that can be used to exchange tokens. The code should look something like 7ca6321-ca3e-4b51-8a4f-4b8ecf2f1597To get a token with that code, ensure that your socks proxy is running and send the following Curl using your review instance and code:  curl --proxy socks5h://127.0.0.1:2001 -X POST http://dbded860eb589f4ccfef2b1470e8472d-api.review.vetsgov-internal/v0/sign_in/token -H 'Content-Type: application/json' -d '{&quot;grant_type&quot;: &quot;authorization_code&quot;, &quot;code_verifier&quot;: &quot;5787d673fb784c90f0e309883241803d&quot;, &quot;code&quot;: &quot;69a8cdea-6251-413f-8773-0ff7c5c82877&quot;}'   Open network tab on browser Inspector then complete sign inAfter sign in, you should notice a failed request that looks similar to:  https://staging-api.va.gov/idHlwZSI6ImlkbWUiLCJjbGllbnRfaWQiOiJ3ZWIiLCJjb2RlX2NoYWxsZW5nZSI6IjFCVXB4eTM3U29JUG1Ldzk2d2JkNk1EY3ZheU9ZbTNwdFQtemJlNkxfek0iLCJjbGllbnRfc3RhdGUiOm51bGwsImNvZGUiOiJmYjNmMTVjOWU0ZDcxNWNkNjEyNjBhMmM1NzYxNzY3YyJ9.EINudwac8qI5JCFPpsYsN7Q7AkyJaQb7jzO78ZJU_GWyPsy4VShRUuYRuxegeBClnjrqkXkfqE78vU5Jjp7aViWLDmDcs2WAJaMwsFRwNEwfQi0g-XUXxWqjVup_rWfDTYWMlxNCipj3xhLN2ACMkFjxoXXlWoob_didzURc1vBEuozkseAAcsA0UOPMexnIjAfFvk11dhR6bC5_Ql14aS22WTE7D-rrngtPCTo_J4Fe-vOgpn-PPV_t5AyiLhzpqDkRlaWTbihwJ_6JpZ8FctkT42Vz4zGk6XTS33BjGv8yJvJYwgEwC2FeVpg-Em49zfkc47Bgl7DEjlDNs624lQ&amp;code=8cb3d1e45111430eafd6e2f155f067e0   Replace https://staging-api.va.gov with your review instance and go to that url in your browser (still having your network tab open)Find a response in the network tab that has redirect to the vamobile: with a code that can be used to exchange tokens. Code should look something like 7ca6321-ca3e-4b51-8a4f-4b8ecf2f1597To get a token with that code, send the following Curl but with your review instance and code:  curl -X POST http://dbded860eb589f4ccfef2b1470e8472d-api.review.vetsgov-internal/v0/sign_in/token -H 'Content-Type: application/json' -d '{&quot;grant_type&quot;: &quot;authorization_code&quot;, &quot;code_verifier&quot;: &quot;5787d673fb784c90f0e309883241803d&quot;, &quot;code&quot;: &quot;69a8cdea-6251-413f-8773-0ff7c5c82877&quot;}'  ","version":"Next","tagName":"h2"},{"title":"Staging Instances","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/StagingInstances","content":"","keywords":"","version":"Next"},{"title":"API Calls​","type":1,"pageTitle":"Staging Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/StagingInstances#api-calls","content":" API calls are made in a similar way to the review instances above. Note that your API client may not connect to staging if going through the SOCKS proxy. The API URL for staging is: staging-api.va.gov/mobile. Staging uses the same API tokens as review instances.  curl --request GET \\ --url https://staging-api.va.gov/mobile/v1/user \\ --header 'Authorization: Bearer 6qdITmRgDqEmsdGyzNj7' \\ --header 'X-Key-Inflection: camel'   ","version":"Next","tagName":"h2"},{"title":"Console Access​","type":1,"pageTitle":"Staging Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/StagingInstances#console-access","content":" To connect to a staging instance, first ensure you have requested access to EKS.  After you have access, you can see the staging pods through the web. After signing in with your account and visiting the link, you will see several things  At the top, you'll see the last time the pods were synced to HEAD. On the right, you'll see a long list of pods running the staging site. Click on one that has vets-api-web in the name.  You'll see &quot;TERMINAL&quot; as a tab. From here, you have access to the console. You can run any commands you would in a local terminal here. For instance, run bundle exec rails c if you'd like to run a rails console.  ","version":"Next","tagName":"h2"},{"title":"User Sign In​","type":1,"pageTitle":"Staging Instances","url":"/va-mobile-app/docs/Engineering/BackEnd/Testing/StagingInstances#user-sign-in","content":" You can then fetch an api token and use that token to create a SIS user session:  irb(main):001:0&gt; token = SignIn::AccessTokenJwtDecoder.new(access_token_jwt: 'crazylongsistoken').perform(with_validation: true) irb(main):001:0&gt; user = User.find(token.user_uuid)   If the user comes back as nil, this means it's not in redis due to inactivity. If that happens, make any API request for the user and try again. The API request will load the user into redis as part of the authentication process. ","version":"Next","tagName":"h3"},{"title":"Build and Release Workflows","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows","content":"","keywords":"","version":"Next"},{"title":"Build Automation Capabilities​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#build-automation-capabilities","content":" The build system currently allows us to build in multiple ways and for multiple configurations.  Staging API or Production APISpecial Release Candidate configurationOptions to upload to a specific lane or Test Flight groupConfigurations to create one-off builds for feature branch testing prior to mergingQueueing capabilities to avoid build collisions on build numbersDependency installation and caching to speed up deliverySlack integration to send useful messages to our DSVA Slack channels to raise errors and to indicate success  ","version":"Next","tagName":"h2"},{"title":"Build Workflows​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#build-workflows","content":" Daily QA buildsRelease Candidate (RC) buildsOn Demand buildsRelease builds and submission to App/Play Stores for approvalScheduled &quot;Go Live&quot; every other Tuesday  ","version":"Next","tagName":"h2"},{"title":"Reusable Build Workflows​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#reusable-build-workflows","content":" All of our build related workflows use one of following two workflows with different parameters passed in, making them the two most important workflows of our build automation.  ","version":"Next","tagName":"h2"},{"title":"Reusable iOS Workflow (build_ios)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#reusable-ios-workflow-build_ios","content":" View on GitHub Actions  Description​  Creates an iOS build using the passed parameters and distributes to TestFlight / App Connect. Starts a Slack thread in the channel and updates the thread with the results of each build job.  Trigger​  Can only be triggered by other workflows.  on: workflow_call:   Parameters​  Inputs​  Parameter\tDescription\tType\tOptions\tDefaultenvironment\tUsed to determine the environment variables to build the app with\tstring\ttest, staging, production\tstaging lane\tSpecifies which fastlane lane to run\tstring\tqa, rc, review, release, on_demand\tqa notes\tRelease notes that will show next to the version in TestFlight. Fastlane will default to &quot;New QA version for {{DATE_TIME}}&quot; if nothing is passed\tstring ref\tBranch or tag that we want to build from. Defaults to the branch/tag that triggered\tstring slack_thread_ts\tTimestamp of the Slack thread where build related messages should be sent. Gets assigned to the SLACK_THREAD_TS environment variable that Fastlane uses.\tstring tf_group\tTestFlight group to distribute to. Fastlane defaults to &quot;Development Team&quot; if nothing is passed\tstring version\tVersion number to use for production release. Passing &quot;qa&quot; here will auto increment upon the latest version in the app stores\tstring qa    ","version":"Next","tagName":"h3"},{"title":"Reusable Android Workflow (build_android)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#reusable-android-workflow-build_android","content":" View on GitHub Actions  Description​  Creates an iOS build using the passed parameters and distributes to TestFlight / App Connect. Starts a Slack thread in the channel and updates the thread with the results of each build job.  Trigger​  Can only be triggered by other workflows.  on: workflow_call:   Parameters​  Inputs​  Parameter\tDescription\tType\tOptions\tDefaultenvironment\tUsed to determine the environment variables to build the app with\tstring\ttest, staging, production\tstaging lane\tSpecifies which fastlane lane to run\tstring\tqa, rc, review, release, on_demand\tqa notes\tRelease notes that will show next to the version in TestFlight. Fastlane will default to &quot;New QA version for {{DATE_TIME}}&quot; if nothing is passed\tstring ref\tBranch or tag that we want to build from. Defaults to the branch/tag that triggered\tstring slack_thread_ts\tTimestamp of the Slack thread where build related messages should be sent. Gets assigned to the SLACK_THREAD_TS environment variable that Fastlane uses.\tstring ps_track\tGoogle Play Console track to distribute to. Fastlane defaults to &quot;Development Team&quot; if nothing is passed\tstring version\tVersion number to use for production release. Passing &quot;qa&quot; here will auto increment upon the latest version in the app stores\tstring qa    ","version":"Next","tagName":"h3"},{"title":"Build Workflows​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#build-workflows-1","content":" These workflows utilize the reusable workflows above with specified parameters. Some are triggered by a tag or on a schedule.  ","version":"Next","tagName":"h2"},{"title":"Daily QA Build (qa_build)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#daily-qa-build-qa_build","content":" View on GitHub Actions  Description​  This workflow runs every night to create and upload the QA version of the app configured for the staging environment for both Android and iOS. It uses the build_ios and build_android workflows with their default parameters.  Creates a Slack thread in the channel and updates the thread with the results of each build job.  Triggers​  Runs every Weekday at 0400 UTC from the develop branch  on: schedule: - cron: '0 4 * * 1,2,3,4,5'     ","version":"Next","tagName":"h3"},{"title":"On Demand Build (on_demand_build)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#on-demand-build-on_demand_build","content":" View on GitHub Actions  Description​  Builds versions for both Android and iOS using the specified environment and branch and iOS and makes them available via TestFlight and Firebase App Distribution.  Creates a Slack thread in the channel and updates the thread with the results of each build job.  Triggers​  Manually via the GitHub Actions UI  on: workflow_dispatch:   Parameters​  Inputs​  Parameter\tDescription\tType\tOptions\tDefault\tRequiredenvironment\tUsed to determine the environment variables to build the app with\tstring\ttest, staging, production\tstaging\tYes notes\tThe text you want to appear in the TestFlight and Firebase App Tester description\tstring Yes    ","version":"Next","tagName":"h3"},{"title":"Release Candidate Build (release_candidate_build)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#release-candidate-build-release_candidate_build","content":" View on GitHub Actions  Description​  This workflow runs every time a tag with RC-vint.int.int pattern is pushed to the origin. It builds release candidates pointed at staging for our QA team to test using the build_ios and build_android workflows. Those jobs use the branch/tag that triggered the workflow, in this case RC-vint.int.int.  Creates a Slack thread in the channel and updates the thread with the results of each build job.  Triggers​  Tags matching the regular expression /^RC-v.d+.d+.d+$/. Our release_branch.sh script creates this tag at the end of every sprint.  on: push: tags: - 'v[0-9]+.[0-9]+.[0-9]+'     ","version":"Next","tagName":"h3"},{"title":"Release Build (release_build)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#release-build-release_build","content":" View on GitHub Actions  Description​  This workflow runs every time a tag with vint.int.int pattern is pushed to the origin. It builds production versions for both Android and iOS and submits them to the app stores for review.  Creates a Slack thread in the channel and updates the thread with the results of each build job.  Triggers​  Tags matching the regular expression /^vd+.d+.d+/. Our release_branch.sh script creates this tag at the end of every sprint.  on: push: tags: - 'v[0-9]+.[0-9]+.[0-9]+'     ","version":"Next","tagName":"h3"},{"title":"Go Live (go_live)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#go-live-go_live","content":" View on GitHub Actions  Description​  Job runs on release day to send approved versions to the stores  Triggers​  cron: '0 14 * * 2'   Runs every Tuesday at 1400 UTC on only the main branch  ","version":"Next","tagName":"h3"},{"title":"Release Workflows​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#release-workflows","content":" These workflows are related to are release process which occurs every 2 weeks. Check the Release Process for a high-level overview.  ","version":"Next","tagName":"h2"},{"title":"New Release Branch (new_release_branch)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#new-release-branch-new_release_branch","content":" View on GitHub Actions  Description​  Runs our release_branch.sh script, which checks to see if we are at the beginning of a new sprint, and if so, cuts a new release/vint.int.int branch from the develop branch and tags it with RC-vint.int.int. The command in the script also ends up triggering the release_branch_issue and release_candidate_build workflows by tagging the branch with RC-vint.int.int and c.  Trigger​  Every Wednesday at 06:00 UTC, 2:00AM ET, 11:00PM (Tues) PT or manually via GitHub Actions UI.  on: workflow_dispatch: schedule: - cron: '00 6 * * 3'     ","version":"Next","tagName":"h3"},{"title":"New Release Issue (release_branch_issue)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#new-release-issue-release_branch_issue","content":" View on GitHub Actions  Description​  This automated workflow creates the release ticket for every release.  This ticket runs any time a release branch is created that matches our strategy of release/^v[0-9]+\\.[0-9]+\\.[0-9]+$ and does the following:  Scrapes the version from the GitHub referenceCalculates the QA, Product, and VA Due Dates for the ticketCalculates the Release Date for the specified versionCreates a table of all the Sev-1 and Sev-2 bugs that are open in the repositoryCreates an issue from the release_ticket GitHub Issue TemplateCreates a TestRail Run and Milestone for QA regression testing and trackingAdds the TestRail run graph to the ticket after the run has been created  Trigger​  Runs on every branch create and creates a new ticket only if the branch name matches release/^v[0-9]+\\.[0-9]+\\.[0-9]+$  on: create:   Steps/Source​  See in repository    ","version":"Next","tagName":"h3"},{"title":"Approve Slash Command (approve_command)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#approve-slash-command-approve_command","content":" View on GitHub Actions  Description​  Workflow for the /approve command in GitHub Issues. Workflow is made available in Issues by the slash_commands workflow.  The current version of the workflow looks for a comment in issues that starts with /approve. The command should be immediately followed by a version string that matches the version regex /^vd+.d+.d+$/  The current logic on this trigger is pretty brittle and if the admin doesn't do it correctly it can have some incorrect effects that need to get fixed with a new comment that is formatted correctly. There is likely some work to make this better, but there is some time needed to sort out the logic and have the command send the correct message back to the issue and to tag whoever initiated the command.  This command calls the release_pull_request workflow during execution.  Trigger​  Workflow is triggered when a user types /approve into a GitHub Issue and clicks the comment button. See slash_commands for more info.  on: repository_dispatch: types: [approve-command]   Steps/Source​  See in repository    ","version":"Next","tagName":"h3"},{"title":"Merge to main and Create PR to develop (release_pull_request)​","type":1,"pageTitle":"Build and Release Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/BuildReleaseWorkflows#merge-to-main-and-create-pr-to-develop-release_pull_request","content":" View on GitHub Actions  Description​  This Workflow runs when called by another workflow and merges the release branch changes to main and then creates a PR for any branch updates to be pulled back into develop  Trigger​  Runs when called by another Workflow  on: workflow_call:   Parameters​  Inputs​  Name\tDescription\ttype\trequired?version\tVersion Number (eg. v1.1.0)\tstring\tyes  Secrets​  Name\tDescription\ttype\trequired?GH_ACTIONS_PAT\tPAT token from composite parent workflow. Should be PAT from our automation robot\tstring\tyes  Outputs​  Name\tDescription\ttypedevPrUrl\tURL string that points to the new PR to develop for any release branch specific changes\tstring releaseHash\tString value of the commit hash on main that can point to the release changes as a single commit in GitHub\tstring  Steps/Source​  See in repository   ","version":"Next","tagName":"h3"},{"title":"Code Quality Workflows","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows","content":"","keywords":"","version":"Next"},{"title":"Code Checks (code_checks)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#code-checks-code_checks","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#description","content":" Runs our code linter, eslint and our test runner, jest to run our tests. Our PR's have these two jobs set as status checks. They both must run successfuly before a PR can be merged.  Lint job uses the yarn lint:ci command.  In order to speed up test running, we use GitHub Action's matrix feature to run test jobs in parallel. We have a script called setupTestMatrix that gets a list of all of our unit tests, splits them into 5 groups, and run yarn test on each group.  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#trigger","content":" on: pull_request: push: branches: - main - develop - 'release/v**'   Runs on every pull request and any pushes to the branches listed above.  ","version":"Next","tagName":"h3"},{"title":"CodeQL (codeql)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#codeql-codeql","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#description-1","content":" Runs mandatory Code QL scanning on the repository. This workflow was created and is maintained by the VA's GitHub group and should not be updated or removed without consent from that team in order to stay in compliance with VA security policy.  If you need to update the script, please read the comments in the workflow to see what can be added to scanning by the mobile team.  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#trigger-1","content":" - cron: '27 2 * * 1'   Runs every Monday at 0227 UTC  Also runs on every push or pull request to devlop branch.  ","version":"Next","tagName":"h3"},{"title":"Steps/Source​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#stepssource","content":" See in repository    ","version":"Next","tagName":"h3"},{"title":"Update Bundler (bundler_updates)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#update-bundler-bundler_updates","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#description-2","content":" Automated workflow that runs every Wednesday to update all the installed bundler libraries and any installed Fastlane plugins for both the iOS and Android Fastfiles  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#trigger-2","content":" Runs every Wednesday at 0700 UTC on only the develop branch or can be triggered manually.  on: schedule: - cron: &quot;0 7 * * 3&quot; workflow_dispatch:   ","version":"Next","tagName":"h3"},{"title":"Steps/Source​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#stepssource-1","content":" See in repository    ","version":"Next","tagName":"h3"},{"title":"Test Rail Workflows​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#test-rail-workflows","content":" ","version":"Next","tagName":"h2"},{"title":"Create TestRail Milestone (create_testrail_milestone)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#create-testrail-milestone-create_testrail_milestone","content":" View on GitHub Actions  Description​  Creates a new Sprint Milestone in TestRail that can be added to a test run and used for tracking in TestRail.  Trigger​  Runs when called by another workflow  on: workflow_call:   Parameters​  Secrets​  Name\tDescription\ttype\trequired?TEST_RAIL_USER\tTestrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes TEST_RAIL_KEY\tTestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes  Outputs​  Name\tDescription\ttypemilestoneId\tTestRail ID for the Milestone that is created\tstring  Steps/Source​  create_milestone: outputs: milestoneId: ${{ steps.add_milestone.outputs.milestone }} runs-on: ubuntu-latest steps: - name: 'Add new sprint milestone in Testrail' id: add_milestone run: | dateRange=&quot;$(date '+%B %-d') - $(date -d '+13 days' '+%B %-d')&quot; id=$(curl -X POST -H 'Content-Type: application/json' \\ -u &quot;${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}&quot; \\ &quot;https://dsvavsp.testrail.io//index.php?/api/v2/add_milestone/29&quot; \\ -d '{&quot;name&quot;: &quot;Sprint: '&quot;${dateRange}&quot;'&quot;, &quot;description&quot;: &quot;Milestone for all testing performed during Sprint: '&quot;${dateRange}&quot;'&quot;, &quot;start_on&quot;: '$(date +%s)', &quot;due_on&quot;: '$(date -d '+13 days' '+%s')' }' | jq '.id') echo &quot;id is $id&quot; curl -X POST -H 'Content-Type: application/json' \\ -u &quot;${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}&quot; \\ &quot;https://dsvavsp.testrail.io//index.php?/api/v2/update_milestone/${id}&quot; \\ -d '{&quot;is_started&quot;:1}' echo &quot;&quot; echo &quot;::set-output name=milestone::${id}&quot;     ","version":"Next","tagName":"h3"},{"title":"Start RC Run (start_test_rail_run)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#start-rc-run-start_test_rail_run","content":" View on GitHub Actions  Description​  This workflow creates a new TestRail Test Run for QA when called from another Workflow.  Trigger​  Runs when called by another Workflow  on: workflow_call:   Parameters​  Inputs​  Name\tDescription\ttype\trequired?version\tVersion Number (eg. v1.1.0)\tstring\tyes releaseDate\tGo-live date for release (eg. 06/21/2022)\tstring\tyes ticketNumber\tIssue number for release ticket (eg. 3333)\tstring\tyes milestoneId\tTestRail Milestone ID for the run to be associated with\tstring\tyes  Secrets​  Name\tDescription\ttype\trequired?TEST_RAIL_USER\tTestrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes TEST_RAIL_KEY\tTestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes  Outputs​  Name\tDescription\ttypetestrailUrl\tURL String for the newly created TestRail run\tstring  ","version":"Next","tagName":"h3"},{"title":"Steps/Source​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#stepssource-3","content":" See in repository    ","version":"Next","tagName":"h3"},{"title":"Update Run (update_testrail_run)​","type":1,"pageTitle":"Code Quality Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/CodeQualityWorkflows#update-run-update_testrail_run","content":" View on GitHub Actions  Description​  This Workflow runs on a repository dispatch is received from automated TestRail webhooks.  When the TestRail run is updated, it sends a webhook to the repository. This workflow is fired and then updated the mermaid diagram in the Release Ticket issue with the testing results so far in the run  NOTE: Currently, TestRail does not fire a webhook when a test is completed in the run, only when top-level meta-data has been updated in the Run. We have requested an enhancement to TestRail to change this, but there is no documented tracking available for enhancement requests from the TestRail team. This will typically only fire and update once the QA team marks the Run as complete.  Trigger​  Runs when a webhook from TestRail is sent  on: repository_dispatch: types: - update_testrail_run  ","version":"Next","tagName":"h3"},{"title":"GitHub Actions","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#overview","content":" GitHub Actions is used to automate several processes for our project, including build automation, releases, ensuring code quality, and other workflows related to project management. Our workflows can be found on the va-mobile-app repo's Actions tab.  ","version":"Next","tagName":"h2"},{"title":"Workflows​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#workflows","content":" Our workflows can curently be categorized into three types: Release and Build workflows, Code Quality workflows, and Other workflows.  ","version":"Next","tagName":"h2"},{"title":"Build and Release Workflows​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#build-and-release-workflows","content":" We release a new version of the app to app stores every 2 weeks. The process of building, packaging, uploading the app, updating screenshots and release notes manually can be very time consuming. We use a combination of GitHub Actions and fastlane to automate these processes with a combination of git branching strategy, scheduled jobs, and scripting.  View Build and Release Workflows  ","version":"Next","tagName":"h2"},{"title":"Code Quality Workflows​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#code-quality-workflows","content":" Our automations also help us prevent bad code from shipping out by performing linting and running unit tests before PRs are allowed to pass, keeping our dependencies up todate, scanning for vulnerability, and automating TestRail runs.  View Code Quality Workflows  ","version":"Next","tagName":"h2"},{"title":"Other Workflows​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#other-workflows","content":" We also have other workflows to help us with more general tasks, such as getting a use added to our GitHub repo, sending Slack messages, enabling slash commands on our GitHub issues, and deploying our this documentation site.  View Other Workflows  ","version":"Next","tagName":"h2"},{"title":"Code Quality​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#code-quality","content":" Code checks: linting and automated test runnersVulnerability checking with CodeQL  ","version":"Next","tagName":"h3"},{"title":"Automation Robot​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#automation-robot","content":" We use our GitHub automation robot account to do any work in Actions. va-mobile-automation-robot account credentials are located in the VA Mobile vault in 1Password.  I would recommend that you use this account in a separate browser from your every-day browser. It's easier to have the two accounts at hand if one is running in Chrome and the other is only used in say Safari.  Access in Actions is granted with Personal Access Tokens.  ","version":"Next","tagName":"h2"},{"title":"Local Testing​","type":1,"pageTitle":"GitHub Actions","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/Overview#local-testing","content":" You can test GitHub Actions on your local machine using act CLI tool  View saved test data used in local testing ","version":"Next","tagName":"h2"},{"title":"Other Workflows","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows","content":"","keywords":"","version":"Next"},{"title":"Check for linked issues in PRs (check-linked-issues)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#check-for-linked-issues-in-prs-check-linked-issues","content":" View the check linked issues workflow file  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#description","content":" This workflow checks most pull requests to make sure there is an issue connected. This helps us build out release reports and manage tasks as they pass through the system. Read more about how to connect a pull request to an issue.  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#trigger","content":" This workflow triggers inside a pull request, excluding a few branch names  ","version":"Next","tagName":"h2"},{"title":"Add User to va-mobile-team repo (add_new_user)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#add-user-to-va-mobile-team-repo-add_new_user","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#description-1","content":" Workflow used to add a new user to the flagship-mobile-team in GitHub, which grants write and read access tot he va-mobile-app repository and to our ZenHub instance.  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#trigger-1","content":" Creation of Add User to VA Flagship Mobile Team template in va-mobile-app repository.  on: issues: types: [labeled]   ","version":"Next","tagName":"h3"},{"title":"Steps/Source​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#stepssource","content":" Click for full source  ... const extractUsernameRegex = /@[a-zA-Z-_0-9]+/; const username = getFirstMatch(extractUsernameRegex, context.payload.issue.body).substring(1); if(username) { await inviteToTeam(username) await addComment(&quot;User added successfully&quot;) await addLabels(&quot;complete&quot;) await closeIssue() } else { // error const errorMessage = &quot;Invalid username. Requires manual addition to team&quot; // assign for manual approval and addition, add error label await addAssignees(EXCEPTION_ASSIGNEES) await addLabels(&quot;needs-approval&quot;) await addComment(errorMessage) } ...     ","version":"Next","tagName":"h3"},{"title":"Slash Command Dispatch (slash_commands)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#slash-command-dispatch-slash_commands","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#description-2","content":" Workflow sets up any slash commands that have been created to run in a newly created issue.  Uses the Slash Command Dispatch Action from GitHub Marketplace  This can be used to add any more &quot;chat ops&quot;-type automations in the future by adding to the commands: option  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#trigger-2","content":" Runs on every issue created comment and fires any slash commands installed if found.  on: issue_comment: types: [created]     ","version":"Next","tagName":"h3"},{"title":"Start Slack Thread (start_slack_thread)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#start-slack-thread-start_slack_thread","content":" View on GitHub Actions  ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#description-3","content":" Reusable job that sends a message to a specified channel in DSVA slack and starts a thread to keep from cluttering the Slack feed.  ","version":"Next","tagName":"h3"},{"title":"Trigger​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#trigger-3","content":" Runs when called by another workflow  on: workflow_call:   ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#parameters","content":" Name\tDescription\ttype\tdefault?channel_name\tName of the Slack channel where the thread should be started message\tString value of the message that will serve as the top of the thread in Slack channel\tstring\tnone  ","version":"Next","tagName":"h3"},{"title":"Outputs​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#outputs","content":" Name\tDescription\ttype\tdefault?thread_ts\tTimestamp of the Slack thread that was created. Gets passed to other steps for future use.     Steps/Source​  See in repository    ","version":"Next","tagName":"h3"},{"title":"Documentation Site Workflows​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#documentation-site-workflows","content":" ","version":"Next","tagName":"h2"},{"title":"Deploy Site (documentation_deploy)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#deploy-site-documentation_deploy","content":" View on GitHub Actions  Description​  Workflow that runs every day to update this documentation site with any approved changes.  Trigger​  on: workflow_dispatch: schedule: - cron: &quot;0 3 * * *&quot; # Runs at 03:00 AM (UTC) every day (Check https://crontab.guru/)   Runs every day at 0300 UTC  ","version":"Next","tagName":"h3"},{"title":"Steps/Source​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#stepssource-2","content":" See in repository    ","version":"Next","tagName":"h3"},{"title":"Test Build (documentation_test_build)​","type":1,"pageTitle":"Other Workflows","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/OtherWorkflows#test-build-documentation_test_build","content":" View on GitHub Actions  Description​  Automated workflow that runs on every PR that touches autogenerated content for this documentation site to make sure that not of the changes breaks the automatic build and deploy of the site.  Trigger​  Runs on every pull request to develop branch that touches the following paths:  VAMobile/src/components/**VAMobile/documentation/**VAMobile/src/utils/hooks.tsx  on: pull_request: branches: [develop] paths: - VAMobile/src/components/** - VAMobile/documentation/** - VAMobile/src/utils/hooks.tsx   Steps/Source​  test-deploy: name: Test runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: 16.x cache: yarn cache-dependency-path: VAMobile/yarn.lock - name: Test build working-directory: VAMobile run: | yarn install --frozen-lockfile cd documentation yarn install --frozen-lockfile yarn build  ","version":"Next","tagName":"h3"},{"title":"Release Issues","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/ReleaseIssues","content":"","keywords":"","version":"Next"},{"title":"Re-releasing a failed build​","type":1,"pageTitle":"Release Issues","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/ReleaseIssues#re-releasing-a-failed-build","content":" Occasionally, a build may fail for one reason or another, or we may determine that we want to resubmit a build. In order to do this, we need to re-trigger the Release Build workflow. This workflow is triggered by tagging the release branch with a vX.X.X tag. Since this tag exists already, follow the steps below to re-tag a branch and retrigger the build. Keep in mind that the releases for both platforms are tied together in the same workflow, so following these steps will re-run the release for both iOS and Android.  Determine the version number of the build you want to rebuild (vX.X.X)If possible, remove any pending versions for review App Store ConnectGoogle Play Console Make any changes necessary to the corresponding release/vX.X.X branch or have an FE engineer do soSince the vX.X.X tag exists already from the previous build attempt, we need to delete the tag, both locally and remotely Delete the local tag: git tag --delete &lt;vX.X.X&gt;Delete the remote tag: git push --delete origin &lt;vX.X.X&gt;Checkout the release/vX.X.X branchRun git pull to ensure you have the latest changesTag the branch with the version we're trying to release: git tag -a vX.X.X -m vX.X.XPush the tag git push origin vX.X.X Confirm that the Release Build has been retriggeredUpon successful build, check the corresponding App Store console to confirm that the build is present and has been submitted for review  ","version":"Next","tagName":"h2"},{"title":"App Store screenshot failure​","type":1,"pageTitle":"Release Issues","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/ReleaseIssues#app-store-screenshot-failure","content":" Occasionally the uploading of screenshots to the iOS App Store will fail due to timeout. A recent fastlane version update included some optimizations to fix this but it's possible it can occur again. Screenshots are uploaded after a successful build has already been uploaded to App Store Connect. Sometimes we can fix the screenshots manually in App Store connect. To do so:  Go to the pending release in App Store ConnectOn the Distribution tab, you should see the &quot;iOS Previews and Screenshots&quot; sectionFor each screen size and device: Remove any failed screenshots. They usually appear as blank with no image previewCheck if there is a button in the top right that allows you to re-submit the app for review. If not, you will likely need to re-release the entire build by following the steps for &quot;Re-releasing a failed build&quot; insteadIf so, continue with the next steps Comparing it to the screenshots in the release/vX.X.X branch, check the order and upload any missing screenshots Re-submit the app for review  ","version":"Next","tagName":"h2"},{"title":"Need to add code into a release after it has been created (but not pushed to the stores)​","type":1,"pageTitle":"Release Issues","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/ReleaseIssues#need-to-add-code-into-a-release-after-it-has-been-created-but-not-pushed-to-the-stores","content":" Sometimes, after a release branch has been cut, we need to get an important update included before approval. When this happens, we need to recreate the release candidate build. If QA hasn't happened yet, there's no extra effort, but if QA has completed testing on the release candidate, it will need to be retested. Updating the the release needs to be approved by the QA team.  Because the release is tied into a commit and not the current state of the branch, follow the steps below to &quot;re-cut&quot; the release:  Add updated code into the release branch release/vX.X.X and push to githubDelete the local release candidate tag: git tag --delete RC-vX.XX.0-XXXXXX-XXXXDelete the remote tag: git push --delete origin &lt;RC-vX.XX.0-XXXXXX-XXXX&gt;Checkout the release/vX.X.X branchRun git pull to ensure you have the latest changesTag the branch with the version we're trying to release: git tag -a RC-vX.XX.0-XXXXXX-XXXX -m RC-vX.XX.0-XXXXXX-XXXXPush the tag git push origin RC-vX.XX.0-XXXXXX-XXXX  ","version":"Next","tagName":"h2"},{"title":"Release Ticket Failure​","type":1,"pageTitle":"Release Issues","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/GitHubActions/ReleaseIssues#release-ticket-failure","content":" Outlined below are the steps to follow when the automation to create a release ticket and Slack coordination thread fails due to issues like incorrect GitHub username assignment.  Update the release_ticket template with the correct GitHub username and push to GithubDetermine the version number of the build (vX.X.X) and RC tag RC-vX.XX.0-XXXXXX-XXXX you want to deleteDelete the local release candidate tag: git tag --delete RC-vX.XX.0-XXXXXX-XXXXDelete the remote tag: git push --delete origin &lt;RC-vX.XX.0-XXXXXX-XXXX&gt;Delete the local release branch : git branch -d &lt;release/vX.X.X&gt;Delete the remote release branch: git push origin --delete &lt;release/vX.X.X&gt;Manually ran the new_release_branch workflow using workflow_dispatch targeting the develop branch.Confirm that: New RC tag.New release branch.release ticket has been created.Slack thread coordination has been triggered on va-mobile-app channel. ","version":"Next","tagName":"h2"},{"title":"Signing Keys","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/","content":"","keywords":"","version":"Next"},{"title":"Apple​","type":1,"pageTitle":"Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/#apple","content":" Name\tPurpose\tNotesVA Health and Benefits APNS Prod Key.p12\tApple Push notification service certificate. Allows push notifications to be sent to our app on iOS devices\tAPNS certs are managed by the VANotify team. We usually communicate with them at the #va-mobile-app-push-notifications channel in DSVA slack. AppStoreConnectKey.p8\tAPI Key for Apple Appconnect. Fastlane utilizes this in order to get information about latest build numbers, upload builds, upload screenshots submit apps for review, and release reviewed apps to the App Store.\tNew keys can be generated in the App Store account  Read more about the Apple signing keys  ","version":"Next","tagName":"h2"},{"title":"Firebase​","type":1,"pageTitle":"Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/#firebase","content":" Name\tPurpose\tNotesGoogleService-Info.plist\tA GoogleService-Info.plist file contains all of the information required by the Firebase iOS SDK to connect to your Firebase project.\tFile can be downloaded from the firebase console. google-services.json\tUsed for Android app connections to Firebase\tFile can be downloaded from the firebase console. firebase-dist.json\tfirebase-dist.json is used to upload QA builds to Firebase App Tester.\tCan generate a new .json in Google Cloud  Read more about the Firebase signing keys  ","version":"Next","tagName":"h2"},{"title":"Google​","type":1,"pageTitle":"Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/#google","content":" Name\tPurpose\tNotesservice-account.json\tUsed by fastlane to allow distribution of builds to Google Play Console. Similar to firebase-dist.json.\tCan be generated in Google Cloud. Play Store Upload Credentials\tUsed to digitally sign our app bundles with a certificate required for Google Play Console.\tNew keys can be generated by following the documentation. A request must be submitted to Google to replace the signing key.  Read more about the Google signing keys  ","version":"Next","tagName":"h2"},{"title":"Other​","type":1,"pageTitle":"Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/#other","content":" Name\tPurpose\tNotesVA Build Notifier Slack Bot Token\tUsed in GitHub Actions as a secret to send slack messages regarding our build automations.\tTokens can be found in the Slack app as well as webhooks Fastlane match\tFastlane’s match feature is used to store/share one code signing identity to simplify code signing for iOS.\tMATCH_PASSWORD is generated by the fastlane CLI tool when you first run match. We also store it in GitHub Secrets. ","version":"Next","tagName":"h2"},{"title":"Scripts","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts","content":"","keywords":"","version":"Next"},{"title":"on-demand-build.sh​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#on-demand-buildsh","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#description","content":" This script allows a developer with the correct Signing Keys stored locally to build a configured version for one of the stores.  This version can be configured with any of the below parameters and will run the correct Fastlane script to complete the job.  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#parameters","content":" Flag\tDescription\trequired?\ttype\tdefault?\tchoose from (case sensitive)-o OR --os\tOperating system to build for\tyes\tstring\tnone\t[ios, android] -e OR --environment\tVets API environment to build for\tno\tstring\tstaging\t[staging, production] -b OR --branch\tBranch to checkout\tno\tstring\tdevelop\tAny GitHub Branch -t OR --type\tType of build\tno\tstring\tqa\t[qa, release, hotfix] -f OR --flight_group\tTest Flight group to build for (iOS)\tno\tstring\tDevelopment Team\t[Development Team, Ad Hoc Production Testers, IAM Group, Push Testing, UAT Group, VA 508 Testers, VA Employee (Wide) Beta, VA Production Testers, VA Stakeholders] -p OR --play_track\tGoogle Play Track to build for (Android)\tno\tstring\tDevelopment Team\t[Development Team, VA Production Testers] -n OR --notes\tNotes to display in Test Flight or Firebase Distribution for this build\tno\tstring\tnone\tNA -h OR --help\tDisplays this help menu\tno\tNA\tNA\tNA  ","version":"Next","tagName":"h3"},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#file-location","content":" ~/VAMobile.on-demand-build.sh    ","version":"Next","tagName":"h3"},{"title":"production.sh​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#productionsh","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#description-1","content":" Build an production version of Android or iOS. This will deploy to the release staging lane for the OS.  Requires that the developer have the corret certificates installed on their local machine.  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#parameters-1","content":" Flag\tDescription\trequired?\ttype\tdefault?\tchoose from (case sensitive)-o OR --os\tOperating system to build for\tyes\tstring\tnone\t[ios, android] -v OR --version\tVersion name\tyes\tstring\tnone\tShould conform to the regular expression /^v\\d+\\.\\d+\\.\\d+/ (eg v1.1.10) -h OR --help\tDisplays this help menu\tNA\tNA\tNA\tNA  ","version":"Next","tagName":"h3"},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#file-location-1","content":" ~/VAMobile/production.sh    ","version":"Next","tagName":"h3"},{"title":"release_branch.sh​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#release_branchsh","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#description-2","content":" This script is used by the release branch automation. because release branches happen every two weeks and chrontabs notation does not offer intervals we have this script.  From the help:​  Release branch automation script This script does the following: Checks the date to see if it occurs at a 2 week interval from August 4, 2021. (If this is true, then we should cut a release branch from developChecks out the main branch, then pulls the latest tag.Increments the latest tag by the minor version to get the next release version numberChecks out and pulls latest develop branchCreates a new release branch with the correct name and pushes it up to the origin  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#parameters-2","content":" None  ","version":"Next","tagName":"h3"},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/Scripts#file-location-2","content":" ~/VAMobile/release_branch.sh   ","version":"Next","tagName":"h3"},{"title":"Firebase Signing Keys","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Firebase Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase#overview","content":" In order to use any of the Firebase plugins in our application we need to include the correct configuration keys in the build.  The current Firebase configuration files can be downloaded from the project page settings page  If you need to create new keys because they were leaked or for any other reason you will need to follow the Getting Started Menu here.  Android QA and other staging versions are distributed with Firebase Distribution and this file is also help in a base64 string in the CI  ","version":"Next","tagName":"h2"},{"title":"Location in the CI​","type":1,"pageTitle":"Firebase Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase#location-in-the-ci","content":" Apple and Android certificates are stored in GitHub as base64 strings that are decoded by the CI when they are needed.  ","version":"Next","tagName":"h2"},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Firebase Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase#env-constants-for-the-keys","content":" Key Name\tENV String\tLocation ENV String\tDecoded Location\tCI CommandApple Google Services plist\tIOS_GS_PLIST_BASE64\tIOS_GS_PLIST_PATH\t~/project/VAMobile/ios/GoogleService-Info.plist\tdecode_ios_keys Android Google Services json\tGOOGLE_SERVICES_JSON\tGOOGLE_SERVICES_PATH\t~/project/VAMobile/android/app/google-services.json\tdecode_android_keys Firebase Distribution Key\tFIREBASE_DIST_FILE_BASE64\tFIREBASE_DIST_DECODE_PATH\t~/project/VAMobile/android/keys/firebase-dist.json\tdecode_android_keys  ","version":"Next","tagName":"h3"},{"title":"Firebase Cloud Messaging Service Account​","type":1,"pageTitle":"Firebase Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase#firebase-cloud-messaging-service-account","content":" Although push notifications (PN) use the VANotify API to deliver PNs to the app, we still need to provide a service account token to verify the messages through Firebase Cloud Messaging. This token rarely needs to be updated. This private key can be generated through the service account section of the firebase console and installed in Amazon Web Services (AWS). Read AWS messaging token installation documentation.  ","version":"Next","tagName":"h3"},{"title":"More Documentation​","type":1,"pageTitle":"Firebase Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/firebase#more-documentation","content":" Cloud messaging documentationFirebase Documentation SiteFirebase Distribution Documentation ","version":"Next","tagName":"h2"},{"title":"Apple Signing Keys","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#overview","content":" Apple Signing and Distribution keys are obtained through the Apple Developer Portal Certificates, Identifiers, and Profiles  Developers will each need to have a development certificate created for them, or else a team will need a shared key for each machine.  Apple and iOS Distribution certificates are limited in the organization. Currently, the Health and Benefits App has its own certificate for Apple Distribution. In the future, it may be that teams have a shared signing path with different provisioning profiles, but at this time it is not necessary.  Apple Certificates expire every year and need to be renewed. This process is linked below and requires updating both the Certificates' area in the Developer Portal, and work to update the Fastlane Match system used to sign apple builds.  ","version":"Next","tagName":"h2"},{"title":"Fastlane Match and Apple Signing​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#fastlane-match-and-apple-signing","content":" Apple Signing in our build system is managed with Fastlane match. Match manages and stores the certificates so that a single Distribution certificate can be shared with the team through GitHub authorization to the private, encrypted repository.  Match can be called from a local machine to download the certificates and provisioning profiles for distribution or development. It is also used to sign certificates in the CI during Fastlane scripts.  ","version":"Next","tagName":"h2"},{"title":"Renewing Certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#renewing-certificates","content":" In order to renew certificates you will need to revoke the old certificates with Apple and delete them from the private key repository.  ","version":"Next","tagName":"h2"},{"title":"Revoking old certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#revoking-old-certificates","content":" In Apple Developer, revoke the old certificate(s) and delete the associated profile(s). The follow are examples for renewing a distribution certificate:  CERT NAME\tTYPE\tPLATFORMUS Department of Veterans Affairs (VA)\tDistribution\tAll  PROFILE NAME\tPLATFORM\tTYPEmatch AppStore gov.va.vamobileapp\tiOS\tApp Store  ","version":"Next","tagName":"h3"},{"title":"Deleting certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#deleting-certificates","content":" Delete the following from your local copy of the private key repository:  - `/profiles/appstore/&lt;filename&gt;.mobileprovision` - `/certs/distribution/&lt;filename&gt;.cer` - `/certs/distribution/&lt;filename&gt;.p12`   Then push up your changes to the remote repository.This needs to be done on in the remote repository, not just locally, as Match will clone the remote repository to a temporary directory and then try (and fail) to decrypt them. You may need to delete additional certs from other paths (e.g., /certs/developer/...) if you run into a decrpyt error when running the fastlane match command below.  ","version":"Next","tagName":"h3"},{"title":"Creating new certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#creating-new-certificates","content":" Once the certificates have been deleted from both locations you can run match in your terminal to renew the certs navigate to ~/VAMobile/ios/fastlane and then run fastlane match appstore. You should be able to follow the prompt to create a new Distribution Certificate and Provisioning Profile that will be uploaded to the private repository and can then be used for signing apps.  If you run into issues, review the following:  Try using brew install fastlane if your build is erroring outDoes the Apple ID in the ../ios/fastlane/Appfile belong to you?The Apple ID is case sensitive. If your Apple ID password is getting rejected, this might be the issue.  After generating the new certs make sure the MATCH_PASSWORD secret in the va-mobile-app repository is updated so GH Actions can use it and test by running the iOS On Demand workflow. If the signing part doesn't fail before build everything should be good to go. You can PR any file changes that may have happened.  info You may need to update the configs and profiles in the VAMobile.plist with xCode if the name strings are changed. If you receive a build error about not finding a cert, double check this first  ","version":"Next","tagName":"h3"},{"title":"Special guidance for Apple Push Service certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#special-guidance-for-apple-push-service-certificates","content":" Apple Push Service certificates need to be refreshed yearly in August and sent to the VANotify team. Review Apple Documentation on how to create a push certificate and how to create a signing request. The VA Notify team needs the certificate in .p12 and the private key unencrypted (.cer file). Review documentation on converting the .cer file into .p12. Coordination for this happens into the #va-mobile-app-push-notifications Slack channel.  Full testing should be completed with QA before retiring the old certificate.  ","version":"Next","tagName":"h3"},{"title":"Location in the CI​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#location-in-the-ci","content":" Apple certificates are encrypted by Fastlane match into a private repository and fetched at build time.  On your local machine they can be found in the Keychain Access application.  ","version":"Next","tagName":"h2"},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#env-constants-for-the-keys","content":" All keys are stored in match  ","version":"Next","tagName":"h3"},{"title":"More Documentation​","type":1,"pageTitle":"Apple Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/apple#more-documentation","content":" Apple Codesigning DocumentationFastlane Codesigning Documentation ","version":"Next","tagName":"h2"},{"title":"Google Signing Keys","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/google","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Google Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/google#overview","content":" Google .aab files are signed with an upload key and signed by Google's app signing process after upload and before distribution.  A new upload keystore and upload key are generated in Android Studio. Those keys are then stored as base64 strings within the CI and decoded during the build process.  An additional step of creating a Google Play service worker in order to upload with Fastlane tooling. This can only be done by the account holder. You can find that information for the VA account here  This process rarely needs to happen. A service account can live the life of the app if the credentials are not shared. The same is true for the upload certificates.  ","version":"Next","tagName":"h2"},{"title":"Location in the CI​","type":1,"pageTitle":"Google Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/google#location-in-the-ci","content":" The Android certificates are stored in GitHub Actions as base64 strings that are decoded by the CI when they are needed.  ","version":"Next","tagName":"h2"},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Google Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/google#env-constants-for-the-keys","content":" Key Name\tENV String\tDestination ENV String\tDecoded Location\tCI CommandAndroid Keystore\tGOOGLE_KS\tGOOGLE_KS_PATH\t~/project/VAMobile/android/keys/vamobile\tdecode_android_keys Google Service Account\tGOOGLE_SA_JSON\tGOOGLE_SA_PATH\t~/project/VAMobile/android/keys/service-account.json\tdecode_android_keys  ","version":"Next","tagName":"h3"},{"title":"More Documentation​","type":1,"pageTitle":"Google Signing Keys","url":"/va-mobile-app/docs/Engineering/DevOps/AutomationCodeDocs/SigningKeys/google#more-documentation","content":" Android DevelopersFastlane Google SetupGoogle Play Developer APISample Walk-through ","version":"Next","tagName":"h2"},{"title":"Making pull requests","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests","content":"","keywords":"","version":"Next"},{"title":"Install git​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#install-git","content":" Git - Installing Git  ","version":"Next","tagName":"h2"},{"title":"On Mac​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#on-mac","content":" Open terminal and run git —version If you do not already have it installed it will prompt you to install it.  ","version":"Next","tagName":"h3"},{"title":"On Windows​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#on-windows","content":" Git - Downloading Package  ","version":"Next","tagName":"h3"},{"title":"sublime text​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#sublime-text","content":" Sublime Text - Text Editing, Done Right  ","version":"Next","tagName":"h2"},{"title":"Install GitHub Desktop​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#install-github-desktop","content":" GitHub Desktop | Simple collaboration from your desktop  Getting started with GitHub Desktop - GitHub Docs  Open the zip file. When Finder comes up, you will want to drag the application into the Applications folder    You can then open the app from either the finder window or using quick search ⌘ + Space and type GitHub desktop  You may see a warning the first time you open the app, click Open    When the app opens it may ask you to log into GitHub.  Once you are logged in you should see a screen like this:    Wait until your repositories list loads on the right    Scroll or use search until you find department-of-veterans-affairs/va-mobile-app  When you click on the repository name, you should get an option to clone the repository    Click the clone button to pop up a modal. Choose the local path on your machine where you want to save it and click the clone button      ","version":"Next","tagName":"h2"},{"title":"Create a new branch​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#create-a-new-branch","content":" To create a branch, you first need to know what base you need. The base of the branch determines what code changes are available to your branch when you start it. If we think of develop as a trunk, then the two branches shown below will have slightly different code checked in because of where they are branched from. You can see that the yellow branch will have started and be missing two gray commits that the blue branch will have because of where it was based.    This means we need to pay attention the to base branch when we make new branches. In most cases, you will probably have two cases to choose from:  I am making new changes that need to get added to the app or wherever, but NOT for the release ticket. For these you will likely need to base off of the develop branch.I am making change FOR a release ticket, such as what’s new or content changes that have to be in the next release. For these you will need to base it on the correct release branch and will need to do some extra work.  ","version":"Next","tagName":"h2"},{"title":"If your new branch is based on develop​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#if-your-new-branch-is-based-on-develop","content":" Click on the Current Branch tab at the top    There are a few ways to create a new branch. You can type in a branch name in the search, then click the New Branch or the Create New Branch button.    You can also press ⌘ + Shift + N to create a new branch from anywhere in the application. You will see this modal. Just enter your branch name and click Create Branch    Once you have created your branch, you should see this:    You can now start making your changes to the repository. There is no need to publish your branch at this time, we can make all of your changes first and then publish it.  ","version":"Next","tagName":"h3"},{"title":"If your changes are for a release​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#if-your-changes-are-for-a-release","content":" You will need to copy the release branch from the remote repository to start. This is called pulling a remote. To do is in GH desktop, you will simple search for the branch on the server and double click it. Click on the current branch tab, type release into the search and double click the release branch you want to update. It should pre prefixed with origin/ like you see below for origin/release/v1.12.0. Click the branch name and your GH Desktop will pull down that branch history and change to that branch for you.    Now that we have our starting place, we can then create a branch based on release/v1.12.0. Create a new branch any of the ways listed above, but when the create branch modal pops up, you will need to change the base branch from develop to the correct release branch.    Click the release/vx.y.x that is the correct version and click Create Branch  You now have a branch that will update for only the release branch that you can now start making changes on.  ","version":"Next","tagName":"h3"},{"title":"Open the repository in Sublime text​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#open-the-repository-in-sublime-text","content":" Open Sublime Text from your applications folder or using quick search ⌘ + Space  In GitHub Desktop, click on the Current Repository tab at the top and right click on va-mobile-app. Select Reveal in Finder    Click on the va-mobile-app text at the top of finder so that a folder icon pops up. Drag that icon onto the sublime text icon that should be visible in your dock area.    Sublime text should open a new window with your files in a sidebar on the left and a black text editor in the middle. You can now navigate the files in the repo in order to make your changes.  ","version":"Next","tagName":"h2"},{"title":"Making and saving changes​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#making-and-saving-changes","content":" Once you have made changes to the files you want to update, you will need to save the changes in sublime to make them show up in GH Desktop. You can Save All changes with Option(⌥) + ⌘ + S  If you now look at GH Desktop, you should see a list of changes in the left-hand tab.    If you click on a file, you can see the set of changes for each file (called a diff). Green indicates a line was added. Red indicates the line was deleted.    ","version":"Next","tagName":"h2"},{"title":"Committing Changes​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#committing-changes","content":" Once we have all the changes we want to make, we need to save the changes to our git history so that the repository is updated. We call this committing changes to git. To do so in GH Desktop, simple check the box to the left of each file that you want to save changes from. You can save all the changes at once or split up changes in a couple of commits if you want to add changes by some type of change grouping (i.e. all image updates in one commit, all text updates in a second). Its not necessary to do more than one commit, but if you make a lot of changes it can be helpful to break it up in case you make a mistake you need to undo(revert).    Once you have selected all the changes you want to commit, you will need to enter a summary message and commit the changes. Add a summary message that explains the changes in case someone needs to review the history and can easily tell what you were up to. In this case I am making my message “update what’s new text for iOS and android”. Click Commit to &lt;branch_name&gt; to save the changes to git.    GH Desktop should then show you a screen that says No local changes again.  If you have more changes or more commits, go ahead and do those now. Once you have all the changes you want to make, you will need to publish your branch so that you can make a pull request.  ","version":"Next","tagName":"h2"},{"title":"Publish your branch​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#publish-your-branch","content":" In order to make a Pull Request and add your changes back onto the base branch, you will need to copy your local branch up onto the GitHub server. To do this, you just need to go to the GH Desktop app, and click either the Publish Branch tab at the top or the Publish Branch button in the Publish your branch area. The branch should get pushed up to the repository and you should then see an area to Create Pull Request\u0003\u0003      Now the only thing left to do is create a pull request so that others can review your changes before they are added to the repository.  ","version":"Next","tagName":"h2"},{"title":"Create a Pull Request​","type":1,"pageTitle":"Making pull requests","url":"/va-mobile-app/docs/Engineering/DevOps/Making pull requests#create-a-pull-request","content":" Click the Create Pull Request button. This should open a browser window that takes you to a Pull Request template in the repository.    Follow the template to add changes and explain to reviewers what is being added or subtracted from the code base.  You should also connect the ticket to this PR request so that the two move through the ZenHub pipelines together. To do this, you will need the ZenHub Browser Extension for Chrome and Firefox installed. Once this is installed, there should be a button under the text input for you to search the issues in our repo.    Click Connect Issue and search for the ticket by title or number  Once you have connected the issue, you should see something like this:    Click the green Create pull request button to finish your work and send the PR for review. ","version":"Next","tagName":"h2"},{"title":"Build automation overview","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/DevOps/Overview","content":"","keywords":"","version":"Next"},{"title":"Releases​","type":1,"pageTitle":"Build automation overview","url":"/va-mobile-app/docs/Engineering/DevOps/Overview#releases","content":" Our releases are made live every other Tuesday morning. A GitHub Action runs every Tuesday morning to check and see if there is a staged build ready for developer release in the Apple App Store. For Play Store, it checks to see if there is a newer build than the production lane waiting in the Pre-Prod Stash lane. If there is, they are released to production at that time and sends a message to the main va-mobile-app channel in DSVA slack. If not, it completes silently.  Release branches are cut by an Action every other Wednesday that follows a release. The release branch acts as a freeze on the develop branch for the next release that allows QA to run regressions from a static point and allows any last-minute changes to be added before being merged to main and build for review in the stores. This release branch being created then starts automation that creates the release ticket in GitHub and assigns the relevant people.  Releases coincide with the last day of a sprint and new release branches are cut on the first day of the sprint.  Release process approval ends with an authorized person (currently a VA Product Owner) releasing the app for build and upload to the stores by running the /approve command in the automated release ticket. This is accomplish by adding a comment to the issue in the form of /approve vX.Y.Z where X.Y.Z is the next version number. This version number should be present in the title of the ticket.  Once the release is approved, the build system will create and upload production versions of the app to the App Stores for review. Barring any issues, these should be released on the next Tuesday when the release Action runs.  note Because chrontab notation doesn't have a way to schedule a job at an interval , i.e. every two weeks, the release action has to be scheduled for EVERY Tuesday. This means that if the approve command is run before the Tuesday in the middle of the sprint, the releases will go out a week early.  ","version":"Next","tagName":"h2"},{"title":"QA Builds​","type":1,"pageTitle":"Build automation overview","url":"/va-mobile-app/docs/Engineering/DevOps/Overview#qa-builds","content":" ","version":"Next","tagName":"h2"},{"title":"Daily Builds​","type":1,"pageTitle":"Build automation overview","url":"/va-mobile-app/docs/Engineering/DevOps/Overview#daily-builds","content":" Regular QA builds are distributed every weekday. These builds are based on the most current commit on the develop branch in order to provide QA with the most up-to-date versions as possible and can be augmented with the other types of builds.  ","version":"Next","tagName":"h3"},{"title":"On Demand Builds​","type":1,"pageTitle":"Build automation overview","url":"/va-mobile-app/docs/Engineering/DevOps/Overview#on-demand-builds","content":" In addition to our automatically scheduled builds, we also have the ability to create QA or UAT builds at any time from any branch, also known as On Demand builds. The On Demand Build Workflow, which can also be found on the left hand sidebar in GitHub Actions, allows us to specify a branch and an environment to create a build from (steps listed out in QA documentation).  ","version":"Next","tagName":"h3"},{"title":"On Demand Build Script​","type":1,"pageTitle":"Build automation overview","url":"/va-mobile-app/docs/Engineering/DevOps/Overview#on-demand-build-script","content":" On Demand Builds can also be run from a developers local machine to create one-off-builds for distribution to a specific team or for a specific configuration. These builds use the on-demand script and require the developer to have a copy of the signing certificates and keychains on their local machine.  This type of build is usually for very specific builds the developer wants to distribute to other tracks in Test Flight and Play Store. It is also here as a back-up in case the automated build system experiences issues. This allows for manual kick-off of a build, but guarantees that the build will be, at minimum, configured and built correctly. ","version":"Next","tagName":"h3"},{"title":"Front End","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/","content":"Front End FrontEnd Engineering resources for the VA Mobile app. See the menu at left for sections.","keywords":"","version":"Next"},{"title":"Accessibility Information","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation","content":"","keywords":"","version":"Next"},{"title":"IOS​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#ios","content":" IOS has a handful of ways to test a11y. Here are tools we can use to verify a11y on a real IOS device.  ","version":"Next","tagName":"h2"},{"title":"VoiceOver(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#voiceoverscreen-reader","content":" Enable VoiceOver via Settings -&gt; Accessibility -&gt; VoiceOver -&gt; toggle onAccessibilityHints are not turned on by default. To turn on Settings -&gt; Accessibility -&gt; Verbosity -&gt; toggle on Speak HintsGestures for traversing  ","version":"Next","tagName":"h3"},{"title":"Voice Control(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#voice-controlvoice-navigation","content":" Enable Voice Control via Settings -&gt; Accessibility -&gt; Voice Control -&gt; toggle onVoice Commands Show names -&gt; Tap &lt;name&gt;Show numbers -&gt; Tap &lt;number&gt;  ","version":"Next","tagName":"h3"},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#wireless-keyboard","content":" Use right and left arrows to traverse (tab is not supported)Hit up and down at the same time to activate an item  ","version":"Next","tagName":"h3"},{"title":"Accessibility Inspector(Simulator Only)​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#accessibility-inspectorsimulator-only","content":" Open Xcode -&gt; Play to start simulator -&gt; Xcode Menu Item -&gt; Open Developer Tool -&gt; Accessibility Inspector    ","version":"Next","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#android","content":" Like IOS, Android provides tools to help verify a11y. A real device is needed to test a11y on Android.  ","version":"Next","tagName":"h2"},{"title":"TalkBack(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#talkbackscreen-reader","content":" Enable Talkback via Settings -&gt; Accessibility -&gt; TalkBack -&gt; toggle on Swipe right or left to move between itemsDouble-tap to activate an itemDrag 2 fingers to scroll  ","version":"Next","tagName":"h3"},{"title":"Voice Access(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#voice-accessvoice-navigation","content":" Download/Install Voice Access from the Google Play Store Settings -&gt; Accessibility -&gt; Voice Access -&gt; toggle onStart Voice Access by swiping down from the top of your phone and tap to start Voice Commands Show numbers -&gt; Tap &lt;number&gt;  ","version":"Next","tagName":"h3"},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#wireless-keyboard-1","content":" Use tab key to traverseHit enter to activate an itemSee React Navigation and Wireless Keyboard  ","version":"Next","tagName":"h3"},{"title":"Screen Reader Pronunciations​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#screen-reader-pronunciations","content":" Some screen readers(ex. Samsung phones) will not always pronounce words like &quot;VA&quot; correctly - will sometimes read it as &quot;VAAH&quot; instead of &quot;VA&quot;.  To get round this, add in the unicode \\ufeff in between letters(ex. VA -&gt; V\\ufeffA) for your translations. Text is unchanged from the users pov and the screen reader will pronounce the word correctly.    ","version":"Next","tagName":"h2"},{"title":"Touch Targets​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#touch-targets","content":" Most common components will have it setup so that the text or wrapper will use theme.dimensions.touchableMinHeight so pressable elements have a minimum of 44 height. We can add additional height without changing the font/styles by adding additional padding where it is needed.  Work with QA or design if the default minimum height for touchable targets should be bigger. You can visually view the touch target size by going to debug menu -&gt; Show Inspector -&gt; Toggle on Touchable -&gt; select the element    ","version":"Next","tagName":"h2"},{"title":"React Native Support​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#react-native-support","content":" React Native has a variety of properties that can be set to support a11y. Most common components will already support the a11y properties listed in the link.  ","version":"Next","tagName":"h2"},{"title":"Accessibility with Integration Tests​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#accessibility-with-integration-tests","content":" We originally used the following functions to set a11y properties to better support integration test since without them we were unable to query for certain elements on the screen.  testIdProps for accessibilityLabels(when the literal text needs to sound different for TalkBack or VoiceOver). a11yHintProp for accessibilityHints(additional text read by TalkBack or VoiceOver ex. Button that opens a link outside the app -&gt; &quot;This page will open in your device's browser&quot;). a11yValueProp for accessibilityValue(additional text read by TalkBack or VoiceOver ex. The first item in a list of items -&gt; &quot;Item 1, 1 of 10&quot;).  Note AccessibilityState can be used as normal without a special function.  ","version":"Next","tagName":"h3"},{"title":"Notable Quirks​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#notable-quirks","content":" ","version":"Next","tagName":"h2"},{"title":"React Navigation and Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#react-navigation-and-wireless-keyboard","content":" Note: There have been noticeable issues using wireless keyboard with react navigation.  ","version":"Next","tagName":"h3"},{"title":"Copy and Paste and how it affects Accessibility​","type":1,"pageTitle":"Accessibility Information","url":"/va-mobile-app/docs/Engineering/FrontEnd/AccessibilityInformation#copy-and-paste-and-how-it-affects-accessibility","content":" We can make text-only elements(ex. TextView) have the ability to copy and paste by adding selectable to its property.  We limit the areas(ex. Secure Messaging) where we want to do this because any selectable element gets read as pressable from voice navigation apps like Voice Access and Voice Control. View related ticket. ","version":"Next","tagName":"h3"},{"title":"useAccessibilityFocus","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useAccessibilityFocus","content":"useAccessibilityFocus DescriptionParams and ReturnExample On iOS, voiceover will focus on the element closest to what the user last interacted with on the previous screen rather than what is on the top left (https://github.com/react-navigation/react-navigation/issues/7056) This hook allows you to manually set the accessibility focus on the element we know will be in the correct place.","keywords":"","version":"Next"},{"title":"useAttachments","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useAttachments","content":"useAttachments DescriptionParams and ReturnExample Hook to add and remove attachments from the attachment list","keywords":"","version":"Next"},{"title":"useBeforeNavBackListener","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useBeforeNavBackListener","content":"useBeforeNavBackListener DescriptionParams and ReturnExample Hook to catch IOS swipes and Android lower nav back events","keywords":"","version":"Next"},{"title":"useDestructiveAlert","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useDestructiveAlert","content":"useDestructiveAlert DescriptionParams and ReturnExample Hook to create appropriate actionSheet for a destructive event TODO: 6269-Combine useDestructiveActionSheet and useShowActionSheet","keywords":"","version":"Next"},{"title":"useAutoScrollToElement","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement","content":"useAutoScrollToElement DescriptionParams and ReturnExample Hook to autoscroll to an element","keywords":"","version":"Next"},{"title":"useError","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useError","content":"useError DescriptionParams and ReturnExample Hook to determine if an error should be shown for a given screen id","keywords":"","version":"Next"},{"title":"useExternalLink","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useExternalLink","content":"useExternalLink DescriptionParams and ReturnExample Hook to display a warning that the user is leaving the app when tapping an external link","keywords":"","version":"Next"},{"title":"useFontScale","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useFontScale","content":"useFontScale DescriptionParams and ReturnExample Hook to calculate based on fontScale","keywords":"","version":"Next"},{"title":"useHeaderStyles","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useHeaderStyles","content":"useHeaderStyles DescriptionParams and ReturnExample Hook to get the current header styles in a component","keywords":"","version":"Next"},{"title":"useMessageWithSignature","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useMessageWithSignature","content":"useMessageWithSignature DescriptionParams and ReturnExample Hook to add signature to a message","keywords":"","version":"Next"},{"title":"usePrevious","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/usePrevious","content":"usePrevious DescriptionParams and ReturnExample Tracks previous value passed in","keywords":"","version":"Next"},{"title":"useRouteNavigation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useRouteNavigation","content":"useRouteNavigation DescriptionParams and ReturnExample Navigation hook to use in onPress events.","keywords":"","version":"Next"},{"title":"useTheme","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useTheme","content":"useTheme DescriptionParams and ReturnExample Hook to get the theme in a component","keywords":"","version":"Next"},{"title":"useOnResumeForeground","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useOnResumeForeground","content":"useOnResumeForeground DescriptionParams and ReturnExample Hook that is called when app moves from the background to the foreground","keywords":"","version":"Next"},{"title":"useTopPaddingAsHeaderStyles","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useTopPaddingAsHeaderStyles","content":"useTopPaddingAsHeaderStyles DescriptionParams and ReturnExample Hook to recreate SafeArea top padding through header styles: This is for screens that are meant to look header-less (no headerTitle, or right/left buttons), since the SafeArea top padding is already included in useHeaderStyles above. We are recreating SafeArea top padding through the header rather than just wrapping the app in a SafeArea with top padding, because the latter method causes misalignment issues between the left/right header buttons and the center title for screens with headers.","keywords":"","version":"Next"},{"title":"useValidateMessageWithSignature","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useValidateMessageWithSignature","content":"useValidateMessageWithSignature DescriptionParams and ReturnExample Hook to validate message that could have a signature","keywords":"","version":"Next"},{"title":"Accessing Demo Mode","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#purpose","content":" The VA Health and Benefit App’s Demo Mode mode provides a safe and non-productionalized environment for users to interact and engage with the app’s navigation, functionality, features, and designs.Demo mode is set up with a single user that is not tied to any production test account and allow users to access all of the app’s latest offerings. Users can complete actions such as submitting a secure message or a prescription refill to experience the entire user journey without impacting other systems or teams.Demo users should use the latest version of the app in order to experience the latest version of demo mode. Work in progress items that the VA Health and Benefits App Team is working on will not appear in demo mode until it is released into production.Google Play store uses demo access to perform their testing; if unable to access they will decline the release  ","version":"Next","tagName":"h2"},{"title":"Steps to Access Demo Mode​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#steps-to-access-demo-mode","content":" Download or update existing app to the latest version (any device)Apple App Store LinkGoogle Play Store LinkOpen the appTap the VA Logo 7 timesEnter the Password (Zhuzh-it) and click demo buttonScreen is updated with a Demo Mode bar on the home screenClick the Sign In buttonDemo user is now at the home page of the mobile app and can explore  ","version":"Next","tagName":"h2"},{"title":"Steps to Access Demo Mode with a Screenreader​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#steps-to-access-demo-mode-with-a-screenreader","content":" Download or update the VA: Health and Benefits app to the latest version (version 2.37.0 or later) and open the app. Apple App Store LinkGoogle Play Store Link Swipe past the Veterans Crisis Line link to the VA logo (it will come immediately after the Crisis Line link and before the &quot;sign in&quot; button). With VoiceOver (iOS), it will announce as &quot;Department of Veterans Affairs logo, image, VA U.S. Department of Veterans Affairs&quot;.With Talkback (Android), it will announce as &quot;Department of Veterans Affairs logo, image&quot;. Double-tap the VA logo image 7 times (14 times total).A modal window will appear to enter a password and focus will be on the input field. With VoiceOver (iOS), it will announce &quot;Text field is editing, word mode, insertion point at start&quot;.With Talkback (Android), it will announce &quot;Enter password, edit box&quot;. Enter the password (Zhuzh-it) into the text field.After entering the password, swipe to the &quot;demo&quot; button and double tap.After tapping the demo button, the login screen will update. The focus should shift back to the Veterans Crisis Line link, but depending on your phone's version, it might take you lower on the screen. If you have successfully activated demo mode, there will be an alert box that says &quot;Demo mode, heading&quot; directly below / after the Veterans Crisis Line link. Swipe past that and down to the &quot;sign in&quot; button.Double-tap the &quot;sign in&quot; button to login with demo mode.  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Demo Mode’s password is not working​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#demo-modes-password-is-not-working","content":" Case sensitive and space sensitive - review password enteredMobile app may need to be updated - update the appDemo password has changed, contact the mobile team in slack (#va-mobile-app)  ","version":"Next","tagName":"h3"},{"title":"A new feature does not appear in Demo Mode​","type":1,"pageTitle":"Accessing Demo Mode","url":"/va-mobile-app/docs/Engineering/FrontEnd/DemoMode/#a-new-feature-does-not-appear-in-demo-mode","content":" If the new feature has not yet been released to production, it will not appear in demo modeIf the new feature is released to veterans in production, try the following: Download the latest version of VA Health and Benefits App Open the app and log into DemoHard close the app (app switcher then swipe to close it)Open it again If it's still not there, data may be cachedLog into demo modeGo to Settings -&gt; Developer Screen -&gt; Click the Remote Config buttonScroll down to the Override Toggle sectionTap the relevant feature toggle to onClick Apply OverridesLog back into Demo Mode ","version":"Next","tagName":"h3"},{"title":"Debugging Instructions","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions","content":"","keywords":"","version":"Next"},{"title":"Launching The Debugger​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#launching-the-debugger","content":" This section will apply to all the tools. More information on the react native debugging page  ","version":"Next","tagName":"h2"},{"title":"IOS​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#ios","content":" If on physical device Shake your device. If using a simulator press the shortcut ⌘D or by selecting the Shake Gesture inside the hardware menu in the simulator.On the Action Sheet select Debug with Chrome    ","version":"Next","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#android","content":" Ff on physical device Shake your device. If using a emulator press the shortcut ⌘M.On the dialog select Debug    ","version":"Next","tagName":"h3"},{"title":"Debugging Tools​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#debugging-tools","content":" This sections shows the different debugging tools you can use. By default the chrome developers tools will open if no other tool is already open.  important You must have only the tool you want to use open so that the debugger connects to it.  ","version":"Next","tagName":"h2"},{"title":"Chrome Developers Tools​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#chrome-developers-tools","content":" Launch the debugger from the device debug menu. The React Native Debugger page will open in Chrome on url http://localhost:8081/debugger-ui/. You will know if the device is connected in the Status section. Open the developers tools. From the developers tools you can see the elements, console outputs and source files. In the element you can see the html tree. In the console you can see the redux logout messages and other console outputs. In the source under debuggerWorker you can find the javascript files that you can put breakpoints.  ","version":"Next","tagName":"h3"},{"title":"React Native Developer Tools (standalone application)​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#react-native-developer-tools-standalone-application","content":" If not installed yet follow the installation instructions in the react-devtools to install the react dev tools globally on your machine not in the project. And than install standalone react native debugger app If installed or after the installation launch the react native debugger standalone app. Launch the debugger from your device. With the standalone you can see the redux messages with the redux devtools, see the element tree and console logs in the console tab. In the source tab under RNDebuggerWorker you can find the javascripts to add breakpoints to. If you right click on the redux devtools section you will get a popup to enable network calls. This will allow you to see the calls and response done to the api.  ","version":"Next","tagName":"h3"},{"title":"VSCode React Native Tools Extension​","type":1,"pageTitle":"Debugging Instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DebuggingToolsInstructions#vscode-react-native-tools-extension","content":" This extension will allow you to add breakpoints on the actual code in VSCode.  If not installed install the React Native Tools extension in VSCode and follow the setup instructions in the extensions document. After the extension is installed launch the debugger. Select the Run and Debug Icon on the left explorer and click the play button on the Attach tp packager dropdown. Launch the debugger from your device. The debugger should attach to the VSCode debugger and stop on any breakpoints ","version":"Next","tagName":"h3"},{"title":"Development Best Practices","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices","content":"","keywords":"","version":"Next"},{"title":"Tickets​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#tickets","content":" We use tickets to track all our engineering work. They precisely specify the work to be performed, allow stakeholders to track progress, and guide QA in assessing the resulting work.  ","version":"Next","tagName":"h2"},{"title":"Creating tickets​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#creating-tickets","content":" Every ticket must contain at least the following information:  A detailed description of the workClearly specified Acceptance CriteriaScreenshots or links to mockups where applicableAll relevant labels (&quot;front-end&quot; for FE work, &quot;Health&quot; for Health and Benefits work, &quot;Global&quot; for global work, etc)An epic relating to the ticket's larger context  If possible, choose the relevant template for your ticket. For example, if you're creating a bug ticket, choose the Bug Report Template and include severity in the title, labels, and body.  ","version":"Next","tagName":"h3"},{"title":"Scoping tickets​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#scoping-tickets","content":" We recommend creating smaller tickets because they are easier to implement and test. Always be on the lookout for ways to break up large tickets into smaller, more manageable pieces. Here are some strategies you can use to divide tickets:  Instead of biting off a whole screen containing multiple components in one ticket, create a separate small ticket for each individual component.When you need to refactor messy code before adding functionality, create one ticket for refactoring, and another for new functionality.Don't expand a ticket's scope if you encounter a bug or technical debt during your work. Instead create a separate bug or code upkeep ticket to address the issue.For large refactoring projects, divide the work by feature (Appointments, Claims, Messaging, etc) or by category (Health, Benefits, Global).  If there's any risk that a ticket might not be completed in a single sprint, break it into smaller tickets. An estimate of 13 or larger is a clear indication that the ticket is too large.  ","version":"Next","tagName":"h3"},{"title":"Working on tickets​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#working-on-tickets","content":" All engineering work requires a ticket.  Every ticket must satisfy the requirements in the &quot;Creating tickets&quot; section above. If information is missing, add it or contact the relevant stakeholders.  Before an engineer can begin work on a ticket, it must contain an estimate. Bugs get an initial estimate of 1 to cover a short investigation. Other tickets are left to the engineers' discretion, following our estimation guidelines.  Once everything is in place, complete the following tasks:  Assign yourselfAssign the appropriate QA engineer if not already assignedMove the ticket to In ProgressCreate a branch as described below in the Branches section  Then you can begin work. Keep stakeholders up to date as you work by commenting on the ticket with any important details or questions. This will also preserve information so everyone can reference it in the future.  On completion of your work, double check the following:  All items in Acceptance Criteria are implementedConfirm screen reader functionality on both iOS and Android for accessibilityUnit tests are updated or extended to cover your changes. See our Unit Tests documentation for best practices.Relevant documentation is updated to reflect the changes in your PR  Then create a Pull Request. See the Pull Requests section below for more information.  ","version":"Next","tagName":"h3"},{"title":"Branches​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#branches","content":" Feature branches are temporary branches where we develop and test new features. We implement every code change in a feature branch before merging it into the default branch.  info For features that must be rolled out gradually, or where precise feature activation timing is required, use a remote config flag.  Our default branch is develop. Create your feature branch from there, named as follows:  type/ticketnumber-DescriptionOfWork   The ticket number lets us track back to the relevant ticket. The type and description show the branch's purpose at a glance. Types are feature, bug, chore, and hotfix. Description is CamelCase with optional dashes to add further details. Here are some example branch names:  feature/1234-DescriptionOfNewFeature-OptionalAdditionalInfobug/1234-DescriptionOfBugfixchore/1234-DescriptionOfChorehotfix/1234-DescriptionOfCriticalFix  After completing work in your branch, create a PR as described in &quot;Pull Requests&quot; below.  ","version":"Next","tagName":"h2"},{"title":"Sources​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#sources","content":" Naming git branchesBranch naming  ","version":"Next","tagName":"h3"},{"title":"Pull Requests​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#pull-requests","content":" A Pull Request (PR) is a request to merge code. All pull requests must include certain information. Each PR must pass a series of manual and automated checks before it can be merged.  ","version":"Next","tagName":"h2"},{"title":"Pull request process​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#pull-request-process","content":" Each pull request moves through a series of steps.  Creation: an engineer creates a PR. See &quot;Pull request creation&quot; below.Review: a different engineer reviews the PR. See &quot;Pull request review&quot; below.Approval: when the reviewer is satisfied, they approve the PR and change the pipeline to &quot;With QA (pre-develop)&quot; so QA knows to begin testing.QA: a QA engineer tests the branch and updates TestRail. QA informs the PR creator of any issues they find. On approval, QA comments in the ticket and changes the pipeline to &quot;Ready to merge to develop&quot;.Merge: the PR creater merges the PR. See &quot;Merging pull requests&quot; below.Post-merge: QA completes final testing and closes the ticket.  ","version":"Next","tagName":"h3"},{"title":"Pull request creation​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#pull-request-creation","content":" When creating a PR, fill out each section in the PR template, including:  Description: provide context so a code reviewer or future developer understands why the PR exists and what it doesScreenshots: add before/after screenshots or videos showing the changesTesting information: confirm testing on iOS and Android. Document any special considerations like edge cases or areas of focus for QAReviewer validations: tell reviewers what to check. You can usually copy the Acceptance Criteria from the ticketComplete all PR checklist items  Click the &quot;Connect issue&quot; button and choose the associated ticket. You must be logged into ZenHub to see the &quot;Connect issue&quot; button.  important It's critical to link the PR to the ticket with the &quot;Connect issue&quot; button so we can track the work performed.  Hit &quot;Create pull request&quot; when everything is ready. If your PR is especially complex, you can annotate the PR with comments to help reviewers understand why you made particular decisions. Adding comments to large PRs can also help reviewers know where to focus their attention.  info If you're still actively working on your branch, create a draft PR. Move the PR out of draft status when it's complete and ready for review.  GitHub Actions automatically runs linting checks, unit tests, and E2E tests on PR creation. Fix any issues surfaced by these checks. Revert the PR to draft status if you need more time to make fixes.  When all the checks pass, your PR is ready for review.  ","version":"Next","tagName":"h3"},{"title":"Pull request review​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#pull-request-review","content":" At least one review is required on every PR. Here are some guidelines for creating and reviewing PRs.  As a PR creator:  Try to keep PRs under 400 lines. The larger the PR, the more difficult it is to review thoroughly.If a reviewer asks questions, add a comment under each question with your answer.If a reviewer requests changes, implement them or explain why you disagree.If no one reviews your PR within 24 hours, request a review on Slack.  As a PR reviewer:  Be as precise and clear as possible in your comments. Explain why you're requesting each change.Target your feedback towards best practices. Avoid matters of opinion.If you're just commenting and not requesting changes, keep things moving by approving the PR or saying something like &quot;leaving approval to (person) because I don't know enough about this code&quot;.If you find some code confusing or hard to understand, mention it. Other engineers will probably feel the same way.Provide constructive feedback in a calm, civil manner. We're all working together to make the app better.Spread positivity by calling out clean, maintainable code, good documentation, etc.  ","version":"Next","tagName":"h3"},{"title":"Merging pull requests​","type":1,"pageTitle":"Development Best Practices","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices#merging-pull-requests","content":" You can merge your PR after QA approves it. Choose the &quot;Squash and merge&quot; option to squash your commits down to a single commit in the base branch.  info You can choose to preserve all your commits if they contain critical information. However, squashing is usually preferred to avoid clutter.  Format the commit message using the Conventional Commits specification:  &lt;type&gt;[optional scope]: &lt;description&gt; [optional body] [optional footer(s)]   Example commit messages:  feat: add analytics to cerner alerts fix: preserve whitespace in secure messages chore: run compression over all app store images docs: add a new, nested page under research   You can use ! to denote breaking changes:  chore!: upgrade React Native to 0.73   After merging:  Change the pipeline on your ticket to &quot;With QA (develop)&quot; so QA can perform final testingSelect the current release under &quot;Releases&quot; so we can track which tickets went into each release ","version":"Next","tagName":"h3"},{"title":"Development setup instructions","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#prerequisites","content":" tip If you are building in the app for prototyping, testing, or demo purposes, you can freely build locally for Android without requesting access or keys. You can also consider using our codespaces setup to get up and running quickly.  ","version":"Next","tagName":"h2"},{"title":"Access​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#access","content":" You have been fully onboarding into the VA Github organiztion.An SSH key setup with github: Connect With SSH.You or your team has been approved to build and release a production feature into the VA Mobile App by a VA Product Owner.If your feature is approved, reach out to Flagship support to get access to App Store Connect so you can build the iOS app locally.  ","version":"Next","tagName":"h3"},{"title":"Software​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#software","content":" XCodeAndroid StudioCocoaPodsNode.jsHomebrewgitNVMyarnJava JDK  ","version":"Next","tagName":"h3"},{"title":"Environment variables setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#environment-variables-setup","content":" If you are using zsh on Mac you will need to create the .zprofile and .zshrc files if they do not exists.  In your bash_profile or .zprofile add the following:  # JAVA_HOME` variable pointing to the java installed above example export JAVA_HOME=$(/usr/libexec/java_home -v 15.0.2) # `NODE_OPTIONS` this is to manage the node memory space export NODE_OPTIONS=--max_old_space_size=8192 # Android specific vars for the ANDROID_HOME, platform-tools and cmdline-tools export ANDROID_SDK=/Users/(your user folder)/Library/Android/sdk export ANDROID_HOME=$ANDROID_SDK export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin export PATH=$PATH:$ANDROID_HOME/platform-tools # The build of the app relies on a scripted creation of the .env # file to run correctly. You will need to add the `APP_CLIENT_SECRET` # var to work correctly: export APP_CLIENT_SECRET='client secret ask for this client key' # The app has a demo mode. To use demo mode the app reads the # `DEMO_PASSWORD` var. You can set this to a blank password or # assign any string to it export DEMO_PASSWORD=''   After adding the variables, restart your terminal window and the variables should be activated. Run which adb to make sure the android variables are working. If they are not, please reach out to Flagship support.  ","version":"Next","tagName":"h2"},{"title":"Local project setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#local-project-setup","content":" Verify you have access to the Firebase console. If you don't, please reach out to Flagship support.With your preferred code editor, navigate to the va-mobile-app/VAMobile folder inside your cloned version of the repository.In the android/app directory add a file named google-services.json. You can download this google-services.json file from the firebase console, under the &quot;your apps&quot; section. You can also download the corresponding GoogleService-Info.plist file you will need to later place in your in VAMobile/ios.  ","version":"Next","tagName":"h2"},{"title":"Download the files from Firebase​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#download-the-files-from-firebase","content":" Android​    iOS​    ","version":"Next","tagName":"h3"},{"title":"Add file to proper directory​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#add-file-to-proper-directory","content":"   Open a terminal and type nvm use and press enter to set the node version for the project (if the version isn't installed, it will prompt you with the install command).In a terminal, type yarn or yarn install and press enter to install the projects dependencies. This will create the node_modules folder.After dependencies are installed, type cd ios &amp;&amp; pod install &amp;&amp; cd .. and press enter to install pods on iOS (This is done once unless you installed new dependencies that need pods created).Run yarn env:staging and press enter to setup the staging environment and create the .env file. Verify the file has the client key and demo password that is in your .zshrc file.Run yarn bundle:ios and press enter to create the IOS bundle.Run yarn bundle:android and press enter to create the android bundle.Run yarn start to start the metro development server.  ","version":"Next","tagName":"h3"},{"title":"Android Setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#android-setup","content":" ","version":"Next","tagName":"h2"},{"title":"Emulator Setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#emulator-setup","content":" Open Android Studios and select to a open project. On the popup window, browse to va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project, you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studios -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Add a test emulator in Android Studios Tools -&gt; AVD Manager. Follow the instructions on Android Emulator Setup to add a new virtual device. After adding the new virtual device, select it from the top device menu. Build the project Launch Virtual Device from Android studio. Verify the Virtual Device launches and Android Studio installs and opens the VAMobile app on the device.  ","version":"Next","tagName":"h3"},{"title":"Physical Device Setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#physical-device-setup","content":" Open Android Studio and select to a open project. On the popup window, browse to va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project, you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studio -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Turn on developer mode for the phone. See React Native Instructions Connect phone with a usb to the host machine. Open a Terminal and type adb devices. You should see an ouput like so. Type adb -s &lt;device name&gt; reverse tcp:8081 tcp:8081. Select the physical device from the top device menu. Build the project Launch Virtual Device from Android Studio. Verify Android Studio installs and opens the VAMobile app on the device.  ","version":"Next","tagName":"h3"},{"title":"iOS Setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#ios-setup","content":" ","version":"Next","tagName":"h2"},{"title":"Simulator Setup​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#simulator-setup","content":" Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA) Select a simulator from the list in Xcode. If you are using XCode 15, a temporary workaround is required to avoid a build failure with RCT-Folly. a. Select Pods &gt; Build Settings &gt; Apple Clang - Preprocessing section &gt; Preprocessor Macros section b. Add to the &quot;Debug&quot; and &quot;Release&quot; sections: _LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION Build project on Xcode. Launch simulator by pressing the play button.  ","version":"Next","tagName":"h3"},{"title":"Physical Device​","type":1,"pageTitle":"Development setup instructions","url":"/va-mobile-app/docs/Engineering/FrontEnd/DevSetupProcess#physical-device","content":" Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA). Connect the iPhone via USB to the host machine. See React Native Instructions Accept permissions on your iPhone from Xcode to allow the developers option. Select a device from the list in Xcode. Build project on Xcode. Launch device by pressing the play button. ","version":"Next","tagName":"h3"},{"title":"Downtime Messages","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/DowntimeMessages","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Downtime Messages","url":"/va-mobile-app/docs/Engineering/FrontEnd/DowntimeMessages#overview","content":" Downtime Messages are error pages that shown to users when a known maintenance window is actively occuring for a specific feature in the app. Downtime windows are determined by upstream service providers and compiled into a single list by the back-end. The front-end checks for active downtime windows once per session during the sync stage after login and caches the data for the remainder of the session.  Downtime messages use the same display pattern as errors in code, with additional checks in the useError utility to check if a downtime error exists for a specific screen ID. Multiple features can trigger a downtime message on a single screen, e.g. claims and appeals are two separate features but display on the same page. Whether a downtime message is displayed if a subset of features on the screen are down is a business decision that varies based on feature.  ","version":"Next","tagName":"h2"},{"title":"Maintenance Window Technical Description​","type":1,"pageTitle":"Downtime Messages","url":"/va-mobile-app/docs/Engineering/FrontEnd/DowntimeMessages#maintenance-window-technical-description","content":" The data returned from the back-end for a maintenance window includes a service name, and start time, and an end time. The service name is determined by the back-end and is not directly equivalent to feature names used in the front-end, so a mapping from service name to feature name as well as service name to the affected screen ID is provided in the store/api/types/Errors.ts file. Anytime a new feature with downtime is added, this mapping needs to be updated and the rest of the logic will automatically piggyback off of error logic and the checks in store/slices/errorSlice.ts:checkForDowntimeErrors().  Maintenance windows, as derived from DowntimeFeatureTypeConstants, are also used in some cases within view components to disable data fetches from the backend to avoid fetching data that we know will be unavailable or unreliable during maintenance windows.  Example return data from /v0/maintenance_windows endpoint:  data: [ { attributes: { service: 'direct_deposit_benefits', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '1', type: 'maintenance_window', }, { attributes: { service: 'military_service_history', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '2', type: 'maintenance_window', }, ]   ","version":"Next","tagName":"h2"},{"title":"Downtime Messages Display​","type":1,"pageTitle":"Downtime Messages","url":"/va-mobile-app/docs/Engineering/FrontEnd/DowntimeMessages#downtime-messages-display","content":" The downtime message displays as a full page error with a warning border. The template and an example are show below      ","version":"Next","tagName":"h2"},{"title":"Back-end​","type":1,"pageTitle":"Downtime Messages","url":"/va-mobile-app/docs/Engineering/FrontEnd/DowntimeMessages#back-end","content":" View back-end documentation ","version":"Next","tagName":"h2"},{"title":"Translations","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations","content":"","keywords":"","version":"Next"},{"title":"Translation Files​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#translation-files","content":" All visible copy in the app should be located in language specific translation files to support the ability of the app to decide client side which language it will display. Translations are stored in JSON files located under src/translations/&lt;language&gt; and split into separate files by namespace.  ","version":"Next","tagName":"h2"},{"title":"Files and Namespaces​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#files-and-namespaces","content":" Within a language directory, the translation files are split into files for each namespace representing different sections of the app. There is also a common namespace used for strings used throughout the app like &quot;Save&quot; or &quot;Cancel&quot;.  ","version":"Next","tagName":"h3"},{"title":"Translation Keys​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#translation-keys","content":" Strings are identified in the app through a key associated with the value in their language file. This key must be consistent across all language files for their respective values, the key itself is not translated.  &quot;claimPhase.details.phaseFive&quot;: &quot;Complete&quot;,  This is an example of a string in the claims namespace. The key is claimPhase.details.phaseFive and the translated value is Complete.  ","version":"Next","tagName":"h3"},{"title":"Adding a New String​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#adding-a-new-string","content":" If it is specific to a screen or will only be used within certain parts of the app (for example, &quot;Take photos and upload to your claim&quot;) it should be placed in the file for the namespace associated with that copy.If it is used in a common component or will be used across the app in nonspecific contexts (for example &quot;confirm&quot; or &quot;refreshes the page&quot;) then it should go in the common namespace.Maintain keys in alphabetical order within the JSON file.  ","version":"Next","tagName":"h3"},{"title":"Using Translations​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#using-translations","content":" Translation values are accessed via the useTranslation hook. This hook creates a translation function for a namespace or list of namespaces provided as an argument.  const { t } = useTranslation(NAMESPACE.COMMON)   For basic usage, the translation function takes in the desired key as the only argument and will resolve to the display value associated with that key.  t('claimDetails.needHelp')   This value can be used like any other string, either placed directly into a TextView component:  &lt;TextView variant=&quot;MobileBodyBold&quot; &gt; {t('claimDetails.needHelp')} &lt;/TextView&gt;   Or passed in as a prop to a component that will decide where and how to display it:  &lt;Button label={t('fileUpload.submit')} testID={t('fileUpload.submit')} a11yHint={t('fileUpload.uploadFileA11yHint')} /&gt;   ","version":"Next","tagName":"h2"},{"title":"Strings With Parameters​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#strings-with-parameters","content":" Sometimes text will not be static and includes values that are user, code, or API driven and cannot be added to the translation file itself. In the translated string in the translation files, the {{}} notation provides a spot in the string to place dynamic values.  &quot;listPosition&quot;: &quot;{{position}} of {{total}}&quot;,   This allows this translation to take in two values, position and total that will be placed in the translated value. To use this with our translation function:  t('listPosition', { position: myPosition, total: totalEntries })   ","version":"Next","tagName":"h3"},{"title":"Multiple Namespaces​","type":1,"pageTitle":"Translations","url":"/va-mobile-app/docs/Engineering/FrontEnd/Internationalization/Translations#multiple-namespaces","content":" To use multiple namespaces, either create another function with the desired namespace  const { t } = useTranslation(NAMESPACE.COMMON) const { t: tCommon } = useTranslation(NAMESPACE.COMMON)   or create one translation function for multiple namespaces where the usage will be prefixed with the desired namespace  const { t } = useTranslation([NAMESPACE.COMMON, NAMESPACE.HEALTH]) const myCommonString = t('health:key.in.health')  ","version":"Next","tagName":"h3"},{"title":"Redux Toolkit Overview","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Redux Toolkit Overview","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#purpose","content":" The Redux Toolkit package was built with the intention on being the standard way of writing Redux logic. It was mainly created to help address the three common concerns of Redux.  &quot;Configuring a Redux store is too complicated&quot;&quot;I have to add a lot of packages to get Redux to do anything useful&quot;&quot;Redux requires too much boilerplate code&quot;  ","version":"Next","tagName":"h2"},{"title":"Benefits​","type":1,"pageTitle":"Redux Toolkit Overview","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#benefits","content":" Some benefits of using Redux Toolkit are:  Simple : Includes utilities to simplify common use cases like store setup, creating reducers, immutable update logic, and more.Opinionated : Provides good defaults for store setup out of the box, and includes the most commonly used Redux addons built-in.Powerful : Takes inspiration from libraries like Immer and Autodux to let you write &quot;mutative&quot; immutable update logic, and even create entire &quot;slices&quot; of state automatically.Effective : Lets you focus on the core logic your app needs, so you can do more work with less code.  More information on the purpose and installation of Redux Toolkit can be found on their page. ","version":"Next","tagName":"h2"},{"title":"Deep Linking","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#overview","content":" Deep links in the app are handled by the React Navigation library. The React Navigation linking configuration handles mapping links to the appropriate screens, and updating the navigation state when necessary.  ","version":"Next","tagName":"h2"},{"title":"Setting up push notifications​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#setting-up-push-notifications","content":" A prerequisite for adding deep linking support for a feature's push notification is to have push notifications setup for that feature. An architectural overview of how push notifications work in the app and information on how to add them for a feature can be found in push notification documentation.  In order for deep linking to work for your push notification, the url field must be present in the push template. The URL should be prefixed with vamobile:// and followed by the path of the deep link you want to add, e.g. vamobile://messages/%MSG_ID%. In this example, the path of the deep link is prefixed with vamobile://, starts with messages, and is followed by the MSG_ID parameter, which is a field that will be populated from the API call that triggers the push notification. This will result in push notifications returning a payload that looks something like:  { ... &quot;url&quot;: &quot;vamobile://messages/1234&quot; }   ","version":"Next","tagName":"h2"},{"title":"Adding a new deep link​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#adding-a-new-deep-link","content":" To map your push notification to a specific screen, you'll need to update the config object in the React Navigation linking configuration. config contains a screens object, which is based on the navigation structure of the app. Within that object, the key represents the route name of the screen in the navigation stack, and the value represents the URL that should be mapped to that screen. Route names in config can also nest other screens objects for child routes. For reference, the configuration can look something like this:  config: { screens: { Tabs: { screens: { HealthTab: { screens: { ViewMessageScreen: 'messages/:messageID', }, }, }, }, }, }   You'll notice the entry for the screen ViewMessageScreen is nested under other screens like HealthTab and Tabs. This reflects the structure of the app's navigation stack. Starting from the root navigator, you can trace the stack by viewing the component prop of the route in the stack until you arrive at the screen you want. Using the example above, the Tabs route is mapped to the AppTabs component, which is where most of the screens in the app fall under. In the AppTabs component, you'll see a navigation stack containing the HealthTab route, which maps to the HealthScreen screen. In the HealthScreen component, you'll see a navigation stack containing all the health screens. From that list, you'll find the ViewMessageScreen route, which finally maps to the ViewMessageScreen component. Following these steps can make it easier to determine the structure of your deep link when updating the linking configuration.  ","version":"Next","tagName":"h2"},{"title":"Passing props to screens​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#passing-props-to-screens","content":" From the example above, the URI endpoint messages/:messageID is being mapped to the ViewMessageScreen screen, where :messageID is a parameter that is expected to be in the URI. That parameter will be passed to the screen's props. The name of the parameter in the URL must match the name of the prop in the screen's component in order for it to be passed to the component, so in this example, the ViewMessageScreen component has a prop named messageID as well. More information on passing parameters can be found in the React Navigation documentation.  ","version":"Next","tagName":"h3"},{"title":"Handling back navigation​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#handling-back-navigation","content":" Once you've added your deep link to the linking configuration, depending on how nested the screen is in the app, one issue you may run into is navigating backwards. Navigating back from screens opened via a deep link will typically go back to the home screen. This is because React Navigation isn't able to automatically generate the correct navigation state when a deep link is opened. The navigation state will need to be manually generated to ensure navigating back after opening a deep link takes the user to the correct screen.  In the linking configuration, the getStateFromPath function can be used for manually setting the navigation state based on the path of the opened deep link. Logic added here shouldn't conflict with logic for other deep links. The generated navigation state for ViewMessageScreen from the previous examples looks like this:  { routes: [ { name: 'Tabs', state: { routes: [ { name: 'HealthTab', state: { routes: [{ name: 'Health' }, { name: 'SecureMessaging' }, { name: 'ViewMessageScreen', params: { messageID: pathParts[1] } }], }, }, ], }, }, ], }   The state should match the behavior you'd see if you were manually navigating from the home screen to the desired screen. The navigation state should be returned by the function if the path parameter matches the pattern specified in the config object. This will ensure that navigating back from the screen opened by a push notification produces expected behavior.  More information on navigation state can be found in the React Navigation documentation.  ","version":"Next","tagName":"h2"},{"title":"Testing deep links​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#testing-deep-links","content":" Once you've configured deep linking for your push notification, you'll be able to test it by triggering push notifications remotely from the responsible service. The VANotify API can also be used to send push notifications to a device, but this requires an API key that will need to be provided by the VANotify team.  Note: Remote push notifications will only work on a physical device with a non-development build installed, so you'll need to run an on demand build for your branch.  ","version":"Next","tagName":"h2"},{"title":"Local testing​","type":1,"pageTitle":"Deep Linking","url":"/va-mobile-app/docs/Engineering/FrontEnd/PushNotifications/DeepLinking#local-testing","content":" If you're not able to test your deep link via remote push notifications, or would like a quicker way of testing, you can test your deep link locally with either uri-scheme or Detox.  uri-scheme​  This is a CLI tool used for testing native URI schemes on both iOS and Android. This approach will work with a virtual device. To test your deep link, you can run the following command in your terminal:  npx uri-scheme open &quot;{THE_FULL_URL}&quot; --{DEVICE_PLATFORM}   This will launch the app with the provided URL, similar to how a push notification with deep linking configured would. Using the example from earlier, running this for the iOS simulator would look something like:  npx uri-scheme open &quot;vamobile://messages/1234&quot; --ios   Detox​  You can also use our automated UI testing tool Detox to simulate push notifications on a virtual device. Detox supports mocking push notifications, which provides a more complete view of how the app will behave when a deep link is opened from a push notification. Since Detox is already used in our repository, all you'll need to do is create a new test for your push notification, and run it locally. View an example of a Detox test for a push notification. ","version":"Next","tagName":"h3"},{"title":"VA App and Redux Toolkit","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit","content":"","keywords":"","version":"Next"},{"title":"Why Redux Toolkit​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#why-redux-toolkit","content":" The reasons the VA mobile team decided to move to Redux toolkit from the regular Redux implementation are:  Redux Toolkit is the new modern way of writing Redux and is the new standard which most Redux's guides and documentation are moving to or suggesting to use.The standard Redux has too much boiler plate and to add a new state you have to modify or add files in many different locations. With Redux Toolkit everything is in one file.With Redux Toolkit we have devtools for debugging and the thunk middleware out of the box without extra configurations.  ","version":"Next","tagName":"h2"},{"title":"VA App Redux Architectures​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#va-app-redux-architectures","content":" This section will show the difference from using the standard Redux and Redux Toolkit in our VA App. We will be using the disability rating as an example.  ","version":"Next","tagName":"h2"},{"title":"With Standard Redux (older implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-standard-redux-older-implementation","content":" Folder Structure: With the standard Redux you would need three folders actions, reducers, and types. To add a new state you would have to add a file in each of those different sections.    Actions Folder: Here is where the actions file would go. The action file would define the sync and async actions for a feature. Also the created file would need to be added to the actions index file.    import * as api from 'store/api' import { AsyncReduxAction, ReduxAction } from 'store/types' import { RatingData, ScreenIDTypes } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errors' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' /** * Redux action to start disability ratings fetch * * @returns ReduxAction */ const dispatchStartGetRating = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_START_GET_RATING', payload: {}, } } /** * Redux action to set disability ratings data or error after fetch * * @returns ReduxAction */ const dispatchFinishGetRating = (ratingData?: RatingData, error?: Error): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_FINISH_GET_RATING', payload: { ratingData, error, }, } } /** * Redux action to reset disability ratings on logout * * @returns ReduxAction */ export const dispatchDisabilityRatingLogout = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_ON_LOGOUT', payload: {}, } } /** * Redux action to get the users disability ratings * * @returns AsyncReduxAction */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AsyncReduxAction =&gt; { return async (dispatch, _getState): Promise&lt;void&gt; =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating(ratingData?.data.attributes)) } catch (err) { if (isErrorObject(err)) { dispatch(dispatchFinishGetRating(undefined, err)) dispatch(dispatchSetError(getCommonErrorFromAPIError(err), screenID)) } } } }   export * from './auth' export * from './directDeposit' export * from './disabilityRating'   Reducers Folder: Here is where the reducer file would go. The reducer file would define the initial state and reducer functions for a feature. Also the created file would need to be added to the reducers index file.    import { RatingData } from 'store/api' import createReducer from './createReducer' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } export default createReducer&lt;DisabilityRatingState&gt;(initialDisabilityRatingState, { DISABILITY_RATING_START_GET_RATING: (state, payload) =&gt; { return { ...state, ...payload, loading: true, } }, DISABILITY_RATING_FINISH_GET_RATING: (state, { ratingData, error }) =&gt; { return { ...state, error, ratingData, needsDataLoad: error ? true : false, preloadComplete: true, loading: false, } }, DISABILITY_RATING_ON_LOGOUT: (_state, _payload) =&gt; { return { ...initialDisabilityRatingState, } }, })   import { combineReducers } from 'redux' import { ReduxAction } from 'store/types' import auth, { AuthState, initialAuthState } from './auth' import directDeposit, { DirectDepositState, initialDirectDepositState } from './directDeposit' import disabilityRating, { DisabilityRatingState, initialDisabilityRatingState } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' export interface StoreState { auth: AuthState directDeposit: DirectDepositState disabilityRating: DisabilityRatingState } export const InitialState: StoreState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, } const allReducers = combineReducers&lt;StoreState, ReduxAction&gt;({ auth, directDeposit, disabilityRating, }) export default allReducers   Types Folder: Here is where the type file would go. The type file would define the action's payload type and action creators definitions. Also the created file would need to be added to the types index file.    import { ActionDef, EmptyPayload } from './index' import { RatingData } from 'store/api' /** * Redux payload for DISABILITY_RATING_START_GET_RATING action */ export type DisabilityRatingStartGetRatingPayload = Record&lt;string, unknown&gt; /** * Redux payload for DISABILITY_RATING_FINISH_GET_RATING action */ export type DisabilityRatingPayload = { ratingData?: RatingData error?: Error } /** * All disability rating actions */ export interface DisabilityRatingActions { /** Redux action to signify the initial start of getting the disablity rating*/ DISABILITY_RATING_START_GET_RATING: ActionDef&lt;'DISABILITY_RATING_START_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to signify that the disability rating is being retrieved */ DISABILITY_RATING_FINISH_GET_RATING: ActionDef&lt;'DISABILITY_RATING_FINISH_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to clear disability rating data on logout **/ DISABILITY_RATING_ON_LOGOUT: ActionDef&lt;'DISABILITY_RATING_ON_LOGOUT', EmptyPayload&gt; }   import { ThunkAction } from 'redux-thunk' import { AuthActions } from './auth' import { DirectDepositActions } from './directDeposit' import { DisabilityRatingActions } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' type ActObjs&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T] type ActObjsPayload&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T]['payload'] export interface ActionDef&lt;T extends string, P extends ActObjsPayload&lt;AllActionTypes&gt;&gt; { type: T payload: P } export type EmptyPayload = unknown export type StoreStateFn = () =&gt; StoreState export type AllActionDefs = AuthActions &amp; DirectDepositActions &amp; DisabilityRatingActions type AllActionTypes = keyof AllActionDefs export type ReduxAction = ActObjs&lt;AllActionTypes&gt; export type AsyncReduxAction = ThunkAction&lt;Promise&lt;void&gt;, StoreState, undefined, ReduxAction&gt;   Store File: Here is where the store would be configured.  import { ReduxAction } from './types' import { Store, applyMiddleware, createStore } from 'redux' import logger from 'redux-logger' import rootReducer, { StoreState } from './reducers' import thunk from 'redux-thunk' export * from './reducers' export * from './actions' export * from './types' const configureStore = (state?: StoreState): Store&lt;StoreState, ReduxAction&gt; =&gt; { const middleware = applyMiddleware(thunk, logger) return createStore(rootReducer, state, middleware) as Store&lt;StoreState, ReduxAction&gt; } export default configureStore   ","version":"Next","tagName":"h3"},{"title":"With Redux Toolkit (current implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-redux-toolkit-current-implementation","content":" Folder Structure: With Redux Toolkit you would need one folder slices. To add a new state you would have to add one file to the slices folder.    Slices Folder: Here is where you will define your slice file. This file is where everything will be added. With redux toolkit actions creators, types and reducers are created for you in the slice. Also the creted file needs to be added to the slices index file.    import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { RatingData, ScreenIDTypes } from 'store/api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get the users disability ratings */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating({ ratingData: ratingData?.data.attributes })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetRating({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const disabilitRatingSlice = createSlice({ name: 'disabilityRating', initialState: initialDisabilityRatingState, reducers: { dispatchStartGetRating: (state) =&gt; { state.loading = true }, dispatchFinishGetRating: (state, action: PayloadAction&lt;{ ratingData?: RatingData; error?: Error }&gt;) =&gt; { const { ratingData, error } = action.payload state.ratingData = ratingData state.error = error state.needsDataLoad = error ? true : false state.preloadComplete = true state.loading = false }, dispatchDisabilityRatingLogout: () =&gt; { return { ...initialDisabilityRatingState } }, }, }) export const { dispatchDisabilityRatingLogout, dispatchFinishGetRating, dispatchStartGetRating } = disabilitRatingSlice.actions export default disabilitRatingSlice.reducer   import { RootState } from 'store' import { initialAuthState } from 'store/slices/authSlice' import { initialDirectDepositState } from 'store/slices/directDepositSlice' import { initialDisabilityRatingState } from 'store/slices/disabilityRatingSlice' export * from './authSlice' export * from './directDepositSlice' export * from './disabilityRatingSlice' export const InitialState: RootState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, }   Store File: Here is where the store would be configured.  import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import authReducer from 'store/slices/authSlice' import directDepositReducer from 'store/slices/directDepositSlice' import disabilityRatingReducer from 'store/slices/disabilityRatingSlice' // Creates the store const store = configureStore({ reducer: { auth: authReducer, directDeposit: directDepositReducer, disabilityRating: disabilityRatingReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt;  ","version":"Next","tagName":"h3"},{"title":"Updating or Adding to an Existing Feature State","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#intro","content":" This tutorial will consists of adding state to an existing feature state.  ","version":"Next","tagName":"h2"},{"title":"Adding a New State​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#adding-a-new-state","content":" Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts.  Current Slice Code  /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer   Code after adding the logout reducer  Here we added the dispatchMilitaryHistoryLogout reducer function which we will extract an action to be dispatch on the logout Redux thunk.  /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, dispatchMilitaryHistoryLogout: () =&gt; { return { ...initialMilitaryServiceState, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer   That is all it takes to add a new state to an existing slice file. Now the dispatchMilitaryHistoryLogout could be imported to any file and be dispatched. ","version":"Next","tagName":"h2"},{"title":"Add a New Feature State","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Add a New Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#intro","content":" This tutorial will consists of adding a new Redux state for the military service feature. This will be the same steps for adding any new Redux state to the VA mobile app.  ","version":"Next","tagName":"h2"},{"title":"Creating the Slice File​","type":1,"pageTitle":"Add a New Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#creating-the-slice-file","content":" Right click the slice folder (src/store/slice) and select new file. Enter the name of the file [your file name]Slice.ts. Example: (militaryServiceSlice.ts) Add the Redux toolkit import to the created slice file. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' Add the Redux initial state. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } Create the Redux slice and add the initial state created in the previouse step to the create slice function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { }, }) Add the reducers that will be updating the state. The name that you give to the reducer will be the same name the action creator and type is going to use typescript will infere that name. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) info The PayloadAction param only takes one value if you need to pass more than one param use an object as above. Also the reducer functions created inside the slice uses the Immer package. Which allows you to write mutated code as the dispatchStartGetHistory reducer function above. You can also return an immutable object as the dispatchFinishGetHistory function above. Here is more information on what you can do with immer inside the reducer functions Redux Immer Page Export the reducer and actions to be used in other files or async Redux function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Add the async function that will fetch the data from the server and call the actions. Here we are adding the getServiceHistory async thunk function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer info The getServiceHistory is a thunk async function which will give you two params (dispatch, getState). The dispatch is what will be use to call the actions. The getState is if you need to pull any value from the current Redux store state.  ","version":"Next","tagName":"h2"},{"title":"Adding the Exported Reducer to the Store​","type":1,"pageTitle":"Add a New Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-the-exported-reducer-to-the-store","content":" Open the store file (src/store/index.ts) and import the exported reducer from the created slice above. And add it to the reducer object in the configureStore function. /src/store/index.ts import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import accessabilityReducer from 'store/slices/accessibilitySlice' import militaryServiceReducer from 'store/slices/militaryServiceSlice' // Creates the store const store = configureStore({ reducer: { accessibility: accessabilityReducer, militaryService: militaryServiceReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt; export default store   ","version":"Next","tagName":"h2"},{"title":"Adding to the Slices Folder Index.ts File.​","type":1,"pageTitle":"Add a New Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-to-the-slices-folder-indexts-file","content":" Open the slices folder index.ts file (src/store/slices/index.ts). Here you are going to add the initialState export and a export everything for the slice created above. /src/store/index.ts import { RootState } from 'store' import { initialAccessibilityState } from 'store/slices/accessibilitySlice' import { initialMilitaryServiceState } from 'store/slices/militaryServiceSlice' export * from './accessibilitySlice' export * from './militaryServiceSlice' export const InitialState: RootState = { militaryService: initialMilitaryServiceState, accessibility: initialAccessibilityState, }   ","version":"Next","tagName":"h2"},{"title":"Using the Slice In a Component​","type":1,"pageTitle":"Add a New Feature State","url":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#using-the-slice-in-a-component","content":" This section will show you how to retrieve the state and dispatch any thunk function in a component.  src/screens/ProfileScreen/MilitaryInformationScreen/MilitaryInformationScreen.tsx import { MilitaryServiceState, getServiceHistory } from 'store/slices/militaryServiceSlice' import { RootState } from 'store' import { useAppDispatch } from 'utils/hooks' import { useSelector } from 'react-redux' const MilitaryInformationScreen: FC = () =&gt; { const dispatch = useAppDispatch() const { serviceHistory, loading, needsDataLoad } = useSelector&lt;RootState, MilitaryServiceState&gt;((s) =&gt; s.militaryService) useEffect(() =&gt; { if (needsDataLoad &amp;&amp; militaryInfoAuthorization &amp;&amp; mhNotInDowntime) { dispatch(getServiceHistory(ScreenIDTypesConstants.MILITARY_INFORMATION_SCREEN_ID)) } }, [dispatch, needsDataLoad, militaryInfoAuthorization, mhNotInDowntime]) const historyItems: Array&lt;DefaultListItemObj&gt; = map(serviceHistory, (service: ServiceData) =&gt; { const branch = t('militaryInformation.branch', { branch: service.branchOfService }) const textLines: Array&lt;TextLine&gt; = [ { text: branch, variant: 'MobileBodyBold', color: 'primaryTitle', }, { text: t('militaryInformation.history', { begin: service.formattedBeginDate, end: service.formattedEndDate }), }, ] return { textLines, testId: `${branch} ${t('militaryInformation.historyA11yLabel', { begin: service.formattedBeginDate, end: service.formattedEndDate, })}`, } }) return ( &lt;VAScrollView {...testIdProps('Military-Information-page')}&gt; &lt;Box mb={theme.dimensions.standardMarginBetween}&gt; &lt;DefaultList items={historyItems} title={t('militaryInformation.periodOfService')} /&gt; &lt;/Box&gt; &lt;TextView {...linkProps}&gt;{t('militaryInformation.incorrectServiceInfo')}&lt;/TextView&gt; &lt;/VAScrollView&gt; ) } export default MilitaryInformationScreen   info To dispatch an action in a component use the useAppDispatch hook from the src/utils/hook.tsx file. To get the current state value for the slice use useSelector function from Redux as shown above. ","version":"Next","tagName":"h2"},{"title":"Single Sign-On","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn","content":"","keywords":"","version":"Next"},{"title":"Architecture​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#architecture","content":" The SSO process begins with the normal authentication flow, with the user signing in via the login screen. When the user taps the Sign in button, the mobile app launches the website's login webpage (https://va.gov/sign-in) in the browser. This webpage is opened with query parameters attached to the URL, specifically code_challenge_method, code_challenge, application, and oauth. In order to have the ability to start SSO sessions, we pass an additional query parameter to the URL, scope, which is set to device_sso. This informs the https://api.va.gov/v0/sign_in/authorize API endpoint that's called by the website that in addition to returning an access token and refresh token, it should return a device secret (device_secret), which can be used to fetch cookies for starting SSO sessions.  Once the device secret is received, it is securely stored in Keychain (iOS) or Keystore (Android).  ","version":"Next","tagName":"h2"},{"title":"Fetching SSO cookies​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#fetching-sso-cookies","content":" To start an SSO session, cookies need to be fetched using the device secret and access token. SSO cookies are fetched from the https://api.va.gov/v0/sign_in/token endpoint with a few parameters, most importantly subject_token (access token) and actor_token (device secret). This endpoint will return a response with the Set-Cookie header, which will contain the SSO cookies vagov_access_token, vagov_refresh_token, vagov_anti_csrf_token, and vagov_info_token. Once received, these cookies are stored in the CookieManager using @react-native-cookies/cookies, and can be used to authenticate the user's session in the WebView. Cookies are fetched when the WebView component is first mounted. (Note: The useSSO prop must be passed to the WebView component in order for SSO cookies to be fetched.)  New cookies are always fetched whenever a new WebView is launched in the app. This is to ensure the SSO cookies used in the WebView are not expired.  ","version":"Next","tagName":"h3"},{"title":"Authenticating the WebView​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#authenticating-the-webview","content":" Once the SSO cookies are stored in the CookieManager, the hasSession field is set to true in localstorage for the WebView. This allows the VA.gov website to recognize that the user's session is authenticated.  ","version":"Next","tagName":"h3"},{"title":"Persisting the device secret​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#persisting-the-device-secret","content":" As mentioned above, the device secret is stored in Keychain/Keystore to ensure its persistence for biometric login. When a user logs into the app with biometrics, the app will use the stored device secret to start SSO sessions. The device secret has an expiration of 45 days, similar to the refresh token.  When the user manually signs out, all sessions spawned with the device secret are revoked via the https://api.va.gov/v0/sign_in/revoke API endpoint. Likewise, whenever the user manually signs in to the mobile app, a new device secret will be retrieved and stored.  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#usage","content":" SSO sessions can easily be started in WebViews within the app. Whenever you have a link/button that navigates to the WebView screen, you can pass the useSSO prop to the screen to start an authenticated SSO session, e.g.  navigateTo('Webview', { url: LINK_TO_OPEN_IN_WEBVIEW, displayTitle: t('webview.vagov'), useSSO: true, })   This will open the WebView screen with an SSO session, allowing the user to access features on the website that require authentication.  ","version":"Next","tagName":"h2"},{"title":"API documentation​","type":1,"pageTitle":"Single Sign-On","url":"/va-mobile-app/docs/Engineering/FrontEnd/SingleSignOn#api-documentation","content":" For more information on API usage for SSO, view the Device SSO Token Exchange documentation. ","version":"Next","tagName":"h2"},{"title":"Remote Config","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/","content":"","keywords":"","version":"Next"},{"title":"Background​","type":1,"pageTitle":"Remote Config","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/#background","content":" Due of the growing complexity of the Flagship app and the types of features we are incorporating, we have an increasing need for the ability to manage aspects of the app remotely. In mobile, as in web, the best way to do this is by incorporating a remote configuration that allows features, behavior, and appearance aspects of the app to be updated without issuing a full app update.  Firebase's Remote Config product allows us to store and modify values remotely, enable or disable certain app features, as well as roll them out to a certain percentage of users at a time.  ","version":"Next","tagName":"h2"},{"title":"Environments​","type":1,"pageTitle":"Remote Config","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/#environments","content":" The values set in Firebase are for production only. Any overrides we'll use for development or in QA will be stored and overridden in our FE code in src/utils/remoteConfig.ts. The app will only fetch values from Firebase if it detects that our ENVIRONMENT === 'Production'. Otherwise it will use the defaults for staging/dev that are set in remoteConfig.ts  ","version":"Next","tagName":"h2"},{"title":"Guidelines​","type":1,"pageTitle":"Remote Config","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/#guidelines","content":" The feature for consideration should be relatively self-contained and require a minimal amount of logic to switch between its enabled and disabled state (e.g. request appointment flow)Addition of a new remote config value should be approved by the mobile platform teamValues should be named using snake case (i.e. my_test_value)Values should be named using the feature by itself, and not any boolean indicating prefix or suffix such as is or enabled  ","version":"Next","tagName":"h2"},{"title":"Data Schema​","type":1,"pageTitle":"Remote Config","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/#data-schema","content":" While the number of remote config values we have will be small, it's important that we set some guidelines about naming conventions and structure of our configurations as they grow.  Firebase allows for 4 different data types:  StringBooleanNumberJSON  For the foreseeable future, we'll only make use of the Boolean data type.  The data schema will be a flat structure consisting of booleans:  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Remote Config","url":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/#example","content":" { &quot;SIS&quot;: true, &quot;prescriptions&quot;: false, &quot;appointment_requests&quot;: false }  ","version":"Next","tagName":"h3"},{"title":"Alerts and progress","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/","content":"Alerts and progress","keywords":"","version":"Next"},{"title":"Unit Tests","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting","content":"","keywords":"","version":"Next"},{"title":"Frameworks​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#frameworks","content":" We run our unit tests with Jest and React Native Testing Library. RNTL provides a set of utility functions that make React Native component testing easier and more robust. RNTL enables many of the best practices described here.  ","version":"Next","tagName":"h2"},{"title":"Test coverage​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#test-coverage","content":" All React components should have at least one unit test. The ideal quantity of test coverage depends on component type. Examining component types from most coverage to least:  Shared components are isolated bundles of code which many other components consume. Because shared components are widely used, unit tests should exercise them very thoroughly, including checking all edge cases and error states. (Maximum coverage)Screen child components are usually not shared and are tightly bound to other components in the screen. Unit tests for these child components should focus on complicated logic that's prone to regressions, while avoiding duplicate coverage between parent and child components. Tests should cover edge cases and error states, but need not check every possible combination of props and state. (High coverage)Entire screens are typically complex, integrating multiple components along with Redux state, routing, and 3rd party modules. We lean on E2E tests to fully cover screens, so unit tests for screens should be limited in scope to avoid duplicating E2E test coverage. Also if a child component of a screen already has its own unit tests, there's no need to duplicate those tests in the screen itself. (Medium coverage)  Note that while a high coverage percentage is good, it doesn't ensure tests are complete and correct. It's important to think critically and implement tests that cover the key cases a user might encounter.  ","version":"Next","tagName":"h2"},{"title":"More information​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#more-information","content":" Google's Code Coverage Best PracticesHow to know what to test (Kent C Dodds)  ","version":"Next","tagName":"h3"},{"title":"Targeting by rendered text, label, or role​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#targeting-by-rendered-text-label-or-role","content":" ❌ Avoid targeting child props based on numeric order:  expect(textView[5].props.children).toEqual(`${t('prescription.rxNumber')}: 3636691`)   ✅ Instead, target rendered text, accessibility label, or role:  expect(screen.getByText(`${t('prescription.rxNumber')}: 3636691`)).toBeTruthy() expect(screen.getByLabelText(`${t('prescription.rxNumber.a11yLabel')} 3636691`)).toBeTruthy() expect( screen.getByRole('checkbox', { name: t('prescription.history.orderIdentifier', { idx: 1, total: 3 }), checked: true, }), ).toBeTruthy()   ","version":"Next","tagName":"h2"},{"title":"Why?​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#why","content":" This method reduces test fragility because moving an element into/out of a child component, changing props, or adding/removing sibling components does not break the test. Targeting accessibility label or role ensures screen readers read the correct label and/or role to the user, preventing a11y regressions. Finally, this type of test is simpler to read and write because it ignores implementation details, focusing instead on what the user expects to see in rendered output.  ","version":"Next","tagName":"h3"},{"title":"More information​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#more-information-1","content":" React Testing Library's guiding principlesSome thoughts on why this RTL approach is an improvement over EnzymeThe Dangers of Shallow Rendering  ","version":"Next","tagName":"h3"},{"title":"Targeting by translated text​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#targeting-by-translated-text","content":" ❌ Avoid using actual strings to target elements:  fireEvent.press(screen.getByRole('tab', { name: &quot;Make sure you're in the right health portal&quot; }))   ✅ Instead, call the translation function as you do in the component under test:  fireEvent.press(screen.getByRole('tab', { name: t('cernerAlertSM.header') }))   ","version":"Next","tagName":"h2"},{"title":"Why?​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#why-1","content":" Using the translation function reduces test fragility. Minor wording changes won't break the test.  ","version":"Next","tagName":"h3"},{"title":"Firing events​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#firing-events","content":" ❌ Avoid calling a callback function in a prop to simulate user interaction:  testInstance.findByType(Pressable).props.onPress()   ✅ Instead, fire a press event:  fireEvent.press(screen.getByText(t('cancel')))   ✅ Fire a changeText event:  fireEvent.changeText(screen.getByText(t('phone')), '123-456-7890')   ✅ Fire a scroll event:  fireEvent.scroll(screen.getByText('scroll-view'), { nativeEvent: { contentOffset: { y: 200 } }, })   ","version":"Next","tagName":"h2"},{"title":"Why?​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#why-2","content":" Calling a callback function in a prop only checks that the function runs. It doesn’t test that the element is visible to the user and that it’s wired up correctly. It’s also fragile because refactoring the component might change the props and break the test. Firing an event resolves these concerns, which also apply to text fields and scrolling.  ","version":"Next","tagName":"h3"},{"title":"Exercising key functionality​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#exercising-key-functionality","content":" ❌ Avoid tests that just check large quantities of static text:  expect(textView[6].props.children).toEqual('What’s next') expect(textView[7].props.children).toEqual( &quot;We're reviewing your refill request. Once approved, the VA pharmacy will process your refill.&quot;, ) expect(textView[8].props.children).toEqual( 'If you have questions about the status of your refill, contact your provider or local VA pharmacy.', )   ✅ Instead, focus on tests that check important functionality:  describe('on click of the &quot;Go to inbox&quot; link', () =&gt; { it('calls useRouteNavigation and updateSecureMessagingTab', () =&gt; { fireEvent.press(screen.getByRole('link', { name: t('secureMessaging.goToInbox') })) expect(navigate).toHaveBeenCalled() expect(updateSecureMessagingTab).toHaveBeenCalled() }) })   ","version":"Next","tagName":"h2"},{"title":"Why?​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#why-3","content":" Each test should add value by serving as a focused warning that something important has failed. Testing that a sequence of TextViews renders certain text doesn't tell us much. It's also fragile because the smallest text change breaks the test. Testing important and/or complex logic is more beneficial because that’s where high-impact regressions typically occur. In addition, tests for complicated logic serve as a form of documentation, letting engineers know how the code is supposed to function.  ","version":"Next","tagName":"h3"},{"title":"More information​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#more-information-2","content":" See #2 of The 7 Sins of Unit Testing about why more assertions can be worse, not better  ","version":"Next","tagName":"h3"},{"title":"Testing from the user’s perspective​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#testing-from-the-users-perspective","content":" Consider what the user expects to do and see, then write tests that simulate it. For example, let's say the user expects to press “Select all”, then see two checked checkboxes and relevant text.  ✅ This test tells the user's story and checks it at the same time:  it('toggles items when &quot;Select all&quot; is pressed', () =&gt; { fireEvent.press(screen.getByText(t('select.all'))) expect(screen.getByRole('checkbox', { name: t('one'), checked: true })).toBeTruthy() expect(screen.getByRole('checkbox', { name: t('two'), checked: true })).toBeTruthy() expect(screen.getByText(t('selectedOutOfTotal', { selected: 2, total: 2 }))).toBeTruthy() })   ","version":"Next","tagName":"h2"},{"title":"Why?​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#why-4","content":" By taking the user's point of view, user-focused tests help prevent the most damaging regressions, ones which prevent users from completing their desired tasks. But because implementation details aren't baked into the test, engineers retain the flexibility to refactor as needed without causing test failures.  ","version":"Next","tagName":"h3"},{"title":"More information​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#more-information-3","content":" Why it's important to focus on the end user and avoid the &quot;test user&quot;  ","version":"Next","tagName":"h3"},{"title":"Test File Naming​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#test-file-naming","content":" The test file should live in the same location as its associated component with the same file name with .test included after the component name.  ClaimsScreen.tsx will have a test file named ClaimsScreen.test.tsx  ","version":"Next","tagName":"h2"},{"title":"Running Tests​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#running-tests","content":" Run unit tests with yarn testCoverage can be found under coverage/lcov-report/index.html  ","version":"Next","tagName":"h2"},{"title":"Test Structure​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#test-structure","content":" Unit tests are structured into context, describe, and it functions that provide context to the tests as they are run. These are presented as a readable heirarchy, making it easy to follow the output of the tests and identify where failing tests are and what they were testing.  context('MyScreen', () =&gt; { describe('when loading is set to true', () =&gt; { it('should show loading screen', async () =&gt; { // testing }) it('should not show a menu', async () =&gt; { // testing }) }) })   The context is typically the name of the component or screen, the primary identifier of what this file is testing. describe provides a specific circumstance or set of properties. it explains exactly what is being tested. A context can have as many describe or it functions as is necessary to describe the flow of the test.  ","version":"Next","tagName":"h2"},{"title":"Mocking​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#mocking","content":" Components often interact with other pieces of code that are not the responsibility of that unit test, but rely on them to function. To handle these cases, we use mocks to guarantee inputs and outputs of things like navigation actions, API calls, external libraries, hooks, or anything else the component might need but does not control the logic of.  Mocking libraries and functions are done through jest mocks. Global mocks can be found at jest/testSetup.ts but can be overridden within the individual test files.  ","version":"Next","tagName":"h2"},{"title":"Mocking Hooks​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-hooks","content":" One of the most commonly mocked parts of the app are hooks related to things like navigation, theme, and alerts. This is done by creating a spy object at the top of the file that will then be set in the jest mocks to allow it to be used within the tests.  const mockNavigationSpy = jest.fn() jest.mock('utils/hooks', () =&gt; ({ ...jest.requireActual&lt;typeof import('utils/hooks')&gt;('utils/hooks'), useRouteNavigation: () =&gt; mockNavigationSpy, }))   This block of code will mock the entirety of the hooks util file using the original implementations except for the useRouteNavigation hook, which is instead returning a spy object that the unit test can use to verify it was called with the correct arguments.  navigateToPaymentMissingSpy = jest.fn() when(mockNavigationSpy) .mockReturnValue(() =&gt; {}) .calledWith('PaymentMissing') .mockReturnValue(navigateToPaymentMissingSpy)   This will create another object navigateToPaymentMissingSpy that will be returned if the hook is called with the parameters 'PaymentMissing'  // Do something that will trigger a navigation to the PaymentMissing screen expect(navigateToPaymentMissingSpy).toHaveBeenCalled()   ","version":"Next","tagName":"h3"},{"title":"Mocking API Calls​","type":1,"pageTitle":"Unit Tests","url":"/va-mobile-app/docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-api-calls","content":" Components will often make API calls which can be mocked via the redux actions that call them.  jest.mock('store/slices', () =&gt; ({ ...jest.requireActual&lt;typeof import('store/slices')&gt;('store/slices'), downloadLetter: jest.fn(() =&gt; ({ type: '', payload: '' })), }))   This mocks the downloadLetter action from the letters slice responsible for downloading letters, to do nothing. This will let the unit test validate it has been called without the test itself trying to actually download anything.  // Do something that triggers downloading of a letter with some set of options const letterOptions = { chapter35Eligibility: true, militaryService: true, monthlyAward: true, serviceConnectedDisabilities: true, serviceConnectedEvaluation: true, } expect(downloadLetter).toBeCalledWith(LetterTypeConstants.benefitSummary, letterOptions)   This checks to see that the downloadLetter action was called with the expected parameters ","version":"Next","tagName":"h3"},{"title":"Loading indicator","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/LoadingComponent","content":"Loading indicator See documentation in Design System.","keywords":"","version":"Next"},{"title":"Alert","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AlertBox","content":"Alert See documentation in Design System.","keywords":"","version":"Next"},{"title":"Snackbar","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/Snackbar","content":"Snackbar See documentation in Design System.","keywords":"","version":"Next"},{"title":"AccordionCollapsible","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AccordionCollapsible","content":"AccordionCollapsible A common component to show content inside of a collapsible accordion. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionheader\tReactNode Yes\tcomponent to display as header of accordion expandedContent\tReactNode Yes\tcomponent to display only when the accordion is expanded testID\tstring No\ttestID for the header a11yHint\tstring No\ta11yHint for the header collapsedContent\tReactNode No\tcomponent to display on when the accordion is collapsed customOnPress\t(expandedValue?: boolean) =&gt; void No\tcustom on press call if more action is needed when expanding/collapsing the accordion expandedInitialValue\tboolean No\tsets the initial value of expanded if an accordion should already be expanded on render noBorder\tboolean No\tgets rid of border of TextArea so the top and bottom borders don't double up in message threads when accordion is opened headerRef\tRef&lt;View&gt; No\tRef for the header section","keywords":"","version":"Next"},{"title":"MessageAlert","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/MessageAlert","content":"MessageAlert Common component to show a message alert when saving or sending a secure message PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfocusOnError\tboolean No\tOptional boolean for determining when to focus on error alert boxes. hasValidationError\tboolean No\tsets if there is validation errors saveDraftAttempted\tboolean No\tsets if attempted to save a draft scrollViewRef\tRefObject&lt;ScrollView&gt; No\toptional ref for parent scroll view errorList\t{ [key: number]: string; } No\toptional list of alertbox failed reasons, supplied by FormWrapper component replyTriageError\tboolean No\tsets if triage error returned from api","keywords":"","version":"Next"},{"title":"Link","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/ClickForActionLink","content":"Link See documentation in Design System.","keywords":"","version":"Next"},{"title":"Buttons and links","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/","content":"","keywords":"","version":"Next"},{"title":"Choose the right component: buttons vs. links​","type":1,"pageTitle":"Buttons and links","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/#choose-the-right-component-buttons-vs-links","content":" Many people struggle to select the right element when choosing between a button or link. Making the right choice can help make an interface easier to use, especially for people who use assistive technology. Buttons and links are the primary ways users interact with information in a native mobile app.  Remember: Links are for navigation and buttons are for action.  ","version":"Next","tagName":"h2"},{"title":"Accessibility problem being solved​","type":1,"pageTitle":"Buttons and links","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/#accessibility-problem-being-solved","content":" In general, links should look like links and buttons should look like buttons. This improves usability and accessibility by:  setting honest expectations of interaction behaviorproviding clear signifiers of affordancescreating experiences that are consistent with native mobile app standards  Assistive technology users may choose to navigate by buttons or links, depending on what they’re looking for. It’s vital that our content meets users’ expectations. For example, links coded as buttons could make those links hard to find.  ","version":"Next","tagName":"h3"},{"title":"Ideal state​","type":1,"pageTitle":"Buttons and links","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/#ideal-state","content":" Buttons are: Used for actions, including: Submitting a formOpening a fullscreen subtaskChanging the state of something (such as “Back / Continue” buttons on a form)Expanding something (like an accordion) Created using the button componentStyled to look like buttons and should not include link signifiers, such as underlines Links are: Used for navigation: Navigation bars (bottom and header)Links to child screensLinks to large panelsLinks to external websitesLinks to PDFs Created using the link componentStyled to look like links and shouldn’t include button signifiers, such as borders  ","version":"Next","tagName":"h3"},{"title":"Should this be a button or link?​","type":1,"pageTitle":"Buttons and links","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/#should-this-be-a-button-or-link","content":"   Is the purpose of the control to navigate elsewhere? Yes Examples: Going to a page; Going to a static file, like a PDFIs data submitted before navigation? Yes Examples: Sending data to a server or saving client side before moving to a new page, like a formMake it a Button No Does it need to stand out from surrounding design elements? No Examples: Link in body text; Link in the footer of a form; Links in a menuMake it a Link Yes Examples: A link to a page which will begin a new form; A link on a page with an existing button as the primary action that’s needs more visual weight than other links Is this on web or mobile? Mobile Ask your friendly neighborhood accessibility expert Web Make it an Action Link No Is the purpose of this control to generate data for a file? Examples: Creating a PDF from a web page; Creating a PDF from data on the serverYes Make it a Link No Make it a Button ","version":"Next","tagName":"h2"},{"title":"BackButton","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/BackButton","content":"BackButton Button used by the stack navigation to go back to the previous screen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tthe onPress function for the back button canGoBack\tboolean Yes\ta boolean indicating if the user has a screen to go back to; if false, the back button will be hidden label\tBackButtonLabel Yes\ttranslation key to use for the display text, as well as the testID for the component a11yHint\tstring No\toptional param to add accessibility hint to back button focusOnButton\tboolean\ttrue\tNo\tboolean to specify if we want accesibility to focus on the back button backButtonTestID\tstring No\toption testID webview\tboolean No\t","keywords":"","version":"Next"},{"title":"Menus","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Master component​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#master-component","content":"   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#examples-1","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Menus​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#when-to-use-menus","content":" To display a list of 2-7 choices on a temporary surface, such as a set of overflow actions.Use menus when there is a space constraint.  ","version":"Next","tagName":"h3"},{"title":"When to consider something else​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#when-to-consider-something-else","content":" If there are less than 2 actions available to the user, consider using a Button.  ","version":"Next","tagName":"h3"},{"title":"Behavior​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#behavior","content":" A menu appears when a user taps an interactive element such as an icon.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#placement","content":" Menus typically appear below the element that generates them.Menus appear in front of all other permanent UI elements.  ","version":"Next","tagName":"h3"},{"title":"Content considerations​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#content-considerations","content":" The VA mobile app currently uses menus as a list of actions versus a list of options or navigation. As such, overflow menus are essentially buttons. Therefore, VA Design System can be referred to for content guidance. In addition to VA Design System's content considerations for buttons, the following guidelines are recommended:  Be concise: While VA Design System recommends keeping button labels to 35 characters, for VA mobile app overflow menus, keep labels to 24 characters or less regardless of word count. Article words (a, an, the) can be omitted.Prioritize menu items: Put menu items used most at the start of the list.Consider menu length: Be careful not to put too many items in a menu.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#accessibility-considerations","content":" All list items should be coded as buttons and not as links.Users should be able to: Navigate to, open, and close a menu and with assistive technologyNavigate between and select menu items with assistive technology For list items with text and icon, the accessibility label should be marked as decorative to avoid redundant verbalizations.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#related","content":" Menus - HIGMenus - Material Design  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Menus","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus#code-usage","content":" Link to Storybook coming soon ","version":"Next","tagName":"h2"},{"title":"Flagship Component Documentation Guide","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/documentation-guide","content":"","keywords":"","version":"Next"},{"title":"Who does the work?​","type":1,"pageTitle":"Flagship Component Documentation Guide","url":"/va-mobile-app/docs/Flagship design library/Components/documentation-guide#who-does-the-work","content":" Updating the documentation for a new component should be a collaboration between the design system team and the Flagship team when the component either currently lives within the design system or will be moved there in the future. It is recommended that you reach out to the Design System team to determine if a new component will remain in the Flagship team’s library or if it will be moved to the design system.  If a new component is exclusive to the VAHB app and will not become part of the design system, the Flagship team member should move forward with detailed documentation of the component. When possible, please align with the current documentation outline that is being used by the design system team for consistency (see the button component as an example).  note Guidance on writing documentation and templates for the documentation are included in the “Documentation resources” section below.  If the new component will eventually live within the design system, please coordinate with the Design System team so that they can update the design system documentation with the new component. The Flagship team member should document how the component is used with the VAHB mobile app, while the Design System team will focus on documenting how the component can be used universally.  Design system team documents: The various ways a component can be used. Flagship team documents: How the mobile app uses the component specifically (where, when, etc.).  ","version":"Next","tagName":"h2"},{"title":"Where does the documentation live?​","type":1,"pageTitle":"Flagship Component Documentation Guide","url":"/va-mobile-app/docs/Flagship design library/Components/documentation-guide#where-does-the-documentation-live","content":" We have an area on the documentation site for the Flagship design library. Within that section, there is another section for Components. Currently, most of the documentation is engineering-focused and is not used to document the components (or their usage) themselves. Please use this area of the documentation site to house this documentation moving forward.  Reference the list in the “What should we document?” section below as a guide to what should be updated (including the name of the page itself) vs. what should be added as a new page on the documentation site.  ","version":"Next","tagName":"h2"},{"title":"What should we document?​","type":1,"pageTitle":"Flagship Component Documentation Guide","url":"/va-mobile-app/docs/Flagship design library/Components/documentation-guide#what-should-we-document","content":" The design system team is responsible for documenting any components where the master lives (or will eventually live) within their library. The Flagship team is responsible for documenting any components where the master lives within their library.  However, in many cases, the master component lives within the design system’s library (or will in the future) and the Flagship team will use instances of the master component in a specific way. In those cases, the Flagship team should document how they are using the component within the VA: Health and Benefits mobile app.  ","version":"Next","tagName":"h2"},{"title":"Documentation resources​","type":1,"pageTitle":"Flagship Component Documentation Guide","url":"/va-mobile-app/docs/Flagship design library/Components/documentation-guide#documentation-resources","content":" We have several resources available to assist with writing documentation.  Writing component documentation (documentation / guidance)Documentation template (in Github) Can copy the markdown out of the template Documentation template (in Google Docs) Can use this and then convert to markdown ","version":"Next","tagName":"h2"},{"title":"Errors","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/","content":"Errors","keywords":"","version":"Next"},{"title":"Button","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/VAButton","content":"Button See documentation in Design System.","keywords":"","version":"Next"},{"title":"Crisis Line button","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"Crisis Line button","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Crisis Line button​","type":1,"pageTitle":"Crisis Line button","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton#when-to-use-crisis-line-button","content":" Crisis Line button button currently displays on the following screens: LoginHomeContact VACategory screens, including Benefits, Health, and Payments We don't include it on all screens to prevent banner fatigue / semantic satiation.It should be considered on screens where there is a likelihood the Veteran is there because they're in crisis.If the button is the only number on the page, it's possible it will be used as a general call center line.  ","version":"Next","tagName":"h3"},{"title":"Behavior​","type":1,"pageTitle":"Crisis Line button","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton#behavior","content":" When the component is tapped, it opens a full panel with more information.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Crisis Line button","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton#placement","content":" Component should appear near the top of the screen, directly below the top navigation bar.  ","version":"Next","tagName":"h3"},{"title":"Code usage​","type":1,"pageTitle":"Crisis Line button","url":"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CrisisLineButton#code-usage","content":"    Crisis Line Button component   PropertiesExampleSource CodeAccessibility This component does not have props defined ","version":"Next","tagName":"h2"},{"title":"CallHelpCenter","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/CallHelpCenter","content":"CallHelpCenter A common component to show the help center contact info for when an error happens PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed titleText\tstring No\toptional text for the title titleA11yHint\tstring No\toptional title a11y hint errorText\tstring No\toptional text for the error errorA11y\tstring No\toptional a11y hint for the error callPhone\tstring No\toptional phone number","keywords":"","version":"Next"},{"title":"BasicError","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/BasicError","content":"BasicError A common component to show an error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed messageText\tstring Yes\tmessage to display headerText\tstring No\ttext to appear in bold headerA11yLabel\tstring No\taccessibility hint for the header buttonA11yHint\tstring No\thint for the try again button label\tstring No\tlabel for button and accessibility title","keywords":"","version":"Next"},{"title":"Layout and organization","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/","content":"Layout and organization","keywords":"","version":"Next"},{"title":"NetworkConnectionError","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/NetworkConnectionError","content":"NetworkConnectionError A common component to show an alert for when it is a network error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed","keywords":"","version":"Next"},{"title":"DowntimeError","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/DowntimeError","content":"DowntimeError Common component to show an alert when the service is down PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors","keywords":"","version":"Next"},{"title":"ErrorComponent","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Errors/ErrorComponent","content":"ErrorComponent Main error handling component. This component will show the proper screen according to the type of error. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors onTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed error\tError No\toptional Error","keywords":"","version":"Next"},{"title":"CollapsibleView","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView","content":"CollapsibleView CollapsibleView that on click reveals content, which is hidden again on another click PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\ttext displayed on the touchable textColor\tstring | number | symbol No\toptional color for the touchable text contentInTextArea\tboolean\ttrue\tNo\toptional param that renders the child content outside text area when set to false (defaults to true) a11yHint\tstring No\toptional a11y hint showInTextArea\tboolean\ttrue\tNo\tWhether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. * testID\tstring No\tOption Test ID","keywords":"","version":"Next"},{"title":"LargeNavButton","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton","content":"LargeNavButton Reusable large navigation button PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontitle\tstring Yes\tstring for header and used to create testID for accessibility subText\tstring No\tstring secondary text that seats on the second row subTextA11yLabel\tstring No\ta11y string secondary text that seats on the second row a11yHint\tstring No\tstring for accessibility hint onPress\t() =&gt; void Yes\tfunction to be called when press occurs showLoading\tboolean No\tShow loading animation in place of subtext testID\tstring No\tOptional test ID for button","keywords":"","version":"Next"},{"title":"DefaultList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/DefaultList","content":"DefaultList Component to show a list composed of lines of display text built using TextLines PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tDefaultListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item selectable\tboolean No\tif true the text will be selectable title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title rightTitleText\tstring No\toptional text on the right on same row of title rightTitleTextA11yLabel\tstring No\toptional a11y hint for the rightTitleText","keywords":"","version":"Next"},{"title":"List header","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#default","content":"   ","version":"Next","tagName":"h3"},{"title":"Variations​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#variations","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#usage","content":" ","version":"Next","tagName":"h2"},{"title":"How this component works​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#how-this-component-works","content":" When creating a list, the list header is always present for high-level information and interactions.  ","version":"Next","tagName":"h3"},{"title":"Behavior​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#behavior","content":" Center: If the user selects the Cancel or Done button, the panel will close.Multi-select: If the user selects the Checkbox, all items within the list will be selected.  ","version":"Next","tagName":"h3"},{"title":"Choosing between variations​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#choosing-between-variations","content":" Default: If you only need to include a text-based titleCenter: If the list appears above the screen content like a full panel. This variation includes a title, Cancel button, and Done button.Multi-select: If multiple items with in the list can be selected  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#placement","content":" The list header always appears at the top of a list.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#instances-of-this-component-in-production","content":" PrescriptionsClaimsPayments  ","version":"Next","tagName":"h3"},{"title":"Accessibility considerations​","type":1,"pageTitle":"List header","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader#accessibility-considerations","content":" The component should be called out as a menu item. Its state (selected/unselected) and place in the list should be called out. Example: Selected. Acetaminophen 25MG Tab. 4 refills remaining. Menu item. 1 of 5. ","version":"Next","tagName":"h2"},{"title":"List","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/","content":"List A common component for showing a list of &lt;ListItem&gt;. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title rightTitleText\tstring No\toptional text on the right on same row of title rightTitleTextA11yLabel\tstring No\toptional a11y hint for the rightTitleText","keywords":"","version":"Next"},{"title":"BaseListItem","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/BaseListItem","content":"BaseListItem Reusable component for menu items that take up the full width of the screen that is touchable. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontestId\tstring No\ttest id string also used for the accessibility label a11yHint\tstring Yes\tThe a11y hint text a11yValue\tstring No\toptional a11y text value a11yRole\tAccessibilityRole No\toptional accessibility role. By default it will be button a11yState\tAccessibilityState No\toptional accessibility state onPress\t() =&gt; void No\tonPress callback decorator\tButtonDecoratorType No\tDecorator Type to use decoratorProps\tListItemDecoratorProps No\tOptional props to be passed to the decorator children\tany No\tOptional child elements to use instead of listOfText if you need to do special styling backgroundColor\tBackgroundVariant No\tOptional background color for an individual item activeBackgroundColor\tBackgroundVariant No\tOptional active background color for an individual item claimsRequestNumber\tnumber No\tOptional file request number for the number indicator fileUploaded\tboolean No\tOptional file request if file was loaded to show check mark minHeight\tnumber No\tOptional min height detoxTestID\tstring No\ttest id string for detox","keywords":"","version":"Next"},{"title":"SelectionList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SelectionList","content":"SelectionList PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tSelectionListItemObj[] Yes\tlist of items to show onSelectionChange\t(totalSelected: Record&lt;string, boolean&gt;) =&gt; void No\tmethod to be triggered when the selected value change","keywords":"","version":"Next"},{"title":"Nametag","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#default","content":"   ","version":"Next","tagName":"h3"},{"title":"Variations​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#variations","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Nametag​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#when-to-use-nametag","content":" The Nametag component only appears on Home and Profile screens.  ","version":"Next","tagName":"h3"},{"title":"How this component works​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#how-this-component-works","content":" For honorably discharged Veterans, the nametag is an interactive / tappable element that includes a brief overview of a Veterans' information (legal name, branch of service badge, and branch of service) in addition to the &quot;Proof of Veteran status&quot; copy. When tapped, the nametag should launch the Veteran status panel. Example: Kimberly Washington, [display: United States Army badge], United States Army, Proof of Veteran status For dishonorably discharged Veterans, the &quot;Proof of Veteran status&quot; copy should be hidden and the nametag should no longer be interactive / tappable. Example: Kimberly Washington, [display: United States Army badge], United States Army If a Veteran has served in more than one branch, the most recent branch appears in the Nametag.  ","version":"Next","tagName":"h3"},{"title":"Placement​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#placement","content":" Component should appear near the top of the screen.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#instances-of-this-component-in-production","content":" On Home screenOn Profile screen  ","version":"Next","tagName":"h3"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#accessibility-considerations","content":" For honorably discharged Veterans, screen readers should announce the nametag component as a button and read out the content within the nametag including: first name, lastname, branch of service, and proof of Veteran status as a single announcement.For dishonorably discharged Veterans, screen readers should read out the content within the nametag component including: first name, last name, and branch of service in a single announcement. The screen reader should not announce the nametag as a button and it should not be tappable. To avoid redundancy, the service badge should not be read aloud and is for decorative purposes only.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Nametag","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag#related","content":" Nametag banner on VA.gov. The Nametag is present on My VA and profile to signify &quot;this is my stuff.&quot; It does not appear on pages containing general VA info or on screens that have a general info state and an authenticated state. It serves as a way to differentiate between the two page types. ","version":"Next","tagName":"h2"},{"title":"MessageList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/MessageList","content":"MessageList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tMessageListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title rightTitleText\tstring No\toptional text on the right on same row of title rightTitleTextA11yLabel\tstring No\toptional a11y hint for the rightTitleText","keywords":"","version":"Next"},{"title":"Navigation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/","content":"Navigation The VA Mobile app uses primary and secondary navigation components.","keywords":"","version":"Next"},{"title":"SimpleList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SimpleList","content":"SimpleList Component to show a list with one line of text per item PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tSimpleListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title rightTitleText\tstring No\toptional text on the right on same row of title rightTitleTextA11yLabel\tstring No\toptional a11y hint for the rightTitleText","keywords":"","version":"Next"},{"title":"Primary navigation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Primary/","content":"Primary navigation The primary navigation pattern for the VA mobile app is a standard tab/navigation bar. For a detailed description, see Navigation model templates. Also included in this section are engineering components that make up the navigation model templates.","keywords":"","version":"Next"},{"title":"Multi-touch card","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#default","content":"   ","version":"Next","tagName":"h3"},{"title":"Variations​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#variations","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Multi-touch card​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#when-to-use-multi-touch-card","content":" The component should be used when a list item includes a lot of data and requires 2-3 touch targets.  ","version":"Next","tagName":"h3"},{"title":"How this component works​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#how-this-component-works","content":" Component should use established color patterns.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#instances-of-this-component-in-production","content":" Prescriptions  ","version":"Next","tagName":"h3"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#accessibility-considerations","content":" The card's type and place in the list (ex. prescription 1 of 1) should be called out first by the screen reader. The screen reader should call out each individual touch target by its respective type (button, link; etc) along with its respective a11y hint.Keyboards and Voice Access/Voice Control should navigate through each line item separatelyKeyboards and Voice Access/Voice Control should navigate each touch area separatelyTouch target UI should have clear and distinguishable areas/borders  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Multi-touch card","url":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard#code-usage","content":"     PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionorderIdentifier\tstring No\tread by screen readers to identify the cards place in a list mainA11yLabel\tstring No\taccessibility label for the main section mainContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; Yes\tcontent to display in the main section bottomOnPress\t() =&gt; void No\tcalled when the bottom button is pressed bottomContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; No\tcontent to display in the bottom button bottomA11yHint\tstring No\thint for the bottom button action bottomA11yLabel\tstring No\taccessibility label for the bottom section ","version":"Next","tagName":"h2"},{"title":"Secondary navigation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/","content":"Secondary navigation Secondary navigation components are the navigation elements that allow the user to explore data presented by the app's features (within the categories provided by the primary navigation pattern).","keywords":"","version":"Next"},{"title":"HeaderTitle","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Primary/HeaderTitle","content":"HeaderTitle Common component used for the navigation header title PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfocusRef\tRef&lt;View&gt; No\tref for this component headerTitle\tstring No\tsets the header title accessible\tboolean\ttrue\tNo\tsets if it is accessible testID\tstring No\tsets the test id accessabilityLabel\tstring No\tsets the accessibility label","keywords":"","version":"Next"},{"title":"Carousel","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Carousel","content":"Carousel A common component to set up a carousel of screens and display a carousel tab at the bottom of the screen, which displays a skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction&lt;&quot;translation&quot;, undefined&gt; Yes\tuseTranslations t function to translate the labels","keywords":"","version":"Next"},{"title":"CarouselTabBar","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/CarouselTabBar","content":"CarouselTabBar A common component with the carousel tab bar content. Displays skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionnavigation\tNavigationHelpers&lt;ParamListBase, BottomTabNavigationEventMap&gt; Yes\tthe tab navigators navigation helpers onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction&lt;&quot;translation&quot;, undefined&gt; Yes\tuseTranslations t function to translate the labels screenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item","keywords":"","version":"Next"},{"title":"NavigationTabBar","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Primary/NavigationTabBar","content":"NavigationTabBar Component for the bottom tab navigation PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionstate\tTabNavigationState&lt;ParamListBase&gt; Yes\tthe tab navigators current state navigation\tNavigationHelpers&lt;ParamListBase, BottomTabNavigationEventMap&gt; Yes\tthe tab navigators navigation helpers translation\tTFunction&lt;&quot;translation&quot;, undefined&gt; Yes\tuseTranslations t function to translate the labels","keywords":"","version":"Next"},{"title":"Segmented control","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/SegmentedControl","content":"Segmented control See documentation in Design System.","keywords":"","version":"Next"},{"title":"Form elements","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/","content":"Form elements","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Overview","content":"Overview Components are interactive and non-interactive UI elements that can be grouped together or presented individually. They are independent, reusable chunks of a user interface that define a visual style and/or micro-interaction. A component is the smallest unit of measure within a design system. They can be considered concrete, a finite list: Button, accordion, table, etc. The VA Mobile app is designed using components to help to ensure consistency across the app's features. This section includes component descriptions, examples and resources (UX and ENG). VA Mobile app components can also be found in Figma in the VA Mobile app Design Library. See also VA Design System Components.","keywords":"","version":"Next"},{"title":"Selection and input","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/","content":"Selection and input","keywords":"","version":"Next"},{"title":"Pagination","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Master component​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#master-component","content":"   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#examples-1","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#accessibility-considerations","content":" Refer to the VA Design System for accessibility considerationsAll interactive tappable elements should be coded as links and not as buttons.When additional context might be needed, we should apply a11yLabels to the links.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#related","content":" Pagination - VA Design SystemPagination - USWDS  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Pagination","url":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination#code-usage","content":"    A common component for showing pagination on the page. Displays previous arrow, next arrow, and copy message based on current page and item.   PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionpage\tnumber Yes\tpage number totalEntries\tnumber Yes\ttotal number of items pageSize\tnumber Yes\tpageSize onPrev\t() =&gt; void Yes\tfunction to be called when previous is selected onNext\t() =&gt; void Yes\tfunction to be called when next is selected tab\tstring No\toptional tab if screen has tabs for analytics ","version":"Next","tagName":"h2"},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Checkbox","content":"Checkbox See documentation in Design System.","keywords":"","version":"Next"},{"title":"Radio button","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/RadioButton","content":"Radio button See documentation in Design System.","keywords":"","version":"Next"},{"title":"FormAttachments","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments","content":"FormAttachments A common component for form attachments, displays Attachments heading with helper link, already attached items with remove option, and an optional large button. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionremoveOnPress\t(attachment: any) =&gt; void No\tcallback called on click of remove link for an attachment buttonLabel\tstring No\tbutton label buttonPress\t() =&gt; void No\tbutton onPress testID\tstring No\toptional TestID attachmentsList\tany[] No\tlist of current attachments","keywords":"","version":"Next"},{"title":"Switch","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Switch","content":"Switch A common component for the react native switch component PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionaccessible\tboolean No\tWhen true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible. accessibilityActions\treadonly Readonly&lt;{ name: string; label?: string; }&gt;[] No\tProvides an array of custom actions available for accessibility. accessibilityLabel\tstring No\tOverrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space. aria-label\tstring No\tAlias for accessibilityLabel https://reactnative.dev/docs/view#accessibilitylabel https://github.com/facebook/react-native/issues/34424 accessibilityRole\tAccessibilityRole No\tAccessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on. accessibilityState\tAccessibilityState No\tAccessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on. aria-busy\tboolean No\talias for accessibilityState see https://reactnative.dev/docs/accessibility#accessibilitystate aria-checked\tboolean | &quot;mixed&quot; No aria-disabled\tboolean No aria-expanded\tboolean No aria-selected\tboolean No accessibilityHint\tstring No\tAn accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label. accessibilityValue\tAccessibilityValue No\tRepresents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars, it contains range information (minimum, current, and maximum). aria-valuemax\tnumber No aria-valuemin\tnumber No aria-valuenow\tnumber No aria-valuetext\tstring No onAccessibilityAction\t(event: AccessibilityActionEvent) =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action. importantForAccessibility\t&quot;auto&quot; | &quot;yes&quot; | &quot;no&quot; | &quot;no-hide-descendants&quot; No\t[Android] Controlling if a view fires accessibility events and if it is reported to accessibility services. aria-hidden\tboolean No\tA value indicating whether the accessibility elements contained within this accessibility element are hidden. aria-modal\tboolean No role\tRole No\tIndicates to accessibility services to treat UI component like a specific role. accessibilityLabelledBy\tstring | string[] No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android aria-labelledby\tstring No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android accessibilityLiveRegion\t&quot;none&quot; | &quot;polite&quot; | &quot;assertive&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion aria-live\t&quot;polite&quot; | &quot;assertive&quot; | &quot;off&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion accessibilityElementsHidden\tboolean No\tA Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden to the screen reader. @platform ios accessibilityViewIsModal\tboolean No\tA Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver. @platform ios onAccessibilityEscape\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers). @platform ios onAccessibilityTap\t() =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture. @platform ios onMagicTap\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the magic tap gesture. @platform ios accessibilityIgnoresInvertColors\tboolean No\thttps://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios @platform ios accessibilityLanguage\tstring No\tBy using the accessibilityLanguage property, the screen reader will understand which language to use while reading the element's label, value and hint. The provided string value must follow the BCP 47 specification (https://www.rfc-editor.org/info/bcp47). https://reactnative.dev/docs/accessibility#accessibilitylanguage-ios @platform ios onPress\t(value: boolean) =&gt; void Yes\tcallback called on value change of the switch on\tboolean No\toptional value of switch, updated with onPress testID\tstring No\toptional testID of switch a11yHint\tstring No\toptional accessibilityHint","keywords":"","version":"Next"},{"title":"RadioGroup","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/RadioGroup","content":"RadioGroup A common component to display radio button selectors for a list of selectable items PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionoptions\tradioOption&lt;T&gt;[] Yes\tZero based array of options. An option is an object with both a value which is the relevant data, and a label which is displayed as a string to represent the value. value\tT No\tCurrently selected option. An initial value can be used or this can be left undefined which will have nothing initially selected. onChange\t(val: T) =&gt; void Yes\tCall back function that passes the newly selected option's value as an argument to. disabled\tboolean\tfalse\tNo\toptional boolean that disables the radio group when set to true error\tstring No\toptional error to display isRadioList\tboolean No\toptional boolean to indicate to use the radio buttons in a list radioListTitle\tstring No\toptional text to show as the radio list title","keywords":"","version":"Next"},{"title":"Pickers","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/","content":"Pickers","keywords":"","version":"Next"},{"title":"FormWrapper","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormWrapper","content":"FormWrapper A common component to wrap forms in that handles error states of each field PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfieldsList\tFormFieldType&lt;T&gt;[] Yes\tlist of form field objects to display onSave\t() =&gt; void Yes\tcallback called when onSaveClicked is true and there are no field errors onSaveClicked\tboolean Yes\tboolean that when set to true calls the form validation and set field errors if they exist, otherwise it calls onSave setOnSaveClicked\t(value: boolean) =&gt; void Yes\tcallback that updates the onSaveClicked prop setFormContainsError\t(containsError: boolean) =&gt; void No\toptional callback that sets to true if the form currently has an error resetErrors\tboolean No\toptional boolean that resets all field errors when set to true setResetErrors\t(value: boolean) =&gt; void No\toptional callback to set the resetErrors prop. must be set when resetErrors is set. setErrorList\t(errors: { [key: number]: string; }) =&gt; void No\toptional callback to return a list of errors and keys for alertBox functionality","keywords":"","version":"Next"},{"title":"PickerList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/PickerList","content":"PickerList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tany[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":"","version":"Next"},{"title":"VASelector","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector","content":"VASelector A common component to display a checkbox with text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectorType\tSelectorType\tSelectorType.Checkbox\tNo\trender checkbox or radio button selected\tboolean Yes\twhen true displays the filled checkbox/radio , when false displays the empty checkbox/radio onSelectionChange\t(selected: boolean) =&gt; void Yes\tsets the value of selected on click of the checkbox/radio labelKey\tstring Yes\ttranslated labelKey displayed next to the checkbox/radio labelArgs\t{ [key: string]: string; } No\toptional arguments to pass in with the labelKey during translation disabled\tboolean No\toptional boolean that disables the VASelector/radio when set to true a11yLabel\tstring No\toptional accessibilityLabel a11yHint\tstring No\toptional accessibilityHint error\tstring No\toptional error to display for the checkbox setError\t(value?: string) =&gt; void No\toptional callback to set the error message isRequiredField\tboolean No\toptional boolean that marks the component as required testID\tstring No\tOptional TestID","keywords":"","version":"Next"},{"title":"Tags","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/","content":"Tags","keywords":"","version":"Next"},{"title":"Text views","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/","content":"Text views","keywords":"","version":"Next"},{"title":"Text input","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#default","content":"   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#examples-1","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#usage","content":" Refer to the VA Design System for usage guidance  ","version":"Next","tagName":"h2"},{"title":"Content considerations​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#content-considerations","content":" Refer to the VA Design System for content considerations  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#accessibility-considerations","content":" Refer to the VA Design System for accessibility considerations  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Text input","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput#code-usage","content":" Link to Storybook coming soon     Text input with a label   PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioninputType\tVATextInputTypes Yes\tType of the input. Will determine the keyboard used value\tstring No\tInitial value of the input. If blank it will show the placeholder labelKey\tstring No\ti18n key for the label onChange\t(val: string) =&gt; void Yes\tHandle the change in input value maxLength\tnumber No\tMaximum length of the input onEndEditing\t() =&gt; void No\tHandle input once the user is done typing testID\tstring No\toptional testID for the overall component inputRef\tRefObject&lt;TextInput&gt; No\toptional ref value isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updates input styles to error state isTextArea\tboolean No\toptional boolean that when true displays a text area rather than a single line text input setInputCursorToBeginning\tboolean No\toptional boolean to set the cursor to the beginning of a string value ","version":"Next","tagName":"h2"},{"title":"Tag","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#default","content":"   ","version":"Next","tagName":"h3"},{"title":"Variations​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#variations","content":"   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#usage","content":" ","version":"Next","tagName":"h2"},{"title":"When to use Tags​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#when-to-use-tags","content":" When there is a list of information with different statuses for different items  ","version":"Next","tagName":"h3"},{"title":"How this component works​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#how-this-component-works","content":" Only one tag should be used per instance.The trailing icon is optional, as the status definition will not apply in all use cases. When the icon is used, the tag becomes a tappable button and opens a full panel.  ","version":"Next","tagName":"h3"},{"title":"Choosing between variations​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#choosing-between-variations","content":" Static vs Interactive Static: To indicate a status that does not need further explanation or definitionInteractive: When you need to provide additional context for a status, use the interactive version with the icon. Status Informative (blue): To indicate neutral, default content. Consider the Informative status for new content with expected changes in status and trailing actions to take, like an Active prescription.Success (green): To indicate completed, finalized content. Consider the Success status for content with no further outstanding tasks, like a Confirmed appointment, or an In-Progress prescription refill.Indeterminate/Unresolved (yellow): To indicate pending actions or content that is still in-progress. Consider the Indeterminate status for content either the system or user can resolve, like a Pending appointment, or an On-Hold prescription refill.Inactive (gray): To indicate content that has no further actions. Consider the Inactive status for &quot;dead ends&quot;, such as a Read message, a Canceled appointment, or an Expired prescription.  ","version":"Next","tagName":"h3"},{"title":"Instances of this component in production​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#instances-of-this-component-in-production","content":" In Prescription cardsIn Appointment cards  ","version":"Next","tagName":"h3"},{"title":"Content considerations​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#content-considerations","content":" Use common VA language, words, or terms for copy.Keep copy to as few words as possible (1-2 words). There are exceptions where 3 or 4 words must be used in cases of VA-specific phrases or words.The trailing info icon is optional. Not all tags will need one for further definition of the copy.Use sentence case (i.e., Sentence case, not Title Case). Exceptions include words/phrases that use Title Case in other VA tools/sites.The trailing icon should clearly describe the type of content that it will display. For example, use the info icon when additional information will display on tap.  ","version":"Next","tagName":"h2"},{"title":"Accessibility considerations​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#accessibility-considerations","content":" If user has magnification settings, the trailing info-icon should scale along with the font.The icon is decorative, so it does not need to be read by a screen reader. If the icon is included, the tag should be read as a button.  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#related","content":" Tag - VA Design SystemTag - USWDSChips - Material Design  ","version":"Next","tagName":"h2"},{"title":"Code usage​","type":1,"pageTitle":"Tag","url":"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag#code-usage","content":"    Common component to show a text inside a tag   PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\tMessage to be shown on the tag labelType\tLabelTagTypes Yes\tDefines the color and look of the tag a11yLabel\tstring No\tOptional accessibility label onPress\t() =&gt; void No\tOptional method called when tag is pressed a11yHint\tstring No\tOptional accessibility hint if there is an on press a11yRole\tAccessibilityRole No\tOptional role to override the default role of button ","version":"Next","tagName":"h2"},{"title":"TextArea","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextArea","content":"TextArea Text area block for content PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void No\tonPress callback noBorder\tboolean No\tprop to remove border testID\tstring No\toptional testID","keywords":"","version":"Next"},{"title":"TextLines","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextLines","content":"TextLines Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(TextLine | TextLineWithIconProps)[] No\tList of text for the button selectable\tboolean No\tif true the text will be selectable","keywords":"","version":"Next"},{"title":"VABulletList","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/VABulletList","content":"VABulletList Displays the list of text as a bulleted list PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(string | VABulletListText)[] Yes\tlist of text to display in a bulleted list paragraphSpacing\tboolean No\toptional paragraph spacing bulletColor\tBackgroundVariant No\toptional bullet color","keywords":"","version":"Next"},{"title":"TextLineWithIcon","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextLineWithIcon","content":"TextLineWithIcon Common component to show an icon with a line of text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioniconProps\tIconProps &amp; { isOwnLine?: boolean; } No\tProps for icon you want to display in this line of text text\tstring Yes\tstring to display variant\tstring | number | symbol No\tsets the variant of the text, if not set defaults to MobileBody color\tstring | number | symbol No\tsets the text to the specified color, if not specified defaults to primary textAlign\t&quot;center&quot; | &quot;left&quot; | &quot;right&quot; No\talignment of the text textTag\t{ labelType: LabelTagTypes; } No\tsets the text to be a tag a11yLabel\tstring No mt\tstring | number No\tset margin top of this component mb\tstring | number No\tset margin bottom of this component","keywords":"","version":"Next"},{"title":"VAModalPicker","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/VAModalPicker","content":"VAModalPicker A common component to display a picker for the device with an optional label PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectedValue\tstring Yes\tCurrently selected item from list of options onSelectionChange\t(selectValue: string) =&gt; void Yes\tCalled when the selected value is changed onClose\t() =&gt; void No\tCalled when the cancel button is pressed pickerOptions\tPickerItem[] Yes\tlist of items of containing types label and value for each option in the picker labelKey\tstring No\ti18n key for the text label next the picker field disabled\tboolean No\toptional boolean that disables the picker when set to true isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updated picker styles to error state includeBlankPlaceholder\tboolean No\tIf true, will include a blank option at the top of the list with a blank value displayButton\tboolean\tfalse\tNo\trenders a button instead of form field buttonText\tstring No\ti18n key text for the name of the button confirmBtnText\tstring No\ti18n key text for the picker confirm button showModalByDefault\tboolean No\tshows the modal by default testID\tstring No\tOptional TestID for scrollView cancelTestID\tstring No\tOptional TestID for cancel button confirmTestID\tstring No\tOption TestID for apply button","keywords":"","version":"Next"},{"title":"Uncategorized","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/","content":"Uncategorized","keywords":"","version":"Next"},{"title":"AppVersionAndBuild","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/AppVersionAndBuild","content":"AppVersionAndBuild Common component to display the apps version and build number PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontextColor\tstring | number | symbol\tbodyText\tNo\tcolor of the text textWeight\tstring | number | symbol\tMobileBody\tNo\tfont weight of the text","keywords":"","version":"Next"},{"title":"TextView","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextView","content":"TextView A common component for styling text in the application. It also conforms to the Box properties so you don't need to wrap it with a Box view for margins / paddings PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionaccessible\tboolean No\tWhen true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible. accessibilityActions\treadonly Readonly&lt;{ name: string; label?: string; }&gt;[] No\tProvides an array of custom actions available for accessibility. accessibilityLabel\tstring No\tOverrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space. aria-label\tstring No\tAlias for accessibilityLabel https://reactnative.dev/docs/view#accessibilitylabel https://github.com/facebook/react-native/issues/34424 accessibilityRole\tAccessibilityRole No\tAccessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on. accessibilityState\tAccessibilityState No\tAccessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on. aria-busy\tboolean No\talias for accessibilityState see https://reactnative.dev/docs/accessibility#accessibilitystate aria-checked\tboolean | &quot;mixed&quot; No aria-disabled\tboolean No aria-expanded\tboolean No aria-selected\tboolean No accessibilityHint\tstring No\tAn accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label. accessibilityValue\tAccessibilityValue No\tRepresents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars, it contains range information (minimum, current, and maximum). aria-valuemax\tnumber No aria-valuemin\tnumber No aria-valuenow\tnumber No aria-valuetext\tstring No onAccessibilityAction\t(event: AccessibilityActionEvent) =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action. importantForAccessibility\t&quot;auto&quot; | &quot;yes&quot; | &quot;no&quot; | &quot;no-hide-descendants&quot; No\t[Android] Controlling if a view fires accessibility events and if it is reported to accessibility services. aria-hidden\tboolean No\tA value indicating whether the accessibility elements contained within this accessibility element are hidden. aria-modal\tboolean No role\tRole No\tIndicates to accessibility services to treat UI component like a specific role. accessibilityLabelledBy\tstring | string[] No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android aria-labelledby\tstring No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android accessibilityLiveRegion\t&quot;none&quot; | &quot;polite&quot; | &quot;assertive&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion aria-live\t&quot;polite&quot; | &quot;assertive&quot; | &quot;off&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion accessibilityElementsHidden\tboolean No\tA Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden to the screen reader. @platform ios accessibilityViewIsModal\tboolean No\tA Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver. @platform ios onAccessibilityEscape\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers). @platform ios onAccessibilityTap\t() =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture. @platform ios onMagicTap\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the magic tap gesture. @platform ios accessibilityIgnoresInvertColors\tboolean No\thttps://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios @platform ios accessibilityLanguage\tstring No\tBy using the accessibilityLanguage property, the screen reader will understand which language to use while reading the element's label, value and hint. The provided string value must follow the BCP 47 specification (https://www.rfc-editor.org/info/bcp47). https://reactnative.dev/docs/accessibility#accessibilitylanguage-ios @platform ios children\tReactNode No\treact nodes passed to the component hitSlop\tnumber | Insets No\tThis defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels. If a Touchable view has a height of 20 the touchable height can be extended to 40 with hitSlop={{top: 10, bottom: 10, left: 0, right: 0}} NOTE The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views. id\tstring No\tUsed to reference react managed views from native code. needsOffscreenAlphaCompositing\tboolean No\tWhether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior. The default (false) falls back to drawing the component and its children with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value. This default may be noticeable and undesired in the case where the View you are setting an opacity on has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background). Rendering offscreen to preserve correct alpha behavior is extremely expensive and hard to debug for non-native developers, which is why it is not turned on by default. If you do need to enable this property for an animation, consider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame). If that property is enabled, this View will be rendered off-screen once, saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU. onLayout\t(event: LayoutChangeEvent) =&gt; void No\tInvoked on mount and layout changes with {nativeEvent: { layout: {x, y, width, height}}}. pointerEvents\t&quot;none&quot; | &quot;box-none&quot; | &quot;box-only&quot; | &quot;auto&quot; No\tIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class: .box-none { pointer-events: none; } .box-none * { pointer-events: all; } box-only is the equivalent of .box-only { pointer-events: all; } .box-only * { pointer-events: none; } But since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes, we opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform. removeClippedSubviews\tboolean No\tThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews, most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound. The subviews must also have overflow: hidden, as should the containing view (or one of its superviews). style\tStyleProp&lt;ViewStyle&gt; No testID\tstring No\tUsed to locate this view in end-to-end tests. Optional TestID nativeID\tstring No\tUsed to reference react managed views from native code. collapsable\tboolean No\tViews that are only used to layout their children or otherwise don't draw anything may be automatically removed from the native hierarchy as an optimization. Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy. collapsableChildren\tboolean No\tSetting to false prevents direct children of the view from being removed from the native view hierarchy, similar to the effect of setting `collapsable={false}` on each child. renderToHardwareTextureAndroid\tboolean No\tWhether this view should render itself (and all of its children) into a single hardware texture on the GPU. On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale: in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation. focusable\tboolean No\tWhether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard. tabIndex\t0 | -1 No\tIndicates whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard. See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex for more details. Supports the following values: - 0 (View is focusable) - -1 (View is not focusable) shouldRasterizeIOS\tboolean No\tWhether this view should be rendered as a bitmap before compositing. On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children; for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view and quickly composite it during each frame. Rasterization incurs an off-screen drawing pass and the bitmap consumes memory. Test and measure when using this property. isTVSelectable\tboolean No\t*(Apple TV only)* When set to true, this view will be focusable and navigable using the Apple TV remote. @platform ios hasTVPreferredFocus\tboolean No\t*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view. @platform ios tvParallaxShiftDistanceX\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0. @platform ios tvParallaxShiftDistanceY\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0. @platform ios tvParallaxTiltAngle\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 0.05. @platform ios tvParallaxMagnification\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 1.0. @platform ios onStartShouldSetResponder\t(event: GestureResponderEvent) =&gt; boolean No\tDoes this view want to become responder on the start of a touch? onMoveShouldSetResponder\t(event: GestureResponderEvent) =&gt; boolean No\tCalled for every touch move on the View when it is not the responder: does this view want to &quot;claim&quot; touch responsiveness? onResponderEnd\t(event: GestureResponderEvent) =&gt; void No\tIf the View returns true and attempts to become the responder, one of the following will happen: onResponderGrant\t(event: GestureResponderEvent) =&gt; void No\tThe View is now responding for touch events. This is the time to highlight and show the user what is happening onResponderReject\t(event: GestureResponderEvent) =&gt; void No\tSomething else is the responder right now and will not release it onResponderMove\t(event: GestureResponderEvent) =&gt; void No\tThe user is moving their finger onResponderRelease\t(event: GestureResponderEvent) =&gt; void No\tFired at the end of the touch, ie &quot;touchUp&quot; onResponderStart\t(event: GestureResponderEvent) =&gt; void No onResponderTerminationRequest\t(event: GestureResponderEvent) =&gt; boolean No\tSomething else wants to become responder. Should this view release the responder? Returning true allows release onResponderTerminate\t(event: GestureResponderEvent) =&gt; void No\tThe responder has been taken from the View. Might be taken by other views after a call to onResponderTerminationRequest, or might be taken by the OS without asking (happens with control center/ notification center on iOS) onStartShouldSetResponderCapture\t(event: GestureResponderEvent) =&gt; boolean No\tonStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable. However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true. onMoveShouldSetResponderCapture\t(event: GestureResponderEvent) =&gt; boolean No\tonStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable. However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true. onTouchStart\t(event: GestureResponderEvent) =&gt; void No onTouchMove\t(event: GestureResponderEvent) =&gt; void No onTouchEnd\t(event: GestureResponderEvent) =&gt; void No onTouchCancel\t(event: GestureResponderEvent) =&gt; void No onTouchEndCapture\t(event: GestureResponderEvent) =&gt; void No onPointerEnter\t(event: PointerEvent) =&gt; void No onPointerEnterCapture\t(event: PointerEvent) =&gt; void No onPointerLeave\t(event: PointerEvent) =&gt; void No onPointerLeaveCapture\t(event: PointerEvent) =&gt; void No onPointerMove\t(event: PointerEvent) =&gt; void No onPointerMoveCapture\t(event: PointerEvent) =&gt; void No onPointerCancel\t(event: PointerEvent) =&gt; void No onPointerCancelCapture\t(event: PointerEvent) =&gt; void No onPointerDown\t(event: PointerEvent) =&gt; void No onPointerDownCapture\t(event: PointerEvent) =&gt; void No onPointerUp\t(event: PointerEvent) =&gt; void No onPointerUpCapture\t(event: PointerEvent) =&gt; void No m\tNumOrStrPx No\tset margin of this component mt\tNumOrStrPx No\tset margin top of this component mr\tNumOrStrPx No\tset margin right of this component mb\tNumOrStrPx No\tset margin bottom of this component ml\tNumOrStrPx No\tset margin left of this component mx\tNumOrStrPx No\tset margin right and left of this component my\tNumOrStrPx No\tset margin top and bottom of this component p\tNumOrStrPx No\tset padding of this component pt\tNumOrStrPx No\tset padding top of this component pr\tNumOrStrPx No\tset padding right of this component pb\tNumOrStrPx No\tset padding bottom of this component pl\tNumOrStrPx No\tset padding left of this component px\tNumOrStrPx No\tset padding right and left of this component py\tNumOrStrPx No\tset padding top and bottom of this component top\tstring | number No\tsets the number of logical pixels to offset the top edge of this component left\tstring | number No\tsets the number of logical pixels to offset the left edge of this component right\tstring | number No\tsets the number of logical pixels to offset the right edge of this component bottom\tstring | number No\tsets the number of logical pixels to offset the bottom edge of this component position\t&quot;relative&quot; | &quot;absolute&quot; No\tsets the positioning to relative or absolute of this component display\t&quot;none&quot; | &quot;flex&quot; No\tsets the display type of this component flex\tnumber No\tsets the flex property of this component flexGrow\tnumber No\tdescribes how any space within a container should be distributed among its children along the main axis flexShrink\tnumber No\tflexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis flexWrap\t&quot;wrap&quot; | &quot;nowrap&quot; | &quot;wrap-reverse&quot; No\tcontrols whether children can wrap around after they hit the end of a flex container flexDirection\t&quot;row&quot; | &quot;column&quot; No\tcontrols which directions children of a container go gap\tnumber No\tsets the gaps between rows and columns overflow\t&quot;hidden&quot; | &quot;visible&quot; | &quot;scroll&quot; No\tcontrols how children are measured and displayed justifyContent\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; | &quot;space-between&quot; No\taligns children in the main direction alignItems\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; No\taligns children in the cross direction alignSelf\t&quot;auto&quot; | FlexAlignType No\tcontrols how a child aligns in the cross direction, overriding the alignItems of the parent width\tstring | number No\tsets the width of this component minWidth\tstring | number No\tsets the min width of this component height\tstring | number No\tsets the height of this component minHeight\tstring | number No\tsets the min height of this component maxHeight\tstring | number No\tsets the max height of this component textAlign\t&quot;center&quot; | &quot;left&quot; | &quot;right&quot; No\taligns the text of this component backgroundColor\tBackgroundVariant No\tsets the background color of this component opacity\tnumber No\tsets the opacity of this component borderWidth\tBorderWidths No\tsets the border width of this component borderColor\tBorderColorVariant No\tsets the border color of this component borderStyle\tBorderStyles No\tsets the border style of this component borderBottomWidth\tBorderWidths No\tsets the bottom border's width of this component borderBottomColor\tBorderColorVariant No\tsets the bottom border's color of this component borderTopWidth\tBorderWidths No\tsets the top border's width of this component borderTopColor\tBorderColorVariant No\tsets the top border's color of this component borderRightWidth\tBorderWidths No\tsets the right border's width of this component borderRightColor\tBorderColorVariant No\tsets the right border's color of this component borderLeftWidth\tBorderWidths No\tsets the left border's width of this component borderLeftColor\tBorderColorVariant No\tsets the left border's color of this component borderRadius\tstring | number No\tsets the border's radius of this component borderRadiusTop\tstring | number No\tsets the border radius just for the top of the component borderRadiusBottom\tstring | number No\tsets the border radius just for the bottom of the component color\tstring No\tDefaults to primary text variant\tstring | number | symbol No\tDefaults to regular textTransform\t&quot;none&quot; | &quot;uppercase&quot; | &quot;lowercase&quot; | &quot;capitalize&quot; No\tThe text transformation textDecoration\t&quot;none&quot; | &quot;underline&quot; | &quot;line-through&quot; | &quot;underline line-through&quot; No\ttext decoration textDecorationColor\tstring No\ttext decoration color onPress\t() =&gt; void No\tonPress callback allowFontScaling\tboolean No\tif false font won't scale if screen font size changes selectable\tboolean\tfalse\tNo\tif true the text will be selectable numberOfLines\tnumber No\tif set, sets the number of lines the text will render on. if the text exceeds the line amount, it will ellipsis maxFontSizeMultiplier\tnumber No\tMax size for font when user adjusts their font scaling paragraphSpacing\tboolean\tfalse\tNo\tif true apply paragraphSpacing, it overrides the mb if supplied","keywords":"","version":"Next"},{"title":"VAImage","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAImage","content":"VAImage A common component to display static images. New images need to be placed in VAImge/image and in Xcode under VAMobile/Images.xcassets. Examples/details can be found in VAImage component. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionname\t&quot;PaperCheck&quot; Yes\tenum name of the image a11yLabel\tstring Yes\taccessibilityLabel for the overall component marginX\tnumber Yes\tmargins for the image","keywords":"","version":"Next"},{"title":"NotificationManager","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager","content":"NotificationManager notification manager component to handle all push logic PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":"","version":"Next"},{"title":"VAIcon","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon","content":"VAIcon A common component to display assets (SVGs). For all icons in the SVG definitions, on the primary/only path: - Set `fill` to `#000` to inherit VAIcon's fill color prop If the SVG icon is duotone, additionally: - Set `color` to `#fff` on the top level svg (not path) - Set `fill` to `currentColor` on the secondary path to inherit VAIcon's fill2 color prop If the SVG icon uses stroke, additionally: - Set `stroke` to `#00F` to inherit VAIcon's stroke color prop Example icons of each classification: - One layer: HomeSelected.svg - Duotone: CircleCheckMark.svg - Stroke: RadioEmpty.svg PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":"","version":"Next"},{"title":"Color","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Foundation/color","content":"Color See documentation in Design System.","keywords":"","version":"Next"},{"title":"Content style guide","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide","content":"","keywords":"","version":"Next"},{"title":"Voice and tone​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#voice-and-tone","content":" We follow the VA design system content principles. In following these principles, we create consistent, clear, and user-centered content that is based on Veteran feedback.  In addition, we follow VA plain language standards to help Veterans and their families find and understand the information they need.  Since we create content for health-related features, we also follow the VA content guidelines for health content.  ","version":"Next","tagName":"h2"},{"title":"Accessible and inclusive language​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#accessible-and-inclusive-language","content":" We write for all Veterans and those who care for them. Therefore, we use people-first language that is inclusive of the wide range of abilities and experiences of our users. We avoid words that are insensitive to the disabilities faced by our users. For example, we don’t use “see” since a number of our users are blind or low-vision. We also avoid idioms, such as “at your fingertips” or “give an arm or a leg.” Not only are idioms often insensitive to Veterans’ experience, but also idioms don’t follow plain language standards.  Resources to consider:  Gov UK inclusive communicationsGeorgetown University best practices guide (pdf)Microsoft guideline  ","version":"Next","tagName":"h2"},{"title":"Grammar​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#grammar","content":" We follow VA.gov content style guide rules regarding grammar with the following adjustments:  ","version":"Next","tagName":"h2"},{"title":"Capitalization​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#capitalization","content":" For native actions, we use title case for iOS and all caps for Android.For interface buttons, we use sentence case.  ","version":"Next","tagName":"h3"},{"title":"Times and time zones​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#times-and-time-zones","content":" Due to default formatting in React Native, when times/time zones aren't hardcoded, our formatting differs from VA.gov. For example, React Native formats as AM and PM (both letters capitalized and no punctuation) and EST (three-letter format).When times and timezones are hardcoded, we follow the VA.gov content style guide.  ","version":"Next","tagName":"h3"},{"title":"Word choice, spelling, and naming conventions​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#word-choice-spelling-and-naming-conventions","content":" ","version":"Next","tagName":"h2"},{"title":"Content briefs​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#content-briefs","content":" We use content briefs to ensure consistent word choice and usage with other VA teams. VA.gov's content team creates content briefs, sometimes in collaboration with the VA Mobile App content designer.  ","version":"Next","tagName":"h3"},{"title":"Word List​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#word-list","content":" We use standard American English spelling in Merriam-Webster Dictionary. The words on the VA.gov word list are exceptions or need clarification.  ","version":"Next","tagName":"h3"},{"title":"Naming conventions​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#naming-conventions","content":" We follow VA.gov content style guide’s rules for naming and labels for tools, products, benefits, offices, and programs. In most cases, VA.gov will have already established a name for a tool, benefit, etc. For cases in which we'd like to suggest a different name or need help with naming an app-specific feature, we work closely with VA.gov's content team to ensure alignment.  ","version":"Next","tagName":"h3"},{"title":"Error messages​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#error-messages","content":" VA.gov’s design system includes a section on how to help users recover from errors. It details the structure, style, and tone for error and informational messages.  When writing an error message, we use clear, direct, and actionable language.  The VA.gov content style guide includes an error message dictionary/reference tool for different scenarios.  ","version":"Next","tagName":"h2"},{"title":"New content​","type":1,"pageTitle":"Content style guide","url":"/va-mobile-app/docs/Flagship design library/Content/content-style-guide#new-content","content":" VA Mobile App team has a dedicated content designer. This person works with VA Sitewide Content team to implement their overall strategy and ensure alignment between the app and VA.gov. In some cases, the content design may request support from the Sitewide Content team by submitting an issue ticket on Github. ","version":"Next","tagName":"h2"},{"title":"Icons","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Foundation/icons","content":"Icons See documentation in Design System.","keywords":"","version":"Next"},{"title":"Spacing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Foundation/spacing","content":"Spacing See documentation in Design System.","keywords":"","version":"Next"},{"title":"Typography","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Foundation/typography","content":"Typography See documentation in Design System.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Patterns/Overview","content":"Overview Patterns are best practice design solutions for common user actions, tasks, and experiences. Patterns used in the VA: Health and Benefits mobile app include (but are not limited to: HapticsConfirmation messages See also: VA Design PatternsUSWDS PatternsHuman Interaface Guidelines Patterns","keywords":"","version":"Next"},{"title":"Confirmation messages","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#usage","content":" Use an action sheet (for both iOS and Android) to present the user with information related to that action when:  The effect of the action is minor (but not routine), and/orThe action is destructive (but not major), and/orThere’s a need to present more than 2 choices related to an intended action. Example: Deleting a draft, saving a draft, or going back to edit a draft  Use an alert (for iOS) or dialogue (for Android) to present the user with critical information related to that action when:  The effect of the action is major (like deleting an account), and/orA user has taken an uncommon action that they can’t undo  Brief messages informing users of a process that an app has performed or will perform (for example: that a message was sent successfully) can be confirmed using a Snackbar.  ","version":"Next","tagName":"h2"},{"title":"Appearance Logic for cancellation confirmations​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#appearance-logic-for-cancellation-confirmations","content":" For fullscreen subtasks with a Cancel button in the top left corner of the screen, we’ve established the following rules:  If a user is on a fullscreen subtask but does not input any information (such as in a form field) or does not make any significant changes and taps Cancel, then do not show a confirmation message.If a user is on a fullscreen subtask and does input information or makes a significant change and taps Cancel, then show a confirmation message.  What constitutes a “significant” change? A significant change can include (but is not limited to) a change the user has made to the screen that may not be easily recalled by the user if removed or deleted.  Not significant: User selects the checkbox on the “Claim evaluation” screen confirming they’ve submitted all evidence for their claim and that they’re ready to VA to make a decision on their claim.Significant: User selects multiple prescriptions (but maybe not all) to request refills for on the “Refill request” screen.  ","version":"Next","tagName":"h3"},{"title":"Anatomy​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#anatomy","content":" Both action sheets and modal alert/dialogs contain the following elements:  Title (required): Asks the user to confirm what action they intended to take.Message (optional): Adds more detail and/or context to the actions and their consequences.Buttons (required): At least two buttons provide the user with choices, including: A primary button that confirms the intended action and moves the user forward. For alerts/dialogs with two actions, the primary button appears on the right. For alerts/dialogs with more than two actions, the primary button appears at the top of the button stack.For action sheets, the primary button appears at the top of the button stack. It is red if destructive. A secondary button that lets the user reconsider the action and exit the confirmation message. For alerts/dialogs with two actions, the secondary button appears on the left. For alerts/dialogs with more than two actions, the primary button appears at the bottom of the button stack.For action sheets, the secondary button always appears on the bottom. Additional buttons may be included if there are additional actions a user could take related to an intended action. These appear between the primary and secondary buttons, vertically stacked. For example, when a user taps the Cancel button after starting a new message, we need them to confirm whether they want to delete this message they started (primary, destructive action), save it as a draft (additional action), or go back to editing the message (secondary, cancel action).If the additional action is already a button option on the screen, there’s no need to include it in the action sheet. For example, if a user taps the Cancel button after making changes to their preferred name, we only need to ask them if they’d like to delete the changes they’ve made (destructive action) or go back to editing their preferred name (cancel action). There is no need to ask them if they’d like to save their changes (additional action) because that option is on the screen, and the user has given no indication they intended to save.  ","version":"Next","tagName":"h3"},{"title":"Examples in practice​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#examples-in-practice","content":" Action sheet​      Alert/dialog​    ","version":"Next","tagName":"h2"},{"title":"Content guidelines​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#content-guidelines","content":" Title (required)​  Don’t use extraneous words or phrases, like “Are you sure you want to…” or “Do you want to…”Keep the title to 1 question or phrase. If you need to say more, use the supporting text section.In a few edge cases, a statement or sentence works better than asking a question.Add a question mark for questions. Don’t use a period for a sentence.  Message (optional)​  Use this section to let users know about other consequences that will occur (that aren’t obvious from the title copy) if they take a certain action.Try to word the title in a way that avoids the need for supporting text.  Button/s (required)​  Keep button copy to 1 or 2 words at most.Copy should answer the question that the title copy asked in a way that is clear and descriptive (avoid using “OK” or “Cancel,” as the meaning can be unclear).  ","version":"Next","tagName":"h2"},{"title":"Accessibility​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#accessibility","content":" Screen reader announces an action sheet as an alert as soon as the user taps the button that prompts the action sheet.Screen reader will announce it as Alerts as soon as the user taps onto a button that prompts the destructive action.Each row, destructive or other action will be announced as a button “Title of row,” button.Ensure title is designed and built-in.Ensure that the total number of characters is short enough for dynamic text to enlarge for those with low vision.  ","version":"Next","tagName":"h2"},{"title":"Related components​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#related-components","content":" Snackbar (Figma Design Library)  ","version":"Next","tagName":"h2"},{"title":"Engineering resources​","type":1,"pageTitle":"Confirmation messages","url":"/va-mobile-app/docs/Flagship design library/Patterns/confirmation-messages#engineering-resources","content":" TBD ","version":"Next","tagName":"h2"},{"title":"Haptic Feedback","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Patterns/haptics","content":"","keywords":"","version":"Next"},{"title":"Principles​","type":1,"pageTitle":"Haptic Feedback","url":"/va-mobile-app/docs/Flagship design library/Patterns/haptics#principles","content":" When it comes to haptics, less is more. Too much vibration can become annoying, distracting or desensitizing. When haptics are implemented in a thoughtful way, they can provide valuable feedback and a better overall experience for users. Haptics should be:  Complementary: By establishing a clear relationship between haptics and their corresponding triggers, users will understand their usage. When the app's visual, auditory, and tactile feedback sync, the user experience is more consistent and natural.Voluntary: We allow users the option to turn off haptics within their device settings if they choose to do so. The app is still usable when haptics are turned off.Purposeful: We avoid needless alerts. Haptics are powerful and should only be used to provide valuable and actionable information.Understated: We want to ensure the users can get valuable information without interrupting their actions. Haptics should not complement content, not compete with it.Mild: We do not rely on the intensity of the haptic feedback alone. The intensity of the haptics should compliment the trigger.Simple: Keep it simple for accessibility. While haptics greatly benefit deaf and low vision users, they may also trigger issues for those with sensory disabilities or PTSD.  ","version":"Next","tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"Haptic Feedback","url":"/va-mobile-app/docs/Flagship design library/Patterns/haptics#support","content":" Not all devices or operating systems support haptics.Each device and operating system have their own location and verbiage for haptic settings.Not all operating systems support the same haptic patterns.  ","version":"Next","tagName":"h2"},{"title":"Implementation​","type":1,"pageTitle":"Haptic Feedback","url":"/va-mobile-app/docs/Flagship design library/Patterns/haptics#implementation","content":" Haptics in the VA Health and Benefits app work if the Veteran's device haptic settings are enabled.Haptics are implemented on a component level.We use a 3 pattern since it is available in our React Native library and available across multiple operating systems.  Component\tOccurrence\tPattern\tOSSnackbar\tAppearance\t3 Pattern\tAndroid / iOS Toggle\tInteraction\tHeavy Toggle\tAndroid / iOS Error Alert Box\tAppearance\t3 Pattern\tAndroid / iOS Warning Alert Box\tAppearance\t3 Pattern\tAndroid / iOS ","version":"Next","tagName":"h2"},{"title":"Home Screen","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Templates/Home","content":"","keywords":"","version":"Next"},{"title":"Anatomy:​","type":1,"pageTitle":"Home Screen","url":"/va-mobile-app/docs/Flagship design library/Templates/Home#anatomy","content":" The VA mobile app’s personalized home screen combines content that is variable, fixed, personalized, and evergreen to deliver an experience that surfaces value to Veterans and supports understanding of the app’s capabilities, regardless of what a Veteran’s interactions are with the VA. To do this in a way that's predictable and performant, the Home screen displays a mix of content types within predetermined locations (zones).  Having a mix of content, arranged into intentional zones, ensures that users:  Always see elements that help demonstrate the current &amp; future value of the appAlways see &quot;personalized&quot; information even if they don't have any active tasks at a given moment (users don’t experience an empty home screen in the absence of tasks)See the things that are likely relevant and valuable to them firstGet a consistent information structure for screen readers to tab through that is present even if load times lagSee things that are important to proper app functioning when necessary  ","version":"Next","tagName":"h2"},{"title":"Zones​","type":1,"pageTitle":"Home Screen","url":"/va-mobile-app/docs/Flagship design library/Templates/Home#zones","content":" The VA Mobile app Home screen zones ensure that the most impactful content items are getting the proper placement in the screen's hierarchy while also handling a variety of user contexts and technical situations.    Zone 1: Mission-critical app info​  What it is: Area for alerts and announcements from the app. It informs users when there’s something they need to do to ensure that the app is functioning and informs users of new features Module appearance logic: Variable &amp; optional, can be personalized or universal: Modules appear to all users when in applicable situations. Otherwise, do not show. What lives in this zone: Encouraged update (MVP)What’s new (MVP) Guidelines for future module inclusion:Information is appropriate for inclusion on the home screen within the mission-critical app info section when it: Conveys information that’s necessary for the app to function properlyConveys information about important changes within the app  Zone 2: Activity​  What it is: An alphabetical list of feature modules giving Veterans an overview of what VA is doing for them—includes any critical “in-flight” tasks or actions that may need attention. Each module contains personalized information briefly summarizing that activity and provides a secondary entry point into the app feature. Module appearance logic: Variable. Modules appear while that feature’s activity is still considered “in flight” or when there is a user action to take. Each feature has different periods of time/circumstances that determine how long they are visible on the home screen (ex: the Claims module stays until the claim closes, the Secure Message stays until any new messages have been viewed).Module anatomy Title: Feature nameDescription text: Indicates # of items with an in-flight status; terms used vary by feature; provides just enough information to accurately indicate what is happening/is needed. What lives in this zone: Prescriptions (MVP)Appointments (MVP)Messages (MVP)Claims (MVP)Debts (future)Letters &amp; documents (future)Payments (future)Vaccine/medical records (future)Travel pay (future) Guidelines for module inclusion:A feature is appropriate for inclusion as an Activity module on the home screen when it: Has an “in-flight” status (ex: an open Claim, an upcoming Appointment)Has an action that is available for the user to take (ex: a refillable Prescription, an unread Message)  Zone 3: About you:​  What it is: A personalized, high-level snapshot of the individual Veteran at VA. Module appearance logic: Fixed appearance. What lives in this zone: Branch of Service/Veteran Status card (MVP)Disability rating &amp; monthly payment (MVP) Guidelines for module inclusion:Information is appropriate for inclusion on the home screen within About you when it: Is or provides access to information relating to who the individual Veterans is within VA as opposed to relating to a specific activity or taskContains high-level data about the individual Veteran that changes infrequently  Zone 4: VA resources:​  What it is: Links to support/tools that are of universal interest to Veterans and a space for announcements from VA. Module appearance logic: Fixed appearance What lives in this zone: Contact us (MVP)Find a VA Location (MVP)Banner space for VA announcements (MVP) Banner appearance is optional—use when needed.Display one banner at a time.Banner announcements should be of interest to all Veterans, and timely. Guidelines for module inclusion:Information is appropriate for inclusion on the home screen within the VA resources section when it: Is a tool or information that is relevant to a general audience, andIt does not fit within the Benefits, Health or Payment categories.  ","version":"Next","tagName":"h3"},{"title":"Screen Template​","type":1,"pageTitle":"Home Screen","url":"/va-mobile-app/docs/Flagship design library/Templates/Home#screen-template","content":" The Home screen uses the Category screen template.  ","version":"Next","tagName":"h3"},{"title":"Resources​","type":1,"pageTitle":"Home Screen","url":"/va-mobile-app/docs/Flagship design library/Templates/Home#resources","content":" Figma file: Home screen 2.0 Shipped File (includes happy path as well as design for loading states, errors, and alternate statuses)Mural: Home screen 2.0 Appearance logic for error handling and edge cases  ","version":"Next","tagName":"h3"},{"title":"Design Principles​","type":1,"pageTitle":"Home Screen","url":"/va-mobile-app/docs/Flagship design library/Templates/Home#design-principles","content":" TBD (discussion of the role of surface and elevation in the home screen’s design) ","version":"Next","tagName":"h3"},{"title":"Navigation model","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Templates/NavigationModel","content":"Navigation model The VA Health &amp; Benefits mobile app's navigation model is the same on both iOS and Android. Primary navigation: The app uses a standard tab navigation for its primary navigation. The tab bar/bottom navigation bar is located at the bottom of the screen and is persistent—it appears on every screen in the hierarchy (except those that are modally presented) so that the user has a clear sense of all the main sections of the app and quick access to switch between them.The tab bar must contain at least 3 but no more than 5 items, and is reserved for the default/Home screen, top level categories and if applicable, global features that require direct access from anywhere in the app. Secondary navigation: The right side of the app’s top navigation bar is reserved for global contextual features that relate to the content on that screen (Example: Profile, Help). For ENG components that make up the primary navigation, see Primary Navigation in the UX Components section.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Templates/Overview","content":"Overview Templates, or page layouts, compose components within a single page. A layout can contain multiple variations of a component depending on the context and may include display logic. Templates help to ensure consistent behavior across the VA mobile app's features. The following templates are used in the VA mobile app: Navigation modelScreen types See also https://design.va.gov/templates/","keywords":"","version":"Next"},{"title":"VAScrollView","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAScrollView","content":"VAScrollView A common component that provides a scrollable view. Use this instead of ScrollView. This component is a wrapper for react-native ScrollView that has a scrollbar styling fix PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscrollViewRef\tRef&lt;ScrollView&gt; No\tOptional reference prop to determine scroll position backgroundColor\tstring | number | symbol No\toptional background color to override the main background removeInsets\tboolean No\tremove insets contentContainerStyle\tStyleProp&lt;ViewStyle&gt; No\tThese styles will be applied to the scroll view content container which wraps all of the child views. Example: return ( &lt;ScrollView contentContainerStyle={styles.contentContainer}&gt; &lt;/ScrollView&gt; ); ... const styles = StyleSheet.create({ contentContainer: { paddingVertical: 20 } }); decelerationRate\tnumber | &quot;fast&quot; | &quot;normal&quot; No\tA floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts `&quot;normal&quot;` and `&quot;fast&quot;` which match the underlying iOS settings for `UIScrollViewDecelerationRateNormal` and `UIScrollViewDecelerationRateFast` respectively. - `'normal'`: 0.998 on iOS, 0.985 on Android (the default) - `'fast'`: 0.99 on iOS, 0.9 on Android horizontal\tboolean No\tWhen true the scroll view's children are arranged horizontally in a row instead of vertically in a column. The default value is false. invertStickyHeaders\tboolean No\tIf sticky headers should stick at the bottom instead of the top of the ScrollView. This is usually used with inverted ScrollViews. keyboardDismissMode\t&quot;none&quot; | &quot;interactive&quot; | &quot;on-drag&quot; No\tDetermines whether the keyboard gets dismissed in response to a drag. - 'none' (the default) drags do not dismiss the keyboard. - 'onDrag' the keyboard is dismissed when a drag begins. - 'interactive' the keyboard is dismissed interactively with the drag and moves in synchrony with the touch; dragging upwards cancels the dismissal. keyboardShouldPersistTaps\tboolean | &quot;always&quot; | &quot;never&quot; | &quot;handled&quot; No\tDetermines when the keyboard should stay visible after a tap. - 'never' (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won't receive the tap. - 'always', the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps. - 'handled', the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor). - false, deprecated, use 'never' instead - true, deprecated, use 'always' instead onContentSizeChange\t(w: number, h: number) =&gt; void No\tCalled when scrollable content view of the ScrollView changes. Handler function is passed the content width and content height as parameters: (contentWidth, contentHeight) It's implemented using onLayout handler attached to the content container which this ScrollView renders. onScroll\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires at most once per frame during scrolling. onScrollBeginDrag\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires if a user initiates a scroll gesture. onScrollEndDrag\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires when a user has finished scrolling. onMomentumScrollEnd\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires when scroll view has finished moving onMomentumScrollBegin\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires when scroll view has begun moving pagingEnabled\tboolean No\tWhen true the scroll view stops on multiples of the scroll view's size when scrolling. This can be used for horizontal pagination. The default value is false. scrollEnabled\tboolean No\tWhen false, the content does not scroll. The default value is true removeClippedSubviews\tboolean No\tExperimental: When true offscreen child views (whose `overflow` value is `hidden`) are removed from their native backing superview when offscreen. This can improve scrolling performance on long lists. The default value is false. showsHorizontalScrollIndicator\tboolean No\tWhen true, shows a horizontal scroll indicator. showsVerticalScrollIndicator\tboolean No\tWhen true, shows a vertical scroll indicator. stickyHeaderHiddenOnScroll\tboolean No\tWhen true, Sticky header is hidden when scrolling down, and dock at the top when scrolling up. style\tStyleProp&lt;ViewStyle&gt; No\tStyle refreshControl\tReactElement&lt;RefreshControlProps, string | JSXElementConstructor&lt;any&gt;&gt; No\tA RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. snapToInterval\tnumber No\tWhen set, causes the scroll view to stop at multiples of the value of `snapToInterval`. This can be used for paginating through children that have lengths smaller than the scroll view. Used in combination with `snapToAlignment` and `decelerationRate=&quot;fast&quot;`. Overrides less configurable `pagingEnabled` prop. snapToOffsets\tnumber[] No\tWhen set, causes the scroll view to stop at the defined offsets. This can be used for paginating through variously sized children that have lengths smaller than the scroll view. Typically used in combination with `decelerationRate=&quot;fast&quot;`. Overrides less configurable `pagingEnabled` and `snapToInterval` props. snapToStart\tboolean No\tUse in conjunction with `snapToOffsets`. By default, the beginning of the list counts as a snap offset. Set `snapToStart` to false to disable this behavior and allow the list to scroll freely between its start and the first `snapToOffsets` offset. The default value is true. snapToEnd\tboolean No\tUse in conjunction with `snapToOffsets`. By default, the end of the list counts as a snap offset. Set `snapToEnd` to false to disable this behavior and allow the list to scroll freely between its end and the last `snapToOffsets` offset. The default value is true. stickyHeaderIndices\tnumber[] No\tAn array of child indices determining which children get docked to the top of the screen when scrolling. For example passing `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with `horizontal={true}`. disableIntervalMomentum\tboolean No\tWhen true, the scroll view stops on the next index (in relation to scroll position at release) regardless of how fast the gesture is. This can be used for horizontal pagination when the page is less than the width of the ScrollView. The default value is false. disableScrollViewPanResponder\tboolean No\tWhen true, the default JS pan responder on the ScrollView is disabled, and full control over touches inside the ScrollView is left to its child components. This is particularly useful if `snapToInterval` is enabled, since it does not follow typical touch patterns. Do not use this on regular ScrollView use cases without `snapToInterval` as it may cause unexpected touches to occur while scrolling. The default value is false. StickyHeaderComponent\tComponentType&lt;any&gt; No\tA React Component that will be used to render sticky headers, should be used together with stickyHeaderIndices. You may need to set this component if your sticky header uses custom transforms, for example, when you want your list to have an animated and hidable header. If component have not been provided, the default ScrollViewStickyHeader component will be used. hitSlop\tnumber | Insets No\tThis defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels. If a Touchable view has a height of 20 the touchable height can be extended to 40 with hitSlop={{top: 10, bottom: 10, left: 0, right: 0}} NOTE The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views. id\tstring No\tUsed to reference react managed views from native code. needsOffscreenAlphaCompositing\tboolean No\tWhether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior. The default (false) falls back to drawing the component and its children with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value. This default may be noticeable and undesired in the case where the View you are setting an opacity on has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background). Rendering offscreen to preserve correct alpha behavior is extremely expensive and hard to debug for non-native developers, which is why it is not turned on by default. If you do need to enable this property for an animation, consider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame). If that property is enabled, this View will be rendered off-screen once, saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU. onLayout\t(event: LayoutChangeEvent) =&gt; void No\tInvoked on mount and layout changes with {nativeEvent: { layout: {x, y, width, height}}}. pointerEvents\t&quot;none&quot; | &quot;box-none&quot; | &quot;box-only&quot; | &quot;auto&quot; No\tIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class: .box-none { pointer-events: none; } .box-none * { pointer-events: all; } box-only is the equivalent of .box-only { pointer-events: all; } .box-only * { pointer-events: none; } But since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes, we opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform. testID\tstring No\tUsed to locate this view in end-to-end tests. nativeID\tstring No\tUsed to reference react managed views from native code. collapsable\tboolean No\tViews that are only used to layout their children or otherwise don't draw anything may be automatically removed from the native hierarchy as an optimization. Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy. collapsableChildren\tboolean No\tSetting to false prevents direct children of the view from being removed from the native view hierarchy, similar to the effect of setting `collapsable={false}` on each child. renderToHardwareTextureAndroid\tboolean No\tWhether this view should render itself (and all of its children) into a single hardware texture on the GPU. On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale: in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation. focusable\tboolean No\tWhether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard. tabIndex\t0 | -1 No\tIndicates whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard. See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex for more details. Supports the following values: - 0 (View is focusable) - -1 (View is not focusable) shouldRasterizeIOS\tboolean No\tWhether this view should be rendered as a bitmap before compositing. On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children; for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view and quickly composite it during each frame. Rasterization incurs an off-screen drawing pass and the bitmap consumes memory. Test and measure when using this property. isTVSelectable\tboolean No\t*(Apple TV only)* When set to true, this view will be focusable and navigable using the Apple TV remote. @platform ios hasTVPreferredFocus\tboolean No\t*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view. @platform ios tvParallaxShiftDistanceX\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0. @platform ios tvParallaxShiftDistanceY\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 2.0. @platform ios tvParallaxTiltAngle\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 0.05. @platform ios tvParallaxMagnification\tnumber No\t*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus. Defaults to 1.0. @platform ios onStartShouldSetResponder\t(event: GestureResponderEvent) =&gt; boolean No\tDoes this view want to become responder on the start of a touch? onMoveShouldSetResponder\t(event: GestureResponderEvent) =&gt; boolean No\tCalled for every touch move on the View when it is not the responder: does this view want to &quot;claim&quot; touch responsiveness? onResponderEnd\t(event: GestureResponderEvent) =&gt; void No\tIf the View returns true and attempts to become the responder, one of the following will happen: onResponderGrant\t(event: GestureResponderEvent) =&gt; void No\tThe View is now responding for touch events. This is the time to highlight and show the user what is happening onResponderReject\t(event: GestureResponderEvent) =&gt; void No\tSomething else is the responder right now and will not release it onResponderMove\t(event: GestureResponderEvent) =&gt; void No\tThe user is moving their finger onResponderRelease\t(event: GestureResponderEvent) =&gt; void No\tFired at the end of the touch, ie &quot;touchUp&quot; onResponderStart\t(event: GestureResponderEvent) =&gt; void No onResponderTerminationRequest\t(event: GestureResponderEvent) =&gt; boolean No\tSomething else wants to become responder. Should this view release the responder? Returning true allows release onResponderTerminate\t(event: GestureResponderEvent) =&gt; void No\tThe responder has been taken from the View. Might be taken by other views after a call to onResponderTerminationRequest, or might be taken by the OS without asking (happens with control center/ notification center on iOS) onStartShouldSetResponderCapture\t(event: GestureResponderEvent) =&gt; boolean No\tonStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable. However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true. onMoveShouldSetResponderCapture\t(event: GestureResponderEvent) =&gt; boolean No\tonStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable. However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing on*ShouldSetResponderCapture. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a onStartShouldSetResponderCapture handler which returns true. onTouchStart\t(event: GestureResponderEvent) =&gt; void No onTouchMove\t(event: GestureResponderEvent) =&gt; void No onTouchEnd\t(event: GestureResponderEvent) =&gt; void No onTouchCancel\t(event: GestureResponderEvent) =&gt; void No onTouchEndCapture\t(event: GestureResponderEvent) =&gt; void No onPointerEnter\t(event: PointerEvent) =&gt; void No onPointerEnterCapture\t(event: PointerEvent) =&gt; void No onPointerLeave\t(event: PointerEvent) =&gt; void No onPointerLeaveCapture\t(event: PointerEvent) =&gt; void No onPointerMove\t(event: PointerEvent) =&gt; void No onPointerMoveCapture\t(event: PointerEvent) =&gt; void No onPointerCancel\t(event: PointerEvent) =&gt; void No onPointerCancelCapture\t(event: PointerEvent) =&gt; void No onPointerDown\t(event: PointerEvent) =&gt; void No onPointerDownCapture\t(event: PointerEvent) =&gt; void No onPointerUp\t(event: PointerEvent) =&gt; void No onPointerUpCapture\t(event: PointerEvent) =&gt; void No accessible\tboolean No\tWhen true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible. accessibilityActions\treadonly Readonly&lt;{ name: string; label?: string; }&gt;[] No\tProvides an array of custom actions available for accessibility. accessibilityLabel\tstring No\tOverrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space. aria-label\tstring No\tAlias for accessibilityLabel https://reactnative.dev/docs/view#accessibilitylabel https://github.com/facebook/react-native/issues/34424 accessibilityRole\tAccessibilityRole No\tAccessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on. accessibilityState\tAccessibilityState No\tAccessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on. aria-busy\tboolean No\talias for accessibilityState see https://reactnative.dev/docs/accessibility#accessibilitystate aria-checked\tboolean | &quot;mixed&quot; No aria-disabled\tboolean No aria-expanded\tboolean No aria-selected\tboolean No accessibilityHint\tstring No\tAn accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label. accessibilityValue\tAccessibilityValue No\tRepresents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars, it contains range information (minimum, current, and maximum). aria-valuemax\tnumber No aria-valuemin\tnumber No aria-valuenow\tnumber No aria-valuetext\tstring No onAccessibilityAction\t(event: AccessibilityActionEvent) =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action. importantForAccessibility\t&quot;auto&quot; | &quot;yes&quot; | &quot;no&quot; | &quot;no-hide-descendants&quot; No\t[Android] Controlling if a view fires accessibility events and if it is reported to accessibility services. aria-hidden\tboolean No\tA value indicating whether the accessibility elements contained within this accessibility element are hidden. aria-modal\tboolean No role\tRole No\tIndicates to accessibility services to treat UI component like a specific role. accessibilityLabelledBy\tstring | string[] No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android aria-labelledby\tstring No\tIdentifies the element that labels the element it is applied to. When the assistive technology focuses on the component with this props, the text is read aloud. The value should should match the nativeID of the related element. @platform android accessibilityLiveRegion\t&quot;none&quot; | &quot;polite&quot; | &quot;assertive&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion aria-live\t&quot;polite&quot; | &quot;assertive&quot; | &quot;off&quot; No\tIndicates to accessibility services whether the user should be notified when this view changes. Works for Android API &gt;= 19 only. @platform android See https://reactnative.dev/docs/view#accessibilityliveregion accessibilityElementsHidden\tboolean No\tA Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden to the screen reader. @platform ios accessibilityViewIsModal\tboolean No\tA Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver. @platform ios onAccessibilityEscape\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers). @platform ios onAccessibilityTap\t() =&gt; void No\tWhen `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture. @platform ios onMagicTap\t() =&gt; void No\tWhen accessible is true, the system will invoke this function when the user performs the magic tap gesture. @platform ios accessibilityIgnoresInvertColors\tboolean No\thttps://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios @platform ios accessibilityLanguage\tstring No\tBy using the accessibilityLanguage property, the screen reader will understand which language to use while reading the element's label, value and hint. The provided string value must follow the BCP 47 specification (https://www.rfc-editor.org/info/bcp47). https://reactnative.dev/docs/accessibility#accessibilitylanguage-ios @platform ios alwaysBounceHorizontal\tboolean No\tWhen true the scroll view bounces horizontally when it reaches the end even if the content is smaller than the scroll view itself. The default value is true when `horizontal={true}` and false otherwise. alwaysBounceVertical\tboolean No\tWhen true the scroll view bounces vertically when it reaches the end even if the content is smaller than the scroll view itself. The default value is false when `horizontal={true}` and true otherwise. automaticallyAdjustContentInsets\tboolean No\tControls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true. automaticallyAdjustKeyboardInsets\tboolean No\tControls whether the ScrollView should automatically adjust its contentInset and scrollViewInsets when the Keyboard changes its size. The default value is false. automaticallyAdjustsScrollIndicatorInsets\tboolean No\tControls whether iOS should automatically adjust the scroll indicator insets. The default value is true. Available on iOS 13 and later. bounces\tboolean No\tWhen true the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false it disables all bouncing even if the `alwaysBounce*` props are true. The default value is true. bouncesZoom\tboolean No\tWhen true gestures can drive zoom past min/max and the zoom will animate to the min/max value at gesture end otherwise the zoom will not exceed the limits. canCancelContentTouches\tboolean No\tWhen false once tracking starts won't try to drag if the touch moves. The default value is true. centerContent\tboolean No\tWhen true the scroll view automatically centers the content when the content is smaller than the scroll view bounds; when the content is larger than the scroll view this property has no effect. The default value is false. contentInset\tInsets No\tThe amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {0, 0, 0, 0}. contentOffset\tPointProp No\tUsed to manually set the starting scroll offset. The default value is {x: 0, y: 0} contentInsetAdjustmentBehavior\t&quot;always&quot; | &quot;never&quot; | &quot;automatic&quot; | &quot;scrollableAxes&quot; No\tThis property specifies how the safe area insets are used to modify the content area of the scroll view. The default value of this property must be 'automatic'. But the default value is 'never' until RN@0.51. directionalLockEnabled\tboolean No\tWhen true the ScrollView will try to lock to only vertical or horizontal scrolling while dragging. The default value is false. indicatorStyle\t&quot;default&quot; | &quot;black&quot; | &quot;white&quot; No\tThe style of the scroll indicators. - default (the default), same as black. - black, scroll indicator is black. This style is good against a white content background. - white, scroll indicator is white. This style is good against a black content background. maintainVisibleContentPosition\t{ autoscrollToTopThreshold?: number; minIndexForVisible: number; } No\tWhen set, the scroll view will adjust the scroll position so that the first child that is currently visible and at or beyond minIndexForVisible will not change position. This is useful for lists that are loading content in both directions, e.g. a chat thread, where new messages coming in might otherwise cause the scroll position to jump. A value of 0 is common, but other values such as 1 can be used to skip loading spinners or other content that should not maintain position. The optional autoscrollToTopThreshold can be used to make the content automatically scroll to the top after making the adjustment if the user was within the threshold of the top before the adjustment was made. This is also useful for chat-like applications where you want to see new messages scroll into place, but not if the user has scrolled up a ways and it would be disruptive to scroll a bunch. Caveat 1: Reordering elements in the scrollview with this enabled will probably cause jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now, don't re-order the content of any ScrollViews or Lists that use this feature. Caveat 2: This uses contentOffset and frame.origin in native code to compute visibility. Occlusion, transforms, and other complexity won't be taken into account as to whether content is &quot;visible&quot; or not. maximumZoomScale\tnumber No\tThe maximum allowed zoom scale. The default value is 1.0. minimumZoomScale\tnumber No\tThe minimum allowed zoom scale. The default value is 1.0. onScrollAnimationEnd\t() =&gt; void No\tCalled when a scrolling animation ends. pinchGestureEnabled\tboolean No\tWhen true, ScrollView allows use of pinch gestures to zoom in and out. The default value is true. scrollEventThrottle\tnumber No\tLimits how often scroll events will be fired while scrolling, specified as a time interval in ms. This may be useful when expensive work is performed in response to scrolling. Values &lt;= `16` will disable throttling, regardless of the refresh rate of the device. scrollIndicatorInsets\tInsets No\tThe amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the contentInset. Defaults to {0, 0, 0, 0}. scrollToOverflowEnabled\tboolean No\tWhen true, the scroll view can be programmatically scrolled beyond its content size. The default value is false. @platform ios scrollsToTop\tboolean No\tWhen true the scroll view scrolls to top when the status bar is tapped. The default value is true. snapToAlignment\t&quot;start&quot; | &quot;center&quot; | &quot;end&quot; No\tWhen `snapToInterval` is set, `snapToAlignment` will define the relationship of the snapping to the scroll view. - `start` (the default) will align the snap at the left (horizontal) or top (vertical) - `center` will align the snap in the center - `end` will align the snap at the right (horizontal) or bottom (vertical) onScrollToTop\t(event: NativeSyntheticEvent&lt;NativeScrollEvent&gt;) =&gt; void No\tFires when the scroll view scrolls to top after the status bar has been tapped @platform ios zoomScale\tnumber No\tThe current scale of the scroll view content. The default value is 1.0. endFillColor\tColorValue No\tSometimes a scrollview takes up more space than its content fills. When this is the case, this prop will fill the rest of the scrollview with a color to avoid setting a background and creating unnecessary overdraw. This is an advanced optimization that is not needed in the general case. scrollPerfTag\tstring No\tTag used to log scroll performance on this scroll view. Will force momentum events to be turned on (see sendMomentumEvents). This doesn't do anything out of the box and you need to implement a custom native FpsListener for it to be useful. @platform android overScrollMode\t&quot;always&quot; | &quot;never&quot; | &quot;auto&quot; No\tUsed to override default value of overScroll mode. Possible values: - 'auto' - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll. - 'always' - Always allow a user to over-scroll this view. - 'never' - Never allow a user to over-scroll this view. nestedScrollEnabled\tboolean No\tEnables nested scrolling for Android API level 21+. Nested scrolling is supported by default on iOS. fadingEdgeLength\tnumber No\tFades out the edges of the scroll content. If the value is greater than 0, the fading edges will be set accordingly to the current scroll direction and position, indicating if there is more content to show. The default value is 0. @platform android persistentScrollbar\tboolean No\tCauses the scrollbars not to turn transparent when they are not in use. The default value is false.","keywords":"","version":"Next"},{"title":"Screen types","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes","content":"","keywords":"","version":"Next"},{"title":"Hierarchical screens​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#hierarchical-screens","content":" ","version":"Next","tagName":"h2"},{"title":"Category landing screen​​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#category-landing-screen","content":"   Definition: The Category landing screen template is used by the navigation categories at the top of the app's hierarchy: Health, Benefits, and Payments. These navigation category landing screens group features of a similar type, providing permanent entry points to features and variable description text for each feature when applicable. The app's Home screen also uses this template, but has a special set of rules that distinguish it from the other top-level categories (see Home Screen for a more detailed description). The category landing screen template displays the tab bar and a link to the Veteran Crisis line. It does not display a back button.Screen transition: Screen transition between categories is top-level peer (fade through).Scroll behavior: Content scrolls if it exceeds the panel height. Screen title scroll behavior: Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in body.When scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar. Examples: Health, Benefits, PaymentsResources: Figma file: Category landing screen templateGithub ticket: Category landing screen template  ","version":"Next","tagName":"h3"},{"title":"Feature landing screen​​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#feature-landing-screen","content":"   Definition: The “home” screen of a feature. Features are parent sections with multiple children that generally live within a category. A complex feature (like Prescriptions or Messages) can also have subsections. Displays the tab bar and a descriptive back button.Screen transition: Horizontal (pushing on &amp; off from right).Scroll behavior: Content scrolls if it exceeds the panel height. Screen title scroll behavior: Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in body.When scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar. Examples: Appointments, Pharmacy, ProfileResources: Figma file: Feature landing/child screen templateFigma: header scroll behaviorGithub ticket: Feature landing/child screen template  ","version":"Next","tagName":"h3"},{"title":"Child screen​​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#child-screen","content":"   Definition: Child screens live within a feature, generally an item in a list. It’s often the end point of a hierarchy. Displays the tab bar and a descriptive back button.Screen transition: Horizontal (pushing on &amp; off from right).Scroll behavior: Content scrolls if it exceeds the panel height Screen title scroll behavior Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in bodyWhen scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar Examples: Appointment details, Prescription detailsResources: Figma file: Feature landing/child screen templateFigma: header scroll behaviorGithub ticket: Feature landing/child screen template  ","version":"Next","tagName":"h3"},{"title":"Modal screens​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#modal-screens","content":" ","version":"Next","tagName":"h2"},{"title":"Fullscreen task/subtask​​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#fullscreen-tasksubtask","content":"   Definition: A contained, linear flow that is presented modally at any level of the app’s hierarchy, opening on a layer over the current screen and taking up the whole screen. A fullscreen task/subtask can be one or multiple steps, and it requires an explicit close or cancel button to exit. Use a task/subtask to enable something complex in order to lock in focus. Because it covers the entire screen, it is the only modally appearing screen over which other dialogs or panels can appear. It does not display the tab bar.Behaviors &amp; Logic: Screen Transition: Screen transition is vertical (pushing on &amp; off from the bottom) to open the subtask, then horizontal between sequential steps (if applicable).Scroll behavior: Content (including primary &amp; secondary action buttons) scrolls if it exceeds the panel height.Button behavior &amp; display logic Top bar action buttons: Left button: Cancel (use for single step task or first step in a multi-step task) or Back (use only for subsequent steps in a multi-step task). Must be accompanied by primary action button. Closes editable view without saving changes and/or closes entire multi-step flow without saving changes (Display &quot;Are you sure?&quot; confirmation modal before closing).Right button: Done or Close. Does not appear with a primary action button. Closes non-editable view. Embedded action buttons: Primary action button: May appear alone or with a secondary action button. If task is a single step, tap to save/submit and close view. If task is multi-step, tap to advance to next step (mid-task) or save/submit and close view (end of task). Always accompanied by a Cancel or Back button, never used with Close or Done.Secondary action button: May appear above the primary action button, but not alone. Example: Create an appointment, Refill a prescriptionResources: Figma file: Fullscreen subtaskGithub ticket: Fullscreen subtask template  ","version":"Next","tagName":"h3"},{"title":"Large panel​​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#large-panel","content":"   Definition: A contained (single step) task that is presented modally at any level of the app’s hierarchy and appears as a card that covers most of the underlying content. It displays a close button to exit, but can also swipe down or tap on background to close. Use a large panel to display more in depth detail (multiple paragraphs) or a small (quick) task, when you need to lock in focus and limit the possibility of abandoning. Cannot appear over another panel. Does not display the tab bar.Behaviors &amp; Logic: Screen transition: Screen transition is vertical (pushing on &amp; off from the bottom) to open &amp; close, then horizontal between sequential steps (if applicable).Scroll behavior: Top bar title and actions are fixed &amp; do not scroll.Content (including primary &amp; secondary action buttons) scrolls if it exceeds the panel height. Button behavior &amp; display logic Top bar action buttons: Left button: Cancel only, must be accompanied by primary embedded action button in content. Closes editable view without saving changes (Display &quot;Are you sure?&quot; confirmation modal).Right button: Done or Close. Does not appear with a primary action button. Closes non-editable view. Embedded action buttons: Primary action button: May appear alone or with a secondary action button. If task is a single step, tap to save/submit and close view. Always accompanied by Cancel. Secondary close/dismiss actions (Save/close action depends on top bar action button label) : Swipe down from header to close the panelAndroid hardware back also results in closing the panel Example: Help text, composing a secure messageResources: Figma file: Large panel templateGithub ticket: Large panel template  ","version":"Next","tagName":"h3"},{"title":"Web view​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#web-view","content":"   Definition: A screen that displays content from an outside website without requiring the user to leave the app. Requires an explicit close or cancel button to exit. Does not display tab bar due to required web toolbar.Transition: Horizontal (pushing on &amp; off from right).Example: Contact VAResources: Figma file: Webview  ","version":"Next","tagName":"h3"},{"title":"Adding new screen types​","type":1,"pageTitle":"Screen types","url":"/va-mobile-app/docs/Flagship design library/Templates/ScreenTypes#adding-new-screen-types","content":" Always try to use an existing screen type first before proposing a new (or modifying an existing) screen type.New screen types should apply to multiple features/locations in the app rather than stand as one-offs, and need to be approved by the Component Committee. ","version":"Next","tagName":"h3"},{"title":"Intro to the VA Mobile App","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Intro","content":"","keywords":"","version":"Next"},{"title":"Background​","type":1,"pageTitle":"Intro to the VA Mobile App","url":"/va-mobile-app/docs/Intro#background","content":" Over 50% of traffic to VA websites comes from users on mobile devices. This traffic is typically driven by users that want to complete quick transactions, such as viewing Claims Status or Facility Locator.  The VA: Health and Benefits App team has a hypothesis, validated by user research, that native functionality in a mobile app will allow Veterans to more easily complete key transactions across VA Health and Benefits services.  ","version":"Next","tagName":"h2"},{"title":"Download the app​","type":1,"pageTitle":"Intro to the VA Mobile App","url":"/va-mobile-app/docs/Intro#download-the-app","content":"  ","version":"Next","tagName":"h2"},{"title":"Operations","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/","content":"Operations VA Mobile app Incident Response and Operations resources on github. See the menu at left for more detail.","keywords":"","version":"Next"},{"title":"Dashboards","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/App metrics/Dashboard","content":"","keywords":"","version":"Next"},{"title":"Feature specific boards​","type":1,"pageTitle":"Dashboards","url":"/va-mobile-app/docs/Operations/App metrics/Dashboard#feature-specific-boards","content":" Note: These dashboards are not currently working as intended; VA/OCTO POs on individual Veteran-facing experiences will decide if/how best to refresh them. If you are in need of up-to-date information about the mobile app, please contact the team via #va-mobile-app-analytics on DSVA Slack.  As the team builds out dashboards to monitor specific features of the app, they will be aded below.  Appointments feature dashboard (MVP)Claims feature dashboard (MVP)Letters &amp; Documents feature dashboard (MVP)Prescriptions feature dashboard (MVP)Secure Messaging dashboard (MVP) ","version":"Next","tagName":"h2"},{"title":"Maintenance Windows","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Maintenance Windows","content":"Maintenance Windows View back-end documentation. View front-end documentation.","keywords":"","version":"Next"},{"title":"Incident Response","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Incident Response","content":"","keywords":"","version":"Next"},{"title":"Incidents we control​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#incidents-we-control","content":" Actual issues with the mobile app on iOS or Android that we can fix with a code update, this includes shipped bugs and unintended side effects of how third party systems were implemented.  ","version":"Next","tagName":"h2"},{"title":"Personnel needed​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#personnel-needed","content":" Incident commander (a primary point of contact and backup plans set within the leadership team and communicated out to the rest of the team)  ","version":"Next","tagName":"h3"},{"title":"Information needed​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#information-needed","content":" Data: Users impactedQA: Severity levelEngineering: Effort level to remediateProduct: Amount of time to next natural release  The team member who initially discovers the issue should report it to the active incident commander, who will be in charge of gathering the necessary information and presenting it to the leadership team.  The above information will be presented, by the incident commander, to the VA Mobile App leadership for recommended action. The recommendation should then be presented to the OTCO-DE product owner for final decision.  ","version":"Next","tagName":"h3"},{"title":"Incident Example​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#incident-example","content":" Incident happensSomeone notices itReport the incident to the incident commanderThe incident commander will gather all the relevant informationThe incident commander will present the information to leadershipLeadership will make a recommendation and communicate that to VAIf action is needed, the incident commander will start the workstream, monitor, and report progress.  ","version":"Next","tagName":"h3"},{"title":"Incidents we don’t control​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#incidents-we-dont-control","content":" Incidents the mobile application team does not control should be reported to Platform and monitored in case any user messaging is necessary. These issues do not require an incident commander, but the reporting team member should also update the DSVA mobile slack channel (#va-mobile-app) with a link to where the issue was reported (support ticket or general channel link) to communicate that the issue is known.  ","version":"Next","tagName":"h2"},{"title":"Non-control Incident Example​","type":1,"pageTitle":"Incident Response","url":"/va-mobile-app/docs/Operations/Incident Response#non-control-incident-example","content":" Incident happensSomeone notices itThat person should check if its been reported to platform, and if not does so.Add a link to the reported message into the DSVA mobile slack channel ","version":"Next","tagName":"h3"},{"title":"Firebase","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/App metrics/Firebase","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#overview","content":" Firebase is a Google Cloud system which can capture analytics, performance, and crash data from our deployed app. The Firebase Console offers an overview into the app  If you are unable to access the console, request access from the team or project lead  Further information available in each of the subcategories in the navigation menu    The important sections within the console are listed below. Anything not listed is likely not used or not intergrated into the app at this time  Something to note about all the data presented in these sections, none of the data is attributed to individual users for purposes of anonymity and privacy. The tools here allow you to get data on events and see stack traces of crashes, but not directly debug the issues of a specific user.  All analytics, crashlytics, and performance are turned off for non-production environments, with the only exception being DebugView.  ","version":"Next","tagName":"h2"},{"title":"Crashlytics​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#crashlytics","content":" Crashlytics provides metrics on app crashes that occur in production, and can be filtered by release and platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top left under the title allows you to select which release number to look at and the filter at the top right allows you to choose a different date range.    Crashlytics is added to the app through the @react-native-firebase/crashlytics package. The only code added to the repo which affects Crashlytics is for toggling DebugView and explained in that section.  ","version":"Next","tagName":"h2"},{"title":"Performance​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#performance","content":" Performance provides many default metrics on http requests and app runtime, and can be filtered by platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top right allows you to choose a different date range.    Performance is added to the app through the @react-native-firebase/perf package. The only code added to the repo which affects Performance is for toggling DebugView and explained in that section. Additional custom traces can be added to the code by following the examples in the package docs.  ","version":"Next","tagName":"h2"},{"title":"App Distribution​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#app-distribution","content":" App Distribution provides a dashboard for all the releases of the app. It lists previous releases, allows for creating a new release, provides invite links and group permissions for testers and other groups. Each release contains notes for its purpose, whether it is a QA build or one for UAT or a proper release build. Only people with permissions to use the distribution tools will be able to build new releases. The contact info for the person with top level permission will be listed on that page under Contant Email    ","version":"Next","tagName":"h2"},{"title":"Analytics​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#analytics","content":" Analytics provides metrics on discrete events within the app. Most general events like accessing a screen are built into the package and provided in the dashboard without any additional coding, but all other actions like pressing a button or downloading a file are tracked as a custom analytic event. These events are collated and displayed in multiple ways in the Analytics subsections of the nav menu, as listed in the subsections below.  ","version":"Next","tagName":"h2"},{"title":"To Add a New Analytics Event​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#to-add-a-new-analytics-event","content":" Add an event name with optional parameters to the Events constant in constants/analytics.ts.  ","version":"Next","tagName":"h3"},{"title":"Naming Requirements​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#naming-requirements","content":" Snake casePrefixed with vama_Limited to 24 characters including the vama_ prefix  See examples below or in our analytics constants file  Additionally, if user properties need to be tracked, they can be added to the UserAnalytics object:  export const Events = { ... , vama_new_event_name: (): Event =&gt; { return { name: 'vama_new_event_name', params: { paramName, }, } }, } export const UserAnalytics = { ... , vama_uses_property: (value: boolean): UserAnalytic =&gt; { return { name: 'vama_uses_property', value: value.toString(), } }, }   Then include the analytics utility functions in your screen or store slice and call the event name:  import { getAnalyticsTimers, logAnalyticsEvent, setAnalyticsUserProperty } from 'utils/analytics' export const analyticsAction = (): AppThunk =&gt; async (dispatch, getState) =&gt; { await setAnalyticsUserProperty(UserAnalytics.vama_uses_property(true)) const [totalTime] = getAnalyticsTimers(getState()) await logAnalyticsEvent(Events.vama_new_event_name(totalTime)) ... }   Analytics is added to the app through the @react-native-firebase/analytics package.  ","version":"Next","tagName":"h3"},{"title":"Dashboard​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#dashboard","content":" The analytics dashboard provides a few common metrics that are important to the app, like current user engagement, active release versions, and user geolocation. You can drill down into the information on the dashboard by clicking on the All Users button, which will pop open a sidebar which allows you to create a custom query to test the data against, with up to 5 conditions. The time range of the query is in the top-right of the main dashboard, outside of the pop-up. Once a new query is created and Apply is pressed in the bottom right of the pop-up, the data shown will match all provided conditions only. Switching to the Realtime screen within Analytics will also apply these conditions. To clear a query, click on the X next to its name in the top-left where the All Users button used to be.    ","version":"Next","tagName":"h3"},{"title":"Realtime​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#realtime","content":" Selecting the Realtime dashboard will show all events that occured within the indicated time range and which match the active query in the comparisons list at the top of the screen. This screen shows the geolocations of all these events grouped to the nearest city. Underneath the map, a breakdown of the event types and rankings of each is also provided.    ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#events","content":" The Events page shows a list of all discrete events in the app, the count of each event firing, and the number of unique users who initiated that event. The events list can be filtered for a specific date range, but no other filters can be applied on this screen.    ","version":"Next","tagName":"h3"},{"title":"DebugView​","type":1,"pageTitle":"Firebase","url":"/va-mobile-app/docs/Operations/App metrics/Firebase#debugview","content":" DebugView allows developers to get a live stream of events in real-time, with up to a 60 second delay when first starting. A Firebase Debug Mode toggle has been added to the developer screen to make debugging easier.    For developers building locally, follow the steps listed below to get started:  iOS:  Make sure the -FIRDebugEnabled flag is enabled in your XCode &gt; Product &gt; Scheme &gt; Edit Scheme, under the Test (Debug) schemeStart the emulator or build to deviceIn the app, go to Profile &gt; Settings &gt; Developer and toggle Firebase Debug Mode onGo the Firebase Debug dashboard and select your device from the top left Debug Devices list  Android:  Open Android Studio and run the emulator or build to deviceIn a terminal, execute the command adb shell setprop debug.firebase.analytics.app gov.va.mobileappIn the app, go to Profile &gt; Settings &gt; Developer and toggle Firebase Debug Mode onGo the Firebase Debug dashboard and select your device from the top left Debug Devices listAfter debugging is complete, run the command adb shell setprop debug.firebase.analytics.app .none.  For QA team members, DebugView does not work using a signed build. Either build locally using the steps above, or use the steps below, but be aware that the wait time is high and it doesn't always work due to the way events are batched and sent to the Dashboard:  On either platform:  In the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo to the Firebase Realtime dashboardClick on the All Users button at the top left. A Build Comparison menu will pop up.Set Audience Name to Environment and the Dimension Values to Staging if available. If not available, no staging events have been logged in the time periodClick Apply and any events in that time period that have been logged will be shown on the map and in the lists ","version":"Next","tagName":"h3"},{"title":"Updating the monthly dashboard","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard","content":"","keywords":"","version":"Next"},{"title":"Overview of steps​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#overview-of-steps","content":" Complete the steps in the Steps to gather and record app store data sectionReview the monthly dashboard and confirm the board is operating properly post-data updates. Make adjustments if needed.Posted in DSVA Slack channel #va-mobile-app-analytics that the updates are complete for the prior month and tag the following stakeholders: Mobile app POs: Rachel Han and Ryan TwellMobile app Project Manager: Jennifer BrownVA Communication stakeholders: Michelle Correll and Ty Brettnacher  Typically, the Slack update should also include a post that details:  A reminder that all data except for the app stores’ data points automatically update and that the message is only announcing that the manual addition of the app store data is complete.Any changes to definitions/analytics made in the last month that impact what users will see on the board.High-level trends/insights over time given the last month's data.  ","version":"Next","tagName":"h2"},{"title":"Links you will need​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#links-you-will-need","content":" ","version":"Next","tagName":"h2"},{"title":"Google Sheet repository for the data​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#google-sheet-repository-for-the-data","content":" Analytics Google Sheet  ","version":"Next","tagName":"h3"},{"title":"Links for iOS data​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#links-for-ios-data","content":" Apple/iOS data is gathered from the App Store Connect in two places:  For iOS downloads: Downloads ReportFor overall rating: App Store Rating Note: currently we bring in daily rating distribution data for Android but we do not for iOS.  ","version":"Next","tagName":"h3"},{"title":"Links for Android data​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#links-for-android-data","content":" Android data is gathered from the Google Play Console in two places:  For Android downloads: Statistics: Saved report - New usersFor overall and daily distribution of app store rating: Ratings  ","version":"Next","tagName":"h3"},{"title":"Steps to gather and record app store data​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#steps-to-gather-and-record-app-store-data","content":" Update the Mobile Analytics sheet tabs as follows:  ","version":"Next","tagName":"h2"},{"title":"Google Installs tab​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#google-installs-tab","content":" Go to the Google Play Console Statistics saved report for New users (If the link does not automatically take you to the save report, it can be found under the dropdown menu for &quot;Saved reports&quot; in the upper right-hand corner.)Adjust the date filter to the last month.Then, click &quot;Export report&quot; next to the date filter. Choose &quot;Export time series (CSV)&quot; optionAdd the data to the bottom of the Google Installs Tab in the Analytics Google Sheet  ","version":"Next","tagName":"h3"},{"title":"Play Store Rating & Google Daily rating distribution tabs​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#play-store-rating--google-daily-rating-distribution-tabs","content":" Go to the Play Store Ratings pageNext to Performance over time, change the report time series to Last 90 DaysScroll down to the Ratings Distribution sectionClick the Download CSV optionCopy the data from just the reporting month you need and add it to the Google Daily rating distribution tabTake the value at the top of the Play Store Ratings page, under Overview, for Default Google Play rating and copy it to the Play Store Rating Tab  ","version":"Next","tagName":"h3"},{"title":"iOS installs tab​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#ios-installs-tab","content":" Go to the App Store First-Time Downloads report in the Metrics section Analytics pageChange the time period in the upper right-hand corner to be just the reporting month you wantClick the ... overflow menu on the right of the chart and select Export as CSVCopy the data into the ios installs Tab  ","version":"Next","tagName":"h3"},{"title":"Apple App Store Rating​","type":1,"pageTitle":"Updating the monthly dashboard","url":"/va-mobile-app/docs/Operations/App metrics/UpdatingDashboard#apple-app-store-rating","content":" Go to the App Store Rating pageGet the rating value at the top and copy it to the ios store rating Tab ","version":"Next","tagName":"h3"},{"title":"Release process","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Releases/release-process","content":"Release process","keywords":"","version":"Next"},{"title":"Releases","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Releases/","content":"","keywords":"","version":"Next"},{"title":"Release Cycle​","type":1,"pageTitle":"Releases","url":"/va-mobile-app/docs/Operations/Releases/#release-cycle","content":" Because VSP's Collaboration Cycle is designed for web features, the VA Mobile App team is going to leverage parts of the process that make sense for mobile and create other quality control processes where it doesn't. For example, the VA Mobile App team is creating its own Accessibility review that is tailored to mobile devices. These deviations will be noted within the mobile product documentation.  ","version":"Next","tagName":"h2"},{"title":"Release Calendar​","type":1,"pageTitle":"Releases","url":"/va-mobile-app/docs/Operations/Releases/#release-calendar","content":" ","version":"Next","tagName":"h2"},{"title":"2025​","type":1,"pageTitle":"Releases","url":"/va-mobile-app/docs/Operations/Releases/#2025","content":" Release Branch Created @ 2am ET\tRelease Date\tQA Sign Off Date\tRelease Sign Off Due Date (/approve command)\tApp Review Submission Date\tRelease Number2/26/25\t3/11/25\t2/28/25\t3/4/25\t3/5/25\t2.45.0 3/12/25\t3/25/25\t3/14/25\t3/18/25\t3/19/25\t2.46.0 3/26/25\t4/8/25\t3/28/25\t4/1/25\t4/2/25\t2.47.0 4/9/25\t4/22/25\t4/11/25\t4/15/25\t4/16/25\t2.48.0 4/23/25\t5/6/25\t4/25/25\t4/29/25\t4/30/25\t2.49.0 5/7/25\t5/20/25\t5/9/25\t5/13/25\t5/14/25\t2.50.0 5/21/25\t6/3/25\t5/23/25\t5/27/25\t5/28/25\t2.51.0 6/4/25\t6/17/25\t6/6/25\t6/10/25\t6/11/25\t2.52.0 6/18/25\t7/1/25\t6/20/25\t6/24/25\t6/25/25\t2.53.0 7/2/25\t7/15/25\t7/4/25\t7/8/25\t7/9/25\t2.54.0 7/16/25\t7/29/25\t7/18/25\t7/22/25\t7/23/25\t2.55.0 7/30/25\t8/12/25\t8/1/25\t8/5/25\t8/6/25\t2.56.0 8/13/25\t8/26/25\t8/15/25\t8/19/25\t8/20/25\t2.57.0 8/27/25\t9/9/25\t8/29/25\t9/2/25\t9/3/25\t2.58.0 9/10/25\t9/23/25\t9/12/25\t9/16/25\t9/17/25\t2.59.0 9/24/25\t10/7/25\t9/26/25\t9/30/25\t10/1/25\t2.60.0 10/8/25\t10/21/25\t10/10/25\t10/14/25\t10/15/25\t2.61.0 10/22/25\t11/4/25\t10/24/25\t10/28/25\t10/29/25\t2.62.0 11/5/25\t11/18/25\t11/7/25\t11/11/25\t11/12/25\t2.63.0 11/19/25\t12/2/25\t11/21/25\t11/25/25\t11/26/25\t2.64.0 12/3/25\t12/16/25\t12/5/25\t12/9/25\t12/10/25\t2.65.0 12/17/25\t12/30/25\t12/19/25\t12/23/25\t12/24/25\t2.66.0 12/31/25\t1/13/26\t1/2/26\t1/6/25\t1/7/26\t2.67.0  For information about the technical release process, please see the release process documentation. ","version":"Next","tagName":"h3"},{"title":"Updating the app stores","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Updating the App Stores","content":"","keywords":"","version":"Next"},{"title":"Updating the content​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#updating-the-content","content":" ","version":"Next","tagName":"h2"},{"title":"Product: Create the ticket​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#product-create-the-ticket","content":" Create a new ticket for the app store updates. Include content for the &quot;What's New&quot; section of the app stores. If content changes are needed for the app store images themselves, include the necessary updates. Request screenshots from engineering in the following sizes: iPhone: 360 x 760 px (iOS Simulator or device using a 6.5” device such as iPhone 13 or 14) iPad: 1040 x 1504 px (iOS Simulator or device using iPad Pro 12.9”) Android: 180 x 380 px (Android Emulator or device using Pixel 4) Make sure the corners are not rounded. Taking a screenshot using the camera icon in Android Emulator will result in rounded corners. To bypass this: Go to View &gt; Tool Windows &gt; LogcatIn the panel that pops up, click the camera icon in the left toolbar to take a screenshot without rounded corners Engineering should then add the screenshots to Google Drive so that the designer can access them and the link should be added to the ticket. Assign the ticket to a designer (typically Brea does the app store image updates)  ","version":"Next","tagName":"h3"},{"title":"Designer: Update the app store images​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#designer-update-the-app-store-images","content":" Create a branch in the Figma fileUpdate the screenshots on the “Step 1: Update screenshots” pageUpdate images on the “Step 2: Update images” page according to the following image requirements:  App Store\tQuantity\tCategory\tImage size\tNaming conventioniOS\t10\tiPhone 5.5\t1242 x 2208 px\tiphone55-screen-1.png iPhone 6.7\t1290 x 2796 px\tiphone65-screen-1.png iPad 12.9\t2048 x 2732 px\tipadPro129-screen-1.png iPad 2nd gen\t2048 x 2732 px\tipadPro2ndGen-screen-1.png Android\t8\tImages\t320 x 569 px\t1_en-US.png 1\tFeature graphic\t1024 x 500 px\tfeatureGraphic.png  Export the images. Important: Verify that both “ignore overlapping layers” and “include bounding box” are checked before exporting. For iOS, images must not include a transparency/alpha layer. Figma does not have a way to remove this from your PNG export, but the Export Opaque PNG plugin can be installed and used. Alternatively, you can follow these steps using the Preview app on Mac.For Android, images should be exported at 4x and can be up to 8 MB per screen. The The feature graphic should be exported at 1x and can be up to 1 MB. Frames in Figma are currently named according to the app store requirements. Optimize the images using Imageoptim. Upload the images to the Google Drive. In the Github ticket, alert product that the images are located in the Google Drive and are ready for review. After product approval, the branch can be merged into the main Figma file.  ","version":"Next","tagName":"h3"},{"title":"Product: Publish the content​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#product-publish-the-content","content":" All changes should be made to the files in the repo and not directly to the stores. Android files should be in the folders inside the images filter – not in the images directory itself.  iOSAndroid  ","version":"Next","tagName":"h2"},{"title":"VA App Store​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#va-app-store","content":" Product should send the updated copy and images to the VA App Store team via email. Current contacts: Treva Lutes – treva.lutes@va.govDonna Rodriguez – donna.rodriguez@va.govGwen McMillian – gwendolyn.mcmillian@va.gov  ","version":"Next","tagName":"h3"},{"title":"What’s New Content​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#whats-new-content","content":" Android (Play Store)​  Go to GitHub using your web browser.Under the &lt;&gt;Code tab, go to the develop branch and search for the latest release version: release/v1.X.0 (it’s usually at the bottom).Go to the VAMobile folder and then select the ‘android’ folder.Select the ‘fastlane’ folder.Go to metadata/android/en-US folder.Go to changelogs folder and then select the default.txt file.To edit the &quot;What’s New&quot; content, select the edit icon.Remove the old text and replace it with the new &quot;What’s New&quot; content.Select &quot;Commit Changes&quot;. Add a brief description highlighting what has been changed (i.e. Updated android what’s new content) under the &quot;Commit Changes&quot; title. If this is your first change for the release branch continue with step 12-15.If this is not your first change being added to the branch, then follow steps 16-17.Select option ‘Create a new branch for this commit and start a pull request’. Update the branch name (try to be as descriptive as possible – i.e update-store-for-release-1.X.0) Select &quot;Propose Changes&quot; and you will be taken to the Pull Request screen.Update the title with what change has been made (i.e. Update What’s New Content)Update the description to include details of what changes are being made (i.e Updating What’s New Content)Select &quot;Create pull request&quot; button. Now, the pull request is tied to the release branch.  iOS (App Store)​  Go to GitHub using your web browser.Under &lt;&gt;Code go to the develop branch and search for the branch previously created above in step 12 (it will have the release number in it).Go to the VAMobile folder and then select the ‘ios’ folder.Select the ‘fastlane’ folder.Select the ‘metadata’ folder.Select ‘en-US’ folder and then select the release_notes.txt file.To edit the &quot;What’s New&quot; content, select the edit icon.Remove the old content and replace it with the new &quot;What’s New&quot; content.Select &quot;Commit Changes&quot; and update the title. Add a brief description highlighting what has been changed (i.e. Update ios store what’s new content).Select &quot;Commit change directly to the branch&quot; button. The branch that you previously created in step 12 above should be displayed (update-store-for-release 1.x.0). Select &quot;Commit Changes&quot; and the change should be complete.  Validating your work​  Go to ‘Pull Request’ in the top navigation bar.You should see the pull request that was created (i.e. Update store content) and select it.Select &lt;&gt; Commits and you should see a list of the 2 commits that you made.Select ‘File changed’ on the nav bar to verify the changes. You will see the old text highlighted in red and the new changes highlighted in green.  ","version":"Next","tagName":"h3"},{"title":"Feature Description​","type":1,"pageTitle":"Updating the app stores","url":"/va-mobile-app/docs/Operations/Updating the App Stores#feature-description","content":" iOS (App Store)​  Go to GitHub using your web browser.Under &lt;&gt;Code, go to the develop branch and search for the branch previously created above in step 12.Go to the VAMobile folder and then select the ‘ios’ folder.Select the ‘fastlane’ folder.Select the ‘metadata’ folder.Select ‘en-US’ folder and then select ’description.txt’.Select the edit icon to edit ’description.txt’.Add or modify description text.Select &quot;Commit Changes&quot; and update the title. Add a brief description highlighting what has been changed (i.e. Update description text). You can add additional details in the optional extended description, as well.Select &quot;Commit change directly to the branch&quot; button. The branch that you previously created in step 12 above should be displayed (update-store-for-release 1.x.0). Select &quot;Commit Changes&quot; and the change should be completed.  Android (Play Store)​  Go to GitHub using your web browserUnder &lt;&gt;Code, go to the develop branch and search for the branch previously created above in step 12.Go to the VAMobile folder and then select the ‘android’ folder.Select the ‘fastlane’ folder.Select the ‘metadata/android/en-US’ folder.Select ‘full_description.txt’.Select the edit icon to edit ’description.txt’.Add or modify description text.Go down to &quot;Commit Changes&quot; and update the title. Add a brief description highlighting what has been changed (i.e. Update description text). You can add additional details in the optional extended description, as well.Select &quot;Commit change directly to the branch&quot; button. The branch that you previously created in step 12 above should be displayed (update-store-for-release 1.x.0). ","version":"Next","tagName":"h3"},{"title":"Updating the doc site","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Updating the doc site/","content":"Updating the doc site For people who are comfortable with maintaining and troubleshooting setup on their local machine, this section covers all the steps necessary to initially get set up to update the VA Mobile documentation site (Part 1) as well as to update it each time after that (Part 2). For people who do not want to maintain and troubleshoot setup on your local machine, skip straight to Part 2.","keywords":"","version":"Next"},{"title":"Setting up to update the VA Mobile doc site","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Updating the doc site/Gettingsetup","content":"","keywords":"","version":"Next"},{"title":"1. Download & install Git​","type":1,"pageTitle":"Setting up to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/Gettingsetup#1-download--install-git","content":" Instructions: Git - Installing Git  On Mac:​  Open Terminal (It’s in Applications &gt; Utilities; you can also use Spotlight to find it by pressing CMD + Spacebar on your keyboard and typing in the word “terminal.”    To run Git, type git and then hit enter. If not installed, it will prompt you to install (hit “install”).    If already installed, it will look like this:    On Windows:​  Git - Downloading Package  ","version":"Next","tagName":"h3"},{"title":"2. Download & install a text editor​","type":1,"pageTitle":"Setting up to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/Gettingsetup#2-download--install-a-text-editor","content":" For example: Sublime Text or TextMate(You can do this while Git is downloading).  ","version":"Next","tagName":"h3"},{"title":"3. Download & install GitHub Desktop​","type":1,"pageTitle":"Setting up to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/Gettingsetup#3-download--install-github-desktop","content":" a. Download GitHub Desktop​  (You can also do this while Git is downloading).  GitHub DesktopGetting started with GitHub Desktop - GitHub Docs  b. Install GitHub Desktop​  Open the ZIP file. When Finder comes up, you will want to drag the application into the Applications folder. (Not running GitHub Desktop from the Application folder could cause problems with the app.)    Open the GitHub app from either the Finder window or using quick search ⌘ + Space and type “GitHub desktop”.  The first time you open the app, you may see a warning:    If so, click Open.  c. Set up GitHub Desktop​  (You need to have Git installed to do this step). When the app opens it may ask you to log into GitHub. Once you are logged in you should see a screen like this:    Wait until your repositories list loads on the right.  Get connected to the va-mobile-app repository​  Once the list has loaded, scroll or use search until you find department-of-veterans-affairs/va-mobile-app. Click on the respiratory name (department-of-veterans-affairs/va-mobile-app). You should get an option to clone the repository (button at the bottom):https://github.com/department-of-veterans-affairs/va-mobile-app    Cloning the va-mobile-app repository​  Click the “Clone department-of-veterans-affairs/va-mobile-app” button. A modal will pop up (see below).    Choose the local path on your machine where you want to save it and click the “Clone” button (Documents is a good place, but anywhere but Desktop is a fine place to put it).  You will then see a loading screen:    When the repository has finished cloning, your Github Desktop screen will look like this:    Your tools are now set up and ready for you to make changes to the Doc site!  ","version":"Next","tagName":"h3"},{"title":"4. Set up Docusaurus​","type":1,"pageTitle":"Setting up to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/Gettingsetup#4-set-up-docusaurus","content":" The VA Mobile documentation website is built using Docusaurus 2, a modern static website generator. There are several steps you’ll need to take to get it set up. See also: Docusaurus Installation.  On Mac:​  Open Terminal. Download &amp; install these things in the following order: Download &amp; install home brewDownload &amp; install node and npmDownload &amp; install yarn  On Windows:​  Open Command Line. Download &amp; install these things in the following order: Download &amp; install nodeDownload &amp; install npmDownload &amp; install yarn  To set up Docusaurus, you will need to do two things.  First: Open the VAMobile folder in Terminal or Command Line.​  To do this, use the Finder to navigate to the folder where the doc site is on your machine: somefolderonyourcomputer/VAMobile    Back in Terminal/Command Line, type cd and then a space, then drag and drop the somefolderonyourcomuter/VAMobile/ folder from the finder into Terminal/Command Line. It will look like this:    Hit enter. Type yarn and hit enter again.  Next: Navigate to the doc site repository folder in Terminal/Command Line.​  To do this, use the Finder to navigate to the folder where the doc site is on your machine: somefolderonyourcomputer/VAMobile/documentation    Back in Terminal/Command Line, type cd and then a space, then drag and drop the somefolderonyourcomputer/VAMobile/documentation folder from the finder into terminal. It will look like this:    Hit enter. To install Docusaurus, type yarn and hit enter again.Docusaurus is now installed! ","version":"Next","tagName":"h3"},{"title":"How to update the VA Mobile doc site","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update","content":"","keywords":"","version":"Next"},{"title":"Updating the site using codespaces​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#updating-the-site-using-codespaces","content":" Follow these steps each time you want to make an update to the VA Mobile doc site via codespaces (here's the github documentation for codespaces, which get you &quot;up and coding faster with fully configured, secure cloud development environments native to GitHub.&quot;)  You need:  A browserAccess to the mobile app repo  ","version":"Next","tagName":"h2"},{"title":"1. Create a new branch to edit pages & make your changes​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#1-create-a-new-branch-to-edit-pages--make-your-changes","content":" Go to the mobile repo branches page, and tap the green &quot;New Branch&quot; button near the top righthand corner of the page.  Type a branch name for your branch following this pattern: doc, then your initials, then what you're updating, all separated by dashes. (Ex: doc-tkd-codespaces-addition).  Keep the default source selection of develop, and tap &quot;Create new branch&quot;.  The branch that's created will appear in the middle of the page, as the first branch listed in the &quot;Your branches&quot; section. Tap on the blue URL branch name to be brought to the home page of your branch.  Now you have a place where you can make edits to the doc site!  ","version":"Next","tagName":"h3"},{"title":"2. Launch a codespace for your branch​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#2-launch-a-codespace-for-your-branch","content":" You can use codespaces to make changes, and see them rendered on a preview version of the doc site, so let's get a codespace running for your branch.  Tap on the green &quot;Code&quot; dropdown button near the top righthand corner of your branch's homepage.  If you don't have any codespaces, you can use the big green button to make a new one.If you have a codespace (on any branch), and need a new one for this branch, you can use the &quot;+&quot; button to make a new one.If you have a codespace for this branch that you'd like to jump back into, you can tap on the codespace name (a randomly generated phrase, like &quot;silver guppies&quot; or &quot;friendly meme&quot;)  This will launch a new tab in your browser, and the codespace will automatically start setting itself up. Give it a minute to fully load.  Now you’re ready to start making edits to the doc site!  ","version":"Next","tagName":"h3"},{"title":"3. Open the repository in the codespace, and make your changes​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#3-open-the-repository-in-the-codespace-and-make-your-changes","content":" Codespaces automatically run a version of VS Code (Visual Studio Code). You'll need to open up the folders where the doc site lives, to create new pages or edit existing ones.  In the EXPLORER on the lefthand side, tap to expand the folders: &quot;VAMobile&quot;, then &quot;documentation&quot;, then &quot;docs&quot;. The folders at this level are the sections of the doc site, so navigate from here to the md file(s) where you want to make your changes.  Create or edit the files you need, then use CTRL+S to save each one.  ","version":"Next","tagName":"h3"},{"title":"4. Preview the changes you've made to the doc site​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#4-preview-the-changes-youve-made-to-the-doc-site","content":" Codespaces automatically set up a preview version of the doc site when it launched, but that won't have the changes you've made. You'll need to launch a new preview doc site, to review changes you've made &amp; saved.  Select the &quot;Terminal&quot; tab from the tabs in the ~bottom third of your screen, then the &quot;+&quot; button to the far right (still in that bottom third) to open a new Terminal. Wait ~5 seconds for the new terminal to get up and running.  In the terminal, change to the location of the documentation site by typing (or copy-pasting) this, then tapping Enter: cd VAMobile/documentationThen, launch a new doc site by typing this command, then tapping Enter: yarn start  It's going to give you a warning that something is already running on port 300 (that's the preview doc site WITHOUT your changes that codespaces set up automatically). Go ahead and type &quot;y&quot; in response to the question about running it on another port.  This opens up a new tab, and starts loading your preview version of the doc site.  The page that initially loads will always look broken - don't panic! It's because codespaces is jumping you to a junk URL that doesn't exist, not an actual problem. Go ahead and use the header to navigate to the pages you've made/edited, and review them.  If you want to make further changes, you can switch back to the tab with your open codespace, and then repeat steps 3 &amp; 4 (using the 'refresh' button on your preview doc site to get new changes as you make them).  ","version":"Next","tagName":"h3"},{"title":"5. Stage, commit and sync your doc site changes​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#5-stage-commit-and-sync-your-doc-site-changes","content":" When you're finished with your changes, you'll need to get the changes off of the codespace, and back to your branch in github.  Go to the Source Control page, by tapping on the Merge icon with the blue '#' notification icon on it, along the far lefthand side of the screen.  It will include a list of all of the files you've changed - review that to make sure that all of the files you expect are in there. Press the &quot;+&quot; button in the row with each file's name, to stage the change (staging is a fancy way to say &quot;mark as a file you want to commit&quot;)  Type a note about the changes you're making in the text box at the top of the source control area (with the preview text in it that starts with 'Message'), then tap the green &quot;Commit&quot; button (this commits all of the files you've staged, to the version of your branch that lives in this codespace. Yes, this is a lot of steps, but generally the point is to make it difficult to accidentally get code off of/out of your machine.)  Finally, you'll tap the green &quot;Sync&quot; button (that has replaced the green commit button) to sync the changes from the codespace, to your branch in github. This can take a minute or longer.  ","version":"Next","tagName":"h3"},{"title":"6. PR things​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#6-pr-things","content":" Skip down to the shared documentation section about how to create and merge a pull request with your changes, and follow those instructions.  Get ready for those instructions by pulling up the mobile app repo home in your browser: https://github.com/department-of-veterans-affairs/va-mobile-app.  ","version":"Next","tagName":"h3"},{"title":"Updating the site from your local machine​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#updating-the-site-from-your-local-machine","content":" Follow these steps each time you want to make an update to the VA Mobile doc site.  You need:  A folder on your computer where you’re making changes to markdown (.md) files (open in Finder)GitHub DesktopA text editor (like Sublime text)Terminal/Command LineA browserAccess to the mobile app repo  ","version":"Next","tagName":"h2"},{"title":"1. Get the latest version of the live doc site to work from​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#1-get-the-latest-version-of-the-live-doc-site-to-work-from","content":" To get the latest version, open** GitHub Desktop**. Make sure the current repository says “va-mobile-app” and the current branch is set to “develop.” Click “Pull/Fetch origin” to get the latest version of the site.    ","version":"Next","tagName":"h3"},{"title":"2. Create a new branch to edit pages & make your changes​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#2-create-a-new-branch-to-edit-pages--make-your-changes","content":" (Do not work directly in develop). Open the current branch menu and choose the “new branch” button option.    Give the new branch a unique name. Make sure it’s based on the develop branch &amp; then click “Create branch”.    The current branch should now show the name of the branch you created:      Now you have a place where you can make edits to the doc site!  ","version":"Next","tagName":"h3"},{"title":"3. Get set up to view changes to your local copy of the doc site in a browser​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#3-get-set-up-to-view-changes-to-your-local-copy-of-the-doc-site-in-a-browser","content":" To be able to see the changes you’re going to make to md files rendered in a browser, you need to run the local version of the doc site on your computer.  First, open Terminal/Command Line.    Then use the Finder to navigate to the folder where the doc site is on your machine: somefolderonyourcomputer/VAMobile/documentation    Back in Terminal/Command Line, type cd and then a space, then drag and drop the somefolderonyourcomputer/VAMobile/documentation folder from the finder into Terminal/Command Line. It will look like this:    Hit enter. Then type yarn start and hit enter again. It will then do this:    It will also automatically open a new browser window where changes to your files will be rendered (if you see an alert, give it permission to open your browser). The URL bar for that new window will look like this:    Now you’re ready to start making edits to the doc site!  ","version":"Next","tagName":"h3"},{"title":"4. Open the repository in your text editor to edit, create new and save md pages​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#4-open-the-repository-in-your-text-editor-to-edit-create-new-and-save-md-pages","content":" To create a new md page: Open the Doc site folder within your text editor and choose “New File”. The new page will open in the text editor.To edit an existing md page: Open the Doc site folder within your text editor &amp; select the file you want to edit. The page will open in the text editor.    Edit the md file and save it, then switch to your browser window to view the changes rendered onscreen. Review updates in your browser as you go to make sure everything looks as you expect.    Once you’re happy with all of your edits, it’s time to build the site &amp; submit your changes!  ","version":"Next","tagName":"h3"},{"title":"5. Build the doc site locally to review changes before publishing​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#5-build-the-doc-site-locally-to-review-changes-before-publishing","content":" Once you are done editing you need to build the site. This step generates a static version of the site, which is the same as how it is served on the live Doc site. It should look the same as the development environment you have been running.  First, stop/kill the dev site. To do this, go to Terminal/Command Line and type inCTRL + C to stop/kill the dev site.  Next, you’re going to build the site. In Terminal/Command Line, type in yarn build and press enter.  The site will build and display any errors it finds. Check and make sure everything looks good. Note that if you make changes you will have to run build again to see them, unlike with the development server which auto updates for faster development.  If you’d like someone else to review your branch before publishing them, you should commit your changes and publish your branch following the steps below, but don’t create a pull request.  ","version":"Next","tagName":"h3"},{"title":"6. Publish your changes to the live doc site​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#6-publish-your-changes-to-the-live-doc-site","content":" To push your changes to the live Doc site, you first need to check your changes, and get those changes approved by someone else on the team. You can do this by publishing the changes &amp; creating a pull request.  Commit changes  First, open GitHub Desktop. It will show all of the pages you changed in the Changes tab on the left. If you click on a file, you can see the set of changes for each file (called a diff). Green indicates a line was added. Red indicates the line was deleted.  Make sure only the boxes next to the pages you want to update are checked. At the bottom of that column, write a summary of the changes you made (in case someone needs to review the history and can easily tell what you were up to) and then click “Commit” to save the changes.    GH Desktop should then show you a screen that says “No local changes” again. If you have more changes or more commits, go ahead and do those now. Once you have all the changes you want to make, you will need to publish your branch so that you can make a pull request.  Publish branch  In order to make a Pull Request and add your changes back onto the base branch, you will need to copy your local branch up onto the GitHub server. To do this, you just need to go to the GH Desktop app, and click either the Publish Branch tab at the top or the Publish Branch button in the Publish your branch area.    The branch should get pushed up to the repository and you should then see an area to Create Pull Request.    Create a pull request​  Click the Create Pull Request button. This should open a browser window that takes you to a Pull Request template in the repository (You can also open the docsite in Github in your browser: https://github.com/department-of-veterans-affairs/va-mobile-app)    Click “Compare &amp; pull request.” You will see this:    Before you create the pull request, do the following things:  Make sure the base is set to “develop”Github will automatically choose reviewers for you, but you can also choose two people to review your request.Scroll down to compare the changes between branches.  If all is well, click Click the green “Create pull request” button.  Your PR has been created!​  Wait for it to be reviewed by two team members.  ","version":"Next","tagName":"h3"},{"title":"7. Deploying your branch to the doc site​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#7-deploying-your-branch-to-the-doc-site","content":" After your pull request receives two approvals, click the green “merge pull request” button at the bottom of the pull request page in Github, followed by the “confirm merge” button in the next step.  Your branch will then begin deploying to the doc site and will be live once the merge is complete.  To track the status of the build, click “Actions” in Github. Next, find and select &quot;[Documentation] Deploy Site&quot; in the left-hand panel.The build will have a yellow icon while the branch is deploying to the doc site and a green check icon once it is complete.  ","version":"Next","tagName":"h3"},{"title":"Further reading​","type":1,"pageTitle":"How to update the VA Mobile doc site","url":"/va-mobile-app/docs/Operations/Updating the doc site/how to update#further-reading","content":" How to use GitHub Desktop and Sublime text to make pull requests (General - not specific to Doc site)More info on [how to navigate files and folders in Terminal/Command Line](https://www.macworld.com/article/221277/command-line-navigating-files-folders-mac-Terminal/Command Line.html).Markdown cheatsheet ","version":"Next","tagName":"h3"},{"title":"Product Management","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Product/","content":"Product Management VA Mobile app Product Management resources can be found on github.","keywords":"","version":"Next"},{"title":"Resources","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/Product/Resources","content":"Resources Product management resources for the VA Mobile app.","keywords":"","version":"Next"},{"title":"QA","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/","content":"QA The QA team for the VA mobile app does manual, automated, and accessibility testing. Explore the menu at left for more detail.","keywords":"","version":"Next"},{"title":"How we work","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/HowWeWork/","content":"","keywords":"","version":"Next"},{"title":"When is our testing \"good enough\"?​","type":1,"pageTitle":"How we work","url":"/va-mobile-app/docs/QA/HowWeWork/#when-is-our-testing-good-enough","content":" Good software testing happens with the keen awareness that it is impossible to &quot;find all the bugs&quot; (limitations in time, resources, tooling, and knowledge; not to mention inevitable changes in data, processes, software, and systems our software integrates with). Therefore, a highly-functional QA team knows when to stop vs continue working on a given task. On our team:  ","version":"Next","tagName":"h2"},{"title":"We stop preparing for testing activities when:​","type":1,"pageTitle":"How we work","url":"/va-mobile-app/docs/QA/HowWeWork/#we-stop-preparing-for-testing-activities-when","content":" we are sufficiently aware of how our software and interacting systems can break and what kinds of problems are the most important to find, andwe have what we need (tools, data prep, etc) to be able to look for those problems.  ","version":"Next","tagName":"h3"},{"title":"We stop testing when:​","type":1,"pageTitle":"How we work","url":"/va-mobile-app/docs/QA/HowWeWork/#we-stop-testing-when","content":" we've examined the product commensurate to the risk it contains,we've met our testing standards, andwe've expressed our testing plan and results, along with quality assessments, clearly.  ","version":"Next","tagName":"h3"},{"title":"Common misconception: QA makes the final decision​","type":1,"pageTitle":"How we work","url":"/va-mobile-app/docs/QA/HowWeWork/#common-misconception-qa-makes-the-final-decision","content":" QA is one of the last roles, if not the last role, involved in a given ticket; on some teams they are given gatekeeping authority over what software is released.  Within the VA mobile app space, PMs (in conjunction with stakeholders) make the final decision for what goes out the door. That is often explicit (such as new releases or new features) and, on a high-trust team, sometimes implicit (ex: QA stating a ticket meets the PM-set ACs does not need further review before merging into develop) ","version":"Next","tagName":"h2"},{"title":"Accessible Research Session Help","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help","content":"","keywords":"","version":"Next"},{"title":"Locating the VA: Health and Benefits app​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#locating-the-va-health-and-benefits-app","content":" With the recent update to iOS 18, users can now customize the appearance of their app icons without an additional shortcut or appearance customization app. There are options for light and dark mode for the app icons or to completely customize the color of the icons themselves. Prior to the update, we would have asked a sighted participant to locate the app icon with the white &quot;VA&quot; and blue background, however, a participant's app icon may no longer visually appear this way. On Android devices, it is also common for a user to customize their icons, font styles, etc. using shortcuts or apperance customization apps.  Instead of relying on the app icon's appearance to describe and verify that the participant has the VA: Health and Benefits app installed, you should consider building a few extra minutes into your research study plan to verify that the participant has the app by asking them to open the app and visually looking at the splash / login screen in their screen share.  If a third party company will be verifying this for you, notify your recruiter that they will need to request that the Veteran open the app and visually verify that they have the correct app installed. You should also consider supplying screenshots of the login screen to the recruiter in both dark and light modes, so that they have it to make the visual comparison themselves.  For screen reader participants who are using VoiceOver or TalkBack, no matter what color options or icon style they may have chosen to use on their device, both screen readers will still announce the app as &quot;VA&quot;.  ","version":"Next","tagName":"h2"},{"title":"iOS​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#ios","content":" ","version":"Next","tagName":"h2"},{"title":"How to enable screen sharing in Zoom when using VoiceOver​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#how-to-enable-screen-sharing-in-zoom-when-using-voiceover","content":" In Zoom, navigate/swipe to the &quot;share&quot; (button) and double-tapDouble-tap on the first option: &quot;screen&quot; (button)Double-tap on &quot;start broadcast&quot; (button)The participant will then hear a countdown (3, 2, 1) and the screen will begin broadcasting.  ","version":"Next","tagName":"h3"},{"title":"Screen Curtain​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#screen-curtain","content":" When VoiceOver is active and the participant has begun sharing their screen with you, you may notice that the screen is black and that you cannot see anything that is being shared. This is called screen curtain. If a participant has screen curtain enabled, you will not be able to see anything on the participants' screen unless they disable it.  Read instructions on how to disable screen curtain  note If you instruct a user to turn off screen curtain during a session, offer to help them re-enable it before ending the session. Provide these instructions (the same instructions used to disable it) while they are still sharing their screen so that you can verify that screen curtain is re-enabled.  ","version":"Next","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#android","content":" ","version":"Next","tagName":"h2"},{"title":"How to enable screen sharing in Zoom when using TalkBack​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#how-to-enable-screen-sharing-in-zoom-when-using-talkback","content":" By default, Zoom will typically default to &quot;active speaker&quot; mode. To display the toolbar, the participant can double-tap the screen with one finger.Once the toolbar is displayed in Zoom, the particpant should navigate/swipe to the &quot;share&quot; (button) and double-tap (&quot;share&quot; should be option 6 of 11 in the Zoom toolbar).The participant should navigate through the list until they get to &quot;screen&quot; (this is usually the 6th option in the list), then double-tap.The participant will then read out the disclaimer for sharing their screen. Instruct the participant to navigate to &quot;start now&quot; (button) and double-tap.After sharing the screen, Zoom will usually take the user out of Zoom and back to their home screen (or the last screen they were on prior to joining the meeting). Instruct them to return to the Zoom app to be able to access the chat area and access the link to the build.  note After the participant opens the Zoom app again, it will typically default them back to the share option, although it will now announce as &quot;stop share&quot; (Chat should be option 4 of 11 in the Zoom toolbar).  ","version":"Next","tagName":"h3"},{"title":"Screen Curtain / Screen Shade​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#screen-curtain--screen-shade","content":" Some Android devices do have the ability to enable screen curtain on their device. If a participant has shared their screen with you during a session and their screen is black, dimmed, or is not changing, it is possible that their device support screen curtain and that it is enabled. Unfortunately, there is not a simple gesture available to disable screen curtain.  To disable screen curtain on an Android device, the participant should:  Triple-tap the screen once or navigate to TalkBack settings within device settings (Settings &gt; Accessibility &gt; TalkBack) to open the TalkBack menu.Instruct the participant to locate an option for &quot;screen curtain&quot;, &quot;screen shade&quot;, or &quot;show screen&quot;. Depending on the participant's Android device manufacturer (Google, Samsung, etc.), this feature may have a different name or a different way of announcing / listing the feature. The participant should listen for an option that might impact the visibility of the device screen.Alternatively, they might also be ale to activate their voice assistant (Google Assistant, Bixby, etc.) and instruct the voice assistant to show their screen, disable screen shade/curtain, etc.(This step will depend on the participant's Android device) After they have located the option for the screen curtain / shade, they should follow any necessary steps to show their screen and disable screen curtain. This could be a simple double-tap gesture to show the screen or could take them to their TalkBack settings where they may need to toggle off the screen curtain.  note It is recommended that you ask the participant to talk you through the steps that they are taking to disable the screen shade / curtain and that you (or an observer) make a quick note so that you can help them reactivate it at the end of the session.  ","version":"Next","tagName":"h3"},{"title":"Additional Resources​","type":1,"pageTitle":"Accessible Research Session Help","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/a11y-research-session-help#additional-resources","content":" VoiceOver Gestures (iOS)TalkBack Gestures (Android)Inclusive Research for Screen Reader Users by Angela Fowler and Jamie Klenetsky Fay (Google Doc) Note: This guide is based on running inclusive research sessions with a computer and not on mobile devices. Not all of the information in the guide will apply to mobile-based research sessions. ","version":"Next","tagName":"h2"},{"title":"Meetings","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/HowWeWork/Meetings","content":"","keywords":"","version":"Next"},{"title":"QA team meeting philosophy​","type":1,"pageTitle":"Meetings","url":"/va-mobile-app/docs/QA/HowWeWork/Meetings#qa-team-meeting-philosophy","content":" Time and brainpower are the most important resources we manage as a QA team, because they are fundamental and finite. Where we spend our time and mental energy will determine what outcomes we can achieve.It's important for the QA team to attend meetings. We add value. We receive value. We bond with other folks on the team.It's important for the QA team to not go to meetings. Heads-down independent work is the time when we find bugs, improve processes, come up with novel testing strategies, etc.  ","version":"Next","tagName":"h2"},{"title":"Meeting review​","type":1,"pageTitle":"Meetings","url":"/va-mobile-app/docs/QA/HowWeWork/Meetings#meeting-review","content":" Periodically re-evaluating which meetings we attend generally and who goes to each meeting specifically helps us to avoid over-spending time on meetings and to play to the strengths of individuals on the team. (Individuals can always talk with the team or their manager if they have changes they want to make to their own meeting workoad. The overall review process is meant as a backstop to look at everything holistically on a semi-regular basis.)  The goals of review are:  For each individual on the team to be happy about the meetings they're attending. Ideally, everyone feels like they're going to the meetings where they give or receive the most value, or that match the best with their goals and skills.For the team overall to be attending meetings efficiently. Ideally, we're spending just enough time in meetings to meet our individual and team objectives, but no more than that. This could involve sending a representative (instead of multiple members of the team), keeping a recurring meeting on our calendar but only going when certain conditions are met, etc.  ","version":"Next","tagName":"h2"},{"title":"Inhale and exhale​","type":1,"pageTitle":"Meetings","url":"/va-mobile-app/docs/QA/HowWeWork/Meetings#inhale-and-exhale","content":" To gain the same value out of meetings while each person attends fewer meetings requires a shared set of expectations for the sole QA representative attending any given meeting.  Our expectations are that representatives will pay attention at the meeting (inhale) and share necessary information with the full team in our Slack channel (exhale). Examples of information we'd expect to share:  Times you spoke up in a meeting  “I had a lot of questions about how they’re going to implement the calendar feature for appointments, seems like there’s a lot of accessibility things to figure out there still.”  Things the whole team needs to know to do our jobs  “We're pausing all work on this feature. Hold off on writing test plans for the areas we assigned out last week, until further notice.&quot;  When you’re sensing a problem, or if there’s something to keep an eye out for  “My first round of testing for the migration turned up way more issues than we expected. I confirmed changes with the testing plan with Eng and Product at the feature check-in, and the rest of the team can expect a meeting invitation to get up to speed (so you can also start testing) sometime this week.&quot; ","version":"Next","tagName":"h2"},{"title":"Quality Assurance Process","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/","content":"","keywords":"","version":"Next"},{"title":"Test strategy​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#test-strategy","content":" We are taking an integrated approach to testing - building QA activities into the agile development process so that testing takes place early and often as a key part of sprint operations. Identifying issues during development will minimize technical and functional debt and make for better product quality and more accurate progress reporting and delivery status. In addition, we will leverage automated testing tools in the development delivery chain to provide real time unit, UI and service reliability (no documentation yet) checks.  ","version":"Next","tagName":"h2"},{"title":"Features to test​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#features-to-test","content":" Testing will be performed throughout the development process based on the prioritization and delivery of features in the product backlog. As product management prioritizes features and the development team implements those features, Quality Assurance will write associated test cases and execute those test cases, verifying that the features delivered meet the requirements and function as intended. Features that have not been prioritized and implemented will not be tested. For a detailed description of test and acceptance criteria please refer to the product backlog. At a high level, testing will cover the following functionality:  All delivered features related to login and authentication flows including biometric authenticationAll delivered features related to navigation and general app behaviorAll delivered features related to veteran access of information in the app (such as military history or disability rating)All delivered features related to veteran submission of information in the app (such as Rx refill, secure messaging, or file upload in claims)All delivered features related to notifications including push notificationsAll delivered features using accessibility controls (see accessibility test plan for more detail)  ","version":"Next","tagName":"h2"},{"title":"Who is responsible​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#who-is-responsible","content":" Software quality is a team effort. Developers will be responsible for writing unit tests. The product team will be responsible for user acceptance testing of the delivered features. Quality Assurance is responsible for writing automated UI tests and manually testing the product functionality and various user flows through the application.  ","version":"Next","tagName":"h2"},{"title":"Testing methods​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#testing-methods","content":" The following testing methods will be employed during development and testing of the VA Mobile App.  Method\tDescription\tPrimary OwnerUser Stories &amp; Acceptance Criteria\tRequirements are defined by the product team and written as user stories in the product backlog. Acceptance criteria (AC) are written as part of the user story and describe the conditions that must be met in order for the story to be accepted as complete.\tProduct Test Cases &amp; Functional Testing\tTest cases are defined by the QA team and are written not only to make sure all stories and their acceptance criteria are met but will also account for edge cases (scenarios that happen outside of normal operating conditions) like attempting to upload the wrong file type or entering text characters into a date field. Test cases are used to perform manual functional testing in which QA interacts with the application as would an end user to identify any issues.\tQA Unit Testing\tUnit tests are written into the code by developers and target the smallest components of the code that can be logically isolated from the rest of the system. These tests are typically fast and can run any time the code is changed to help identify and isolate defects during development. The purpose of unit tests is to make sure the code functions are defect-free before merging into the larger code base.\tDevelopers Integration Testing\tIn contrast to unit tests, integration tests run across individual modules of code to validate that separately developed modules are working together properly. Integration tests are also used to validate that the VA Mobile App front end interfaces with other systems and services, such as the VA.gov APIs, as designed.\tDevelopers End-to-end Testing\tEnd-to-end testing, or system testing, looks to validate that the system as a whole works as intended. These tests are similar in nature to integration tests but are focused on the superset of delivered software and its connections to other systems. End-to-end testing will be done prior to release and will consist of both manual and automated testing to ensure adequate coverage of the delivered functionality.\tDevelopers, QA, Product User Acceptance Testing\tUser Acceptance Testing, sometimes referred to as &quot;UAT&quot; or just Acceptance Testing, involves the product team and other stakeholders interacting with the application to simulate real-world usage and signing off that the delivered software functions as defined in the designs and requirements. We will leverage pre-production distribution tools such as TestFlight to get the app in the hands of stakeholders to facilitate Acceptance Testing.\tProduct, Stakeholder community Accessibility Testing\tAccessibility is a major requirement for the VA Mobile App and requires additional consideration beyond the standard testing process. QA will include accessibility checks in the manual functional testing activities. For a more detailed plan on accessibility testing approach see the Mobile Accessibility Testing Plan.\tDevelopers, QA Compatibility Testing\tSoftware may behave differently depending on the specific device and operating system that it is running on. In order to validate that the software developed will work as intended across a variety of devices we will also perform manual functional testing of each feature on a variety of physical devices and OSs as defined on the compatibility page.\t  ","version":"Next","tagName":"h2"},{"title":"Testing accounts and data​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#testing-accounts-and-data","content":" In order to support testing activities we will need test user accounts with test data that is representative of the variations anticipated in production user data. The purpose of test accounts and test data is to simulate the possible variations that may occur in production data to stress test the application and ensure it has been designed and built to accommodate real world user variance. Test user data variance, and uptime/availability of staging systems, is critical to efficient, low-risk delivery of new features and regression-testing existing features.  ","version":"Next","tagName":"h2"},{"title":"Bug tracking​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#bug-tracking","content":" Issues identified during a development sprint will be written up as new bug tickets, and attached to an epic (if relevant). The Product Owner may prioritize logged issues into upcoming sprints for the development team to address. Issue tickets are scoped at a 1 by default, and split into further tickets if Engineering investigation uncovers a heavier lift to fix than the default scoping.  All issue tickets should be written using the issue ticket template. Issues should be classified according to severity based on an agreed-upon scale.  ","version":"Next","tagName":"h2"},{"title":"Issue severity​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#issue-severity","content":" Severity\tDefinitionCritical (sev-1)\tIssues with both HIGH impact and HIGH frequency High (sev-2)\tIssues with either HIGH impact and LOW frequency, or LOW impact and HIGH frequency Low (sev-3)\tIssues with both LOW impact and LOW frequency  Impact definitions​  Impact\tDefinition\tExamplesHigh impact\tPrevents user from completing a task and/or direct violation of WCAG guideline\tCrashes, system hangs, file/data corruption, errors with no discoverable workaround, component doesn't function (i.e. broken link, button can't receive screen reader focus), etc. Low impact\tDoes not prevent user from completing a task; or area we can improve, even if following WCAG guidelines\tTypos, unclear messaging, repetitive information, errors with an easily discoverable workaround, button improperly labeled as a link, etc.  Frequency definitions​  Frequency\tDefinition\tExamplesHigh frequency\tAffects a component, screen, or action used by 15% or more of monthly users\t- Authentication/login - Home page (including What's New and Encouraged Update) - Category landing screens (Health, Benefits, Payments and Profile) - Feature landing and child screens for most-used features (Prescriptions, Upcoming Appointments, and Secure Messaging) - Feature landing and child screens for next-most-used features (Claims, Disability Rating, Letters, Payment History) - Key actions from the features already listed: med refill, sending a message (new or reply), and downloading a letter (decision or any other kind) Low frequency\tAffects a component, screen, or action used by 14% or fewer of monthly users\tAll other all screens and app actions (upload file, change demographic info, etc) not listed in high frequency examples Frequency examples informed by the Flagship Mobile Monthly Report   ","version":"Next","tagName":"h3"},{"title":"User-submitted Bug Reports​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#user-submitted-bug-reports","content":" The Mobile QA team monitors various bug reporting mechanisms to better serve our user base. Some of these mechanisms include: App Stores, Email, and miscellaneous message services. We manually collect these issues and file them into our backlog for review and triage as, &quot;user feedback.&quot;  We have four paths for an issue that is submitted:  If the issue is repeated in customer reports or shows evidence in monitoring tools, but we are unable to replicate, we will hold the issue in our backlog as a documented open issue.If we cannot replicate the issue or evidence points to strange transient network problems / isolated to a single user, we will label the issue as &quot;Closed - Can't Repro&quot; and close the issue.If we know the issue was previously fixed, we will label the issue as &quot;Closed - Deployed/Fixed&quot; and close the issue.If we are able to replicate the issue it will be evaluated for severity and assigned to the proper team for remediation.  ","version":"Next","tagName":"h3"},{"title":"Test activity reporting​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#test-activity-reporting","content":" QA activities will primarily be tracked in ZenHub as commentary on sprint stories or logged issues.  Activity\tSummaryAcceptance Criteria / Test Cases\tAdded to ZenHub and associated to user stories Issue Tickets\tMaintained in ZenHub  ","version":"Next","tagName":"h2"},{"title":"Mobile QA Overview​","type":1,"pageTitle":"Quality Assurance Process","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/#mobile-qa-overview","content":" In April of 2023, we recorded an 'overview of Mobile QA' presentation (presentation slides as PDF) with some VA stakeholders. Video clips for each (rough) topic include:  High-level diagram of QA process in feature implementationThe dwindling tail of bug fixes at the end of feature implementation, aka the feature armadilloWhat QA tests on any given ticketQA work outside of testingQA FAQs, aka elephants in the room ","version":"Next","tagName":"h2"},{"title":"Accessibility","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/","content":"","keywords":"","version":"Next"},{"title":"Accessibility principles​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#accessibility-principles","content":" ","version":"Next","tagName":"h2"},{"title":"Based on VA standards​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#based-on-va-standards","content":" The VA design system does not have comprehensive accessibility guidelines. However, it does provide accessibility samples and guidelines when it comes to design, content, and components. We base our design system on this existing system with modifications for native mobile apps.  ","version":"Next","tagName":"h3"},{"title":"Content takes center stage​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#content-takes-center-stage","content":" All content throughout the app is clear and direct to ensure that users understand the information presented to them. A more thorough explanation of our best practices for accessible content can be found on the content documentation page.  ","version":"Next","tagName":"h3"},{"title":"Go beyond guideline standards​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#go-beyond-guideline-standards","content":" The VA Mobile app targets WCAG 2.2 Level AA and Level AAA success criteria and section 508 guidelines. We also reference MCAG (Mobile Content Accessiblity Guidelines), when applicable. For more information, see the following resources:  WCAG 2.2508 guidelinesMCAG (Mobile Content Accessibility Guidelines)  ","version":"Next","tagName":"h3"},{"title":"Comprehensive disability support​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#comprehensive-disability-support","content":" We aim to provide a usable experience for all Veterans and include disability support for:  Individuals who use assistive technologyIndividuals with physical disabilitiesIndividuals with visual impairmentsIndividuals with hearing impairmentsIndividuals with mental or cognitive disabilities  ","version":"Next","tagName":"h3"},{"title":"Assistive technology support​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#assistive-technology-support","content":" Our app and components are tested for accessibility with automated and manual techniques. Users should expect to be able to access our app using modern assistive technologies. These include native and third-party tools like:  Screen readersSpeech recognition programsSupport for low vision and color blindnessBluetooth mouse and keyboardTools for readability  ","version":"Next","tagName":"h3"},{"title":"Beyond disabilities​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#beyond-disabilities","content":" We believe that accessibility also goes beyond disabilities and we strive to provide access to our app for users with limited connectivity and device performance.  ","version":"Next","tagName":"h3"},{"title":"The Section 508 law​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#the-section-508-law","content":" Section 508 is a federal law that requires all U.S. government agencies to make their electronic and information technology and data accessible to everyone. By law, agencies must provide people with disabilities the same level of access as those without disabilities.  ","version":"Next","tagName":"h3"},{"title":"Resources​","type":1,"pageTitle":"Accessibility","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/#resources","content":" Accessibility checklist for UX designersAccessibility checklist for content designersHaptic feedbackVA.gov mobile accessibility testing planNative mobile app accessibility resources &amp; articles ","version":"Next","tagName":"h2"},{"title":"Accessibility checklist for content designers","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers","content":"","keywords":"","version":"Next"},{"title":"Code quality​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#code-quality","content":" Good quality code is resilient which makes it compatible with a wider range of browsers and assistive technologies.  ","version":"Next","tagName":"h2"},{"title":"Language changes in the content should be identified.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#language-changes-in-the-content-should-be-identified","content":" Identify language changes within the content and identify for developers to markup.    ","version":"Next","tagName":"h3"},{"title":"Content structure​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#content-structure","content":" Structuring content helps people group information and work out what's important and what they need to read first. This structure must be shown visually and using code.  All content on the app should use plain language and avoid figures of speech, idioms, and complicated metaphors.All buttons, links, and labels should be unique and descriptive of what a user will find on the following screen.  ","version":"Next","tagName":"h2"},{"title":"Headings should be descriptive.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#headings-should-be-descriptive","content":" Write headings that are short and clear.Put meaningful words or essential information at the start of the heading.Make sure headings accurately describe the following content.  ","version":"Next","tagName":"h3"},{"title":"Headings should communicate content hierarchy.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#headings-should-communicate-content-hierarchy","content":" Introduce each content section with a heading.Use heading levels to reflect a logical content hierarchy.Begin the main body content with a heading that describes the page. Only one primary (web equivalant to an H1) should be used per screen and should make it clear to a user what information will be found on that screen.Communicate the heading structure to developers, if it’s unclear.  ","version":"Next","tagName":"h3"},{"title":"Group related items as lists.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#group-related-items-as-lists","content":" Use numbered lists when the order of items matters.Use bulleted lists where there is no clear order.    ","version":"Next","tagName":"h3"},{"title":"Forms​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#forms","content":" Clear instructions for entering or fixing information will help a user complete a form quickly and correctly the first time. Using autocomplete and giving someone a chance to review information helps reduce the amount of typing.  Put information that relates to the whole form before the start of the form.Check that all required fields are visually identified.Check that each label makes the field’s purpose clear.Offer clear help text to help people enter information correctly.Within a process that requires the user to enter the exact information more than one time after the user provides the data once, at least one of the following should be true: The fields are auto-populated, orThe user can choose to auto-populate the fieldsExcept when: The information is required to ensure the security of the content, orThe previously entered information is no longer valid.  ","version":"Next","tagName":"h2"},{"title":"Messages should tell you what and how to fix an error.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#messages-should-tell-you-what-and-how-to-fix-an-error","content":" Identify where mistakes are and describe the issue in language people will understand.When there is an option for it, error messages include suggestions for revision, except when: The information may jeopardize the security or privacy of the user. (MCAG) Write error messages to be as specific as you can, rather than using generic messages.Avoid putting links inside error message text.If a user input results in an error, the item in error should be clearly marked. (MCAG)If a user input results in an error, the error is described by text. (MCAG)Error messages should be located next to the item in error.  ","version":"Next","tagName":"h3"},{"title":"Sensitive Transcations Error Prevention (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#sensitive-transcations-error-prevention-mcag","content":" When users submit any action involving financial transactions, legal commitments, or authorization to access or change data owned by users, at least one of the following should be true: There is a mechanism that validates the user inputs and provides an option to correct errors, orThe user can check and confirm the data before executing the transaction, orThe submission is reversible.    ","version":"Next","tagName":"h3"},{"title":"Images​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#images","content":" Images, including icons, that are meaningful must have a text alternative (alt text) so that users who can’t see them, can still get the same visual information they contain.  ","version":"Next","tagName":"h2"},{"title":"Informative images need alt text, but decorative images don’t.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#informative-images-need-alt-text-but-decorative-images-dont","content":" Describe the meaningful information in informative images using alt text.Identify decorative images so developers can code them correctly.Avoid using images containing informative text unless it’s a logo or the information is available somewhere else.  ","version":"Next","tagName":"h3"},{"title":"Complex images should have alternatives.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#complex-images-should-have-alternatives","content":" Provide alt text that briefly describes the image, andInclude a detailed text description of the complex image.    ","version":"Next","tagName":"h3"},{"title":"Links​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#links","content":" Links must clearly tell users where the link will take them and they must be easy to see.  Confirm that the link text describes the link’s destination.Avoid using URLs as link text.Use the same link text to describe links that go to the same destination.Avoid using title attributes on links.Include file format and size information in links to non-web pages.Put essential information about the link destination at the front of the link text.    ","version":"Next","tagName":"h2"},{"title":"Multimedia​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#multimedia","content":" Multimedia content can offer users an alternative to text. Everyone can watch or listen if you give them options to turn on captions, read a transcript, listen to a description of visual content, or watch a sign language translation of the content.  ","version":"Next","tagName":"h2"},{"title":"Pre-recorded audio-only content should have alternatives.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#pre-recorded-audio-only-content-should-have-alternatives","content":" Provide a transcript of audio information for pre-recorded audio-only content.  ","version":"Next","tagName":"h3"},{"title":"Pre-recorded video content should have alternatives.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#pre-recorded-video-content-should-have-alternatives","content":" Provide captions for audio in video content.Provide a descriptive transcript or audio description for visual information.Provide audio description of visual information for video content.Provide a descriptive transcript of audio and visual information for video content.  ","version":"Next","tagName":"h3"},{"title":"Live video content should have alternatives.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#live-video-content-should-have-alternatives","content":" Provide captions for live video content.Ask presenters to describe all important visual information in their dialogue.Ask presenters to use audio-described videos in their presentations.  ","version":"Next","tagName":"h3"},{"title":"Live audio-only content should have alternatives.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#live-audio-only-content-should-have-alternatives","content":" Offer live captions or text streams for live audio-only content.    ","version":"Next","tagName":"h3"},{"title":"Navigation​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#navigation","content":" Users want to navigate around the app easily. A user’s confidence in an app will build when they know where they are and that layouts are applied consistently.  Provide a descriptive title for each page or view. The screen title should describe its' context. (MCAG) Each screen title should be unique. (MCAG)Provide a unique name for common page regions that are used more than once on a page.The order of elements on the screen should make sense and reflect the content hierarchy of the screen. (MCAG)  ","version":"Next","tagName":"h2"},{"title":"Logical Content Grouping (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#logical-content-grouping-mcag","content":" Elements forming a single context unit should be grouped together so they are announced by assistive technologies as a single element.  When browsing through the screen with a screen reader or a similar assistive technology, ensure that elements that assemble a single context (i.e. a button, its' text, and its' icon or an image and its' caption) are announced as one unit and that each of its parts is not announced separately.    ","version":"Next","tagName":"h3"},{"title":"Sensory​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#sensory","content":" Information that relies on sensory perceptions (like color or sound) to relay meaning, needs to consider users who won’t receive those sensory clues and offer another way to get the same meaning.  ","version":"Next","tagName":"h2"},{"title":"Communicate information using multiple accessible methods.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#communicate-information-using-multiple-accessible-methods","content":" Add another method if using color to communicate important information.Add visual cues if you’re using auditory-only cues for notifications.Write instructions that don’t rely on someone perceiving color, shape, size, location, or sound to be understood.    ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#tables","content":" Tables help users interpret information with a structural relationship between headings and data. Tables use visual styles and semantic code to make them easier to read.  ","version":"Next","tagName":"h2"},{"title":"Tables should be easy to read.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#tables-should-be-easy-to-read","content":" Break up complex tables into smaller simple tables, where possible.Include content in all header cells.  ","version":"Next","tagName":"h3"},{"title":"Tables should be easy to find and navigate.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#tables-should-be-easy-to-find-and-navigate","content":" Identify a table using a caption.Give complex tables a text summary.    ","version":"Next","tagName":"h3"},{"title":"Text styles​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#text-styles","content":" Text on web pages must be easy to read, see and scan. Accessible text makes the reading experience better for everyone.  ","version":"Next","tagName":"h2"},{"title":"Text should be easy to scan and read.​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#text-should-be-easy-to-scan-and-read","content":" Avoid overusing text formatting, like underline, bold, italic and all caps.Left-align text. Avoid using right-align, center, or justified text.    ","version":"Next","tagName":"h3"},{"title":"Unique Labels (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#unique-labels-mcag","content":" Interactive elements' labels and accessible names should be unique, except when elements have the exact functionality.    ","version":"Next","tagName":"h2"},{"title":"Scaled Text Legibility (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#scaled-text-legibility-mcag","content":" Text blocks should not be written in all capital lettersText blocks should not be written entirely in italicsText blocks should not be written in lighter or thinner font weights. A minimum font weight of 400 is recommended.Text blocks should not be set to have a justified alignment. All inter-word spacing should be even and consistent.Text line lengths should not exceed 70 characters per row, including spaces, using the default font size / zoom settings.    ","version":"Next","tagName":"h2"},{"title":"Predictability (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#predictability-mcag","content":" Users should remain in the same context (i.e. screen, modal, alerts) when they enter or update values in controls and form elements, except when: Users are informed about the context change up front. No significant content or structure changes should occur when users enter or update values in controls and form elements, except when: The changes are due to filtering or sorting actions, andUsers can predict the changes, andThe location of the focus and assistive technologies in the UI is kept Users should remain in the same context (i.e. screen, modal, alerts) when they shift the focus to any control or form elementNo significant content or structure changes should occur when users shift the focus to any control or form element  ","version":"Next","tagName":"h2"},{"title":"Consistent Help (MCAG)​","type":1,"pageTitle":"Accessibility checklist for content designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-content-designers#consistent-help-mcag","content":" Help mechanisms and help center links should be visually located consistently across all screens.Help mechanisms and help center links should be programmatically located consistently across all screens.Help mechanisms and help center links should have the exact same identifying names across all screens.    Note: Most of the current content was borrowed from the Accessibility Not-Checklist (altered for mobile apps). Content / tasks will be updated as these lists move forward. ","version":"Next","tagName":"h2"},{"title":"Mobile Content Accessibility Guidelines (MCAG)","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/","content":"","keywords":"","version":"Next"},{"title":"What is MCAG?​","type":1,"pageTitle":"Mobile Content Accessibility Guidelines (MCAG)","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/#what-is-mcag","content":" ","version":"Next","tagName":"h2"},{"title":"Accessibility Guidelines for Mobile Apps​","type":1,"pageTitle":"Mobile Content Accessibility Guidelines (MCAG)","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/#accessibility-guidelines-for-mobile-apps","content":" The Mobile Content Accessibility Guidelines (MCAG) include the requirements of the Web Content Accessibility Guidelines (WCAG) version 2.2, but also refers to the unique differences and challenges of mobile apps that are not included in WCAG.  MCAG follows the same structure as WCAG. However, since its use is intended for development teams, its internal division relies more on Apple's Human Interface Guidelines and Android's Accessibility Principles.  Since there is no specific guidance within WCAG for mobile app teams to follow, there are many accessibility considerations that often fall into a “gray area”. MCAG fills in a lot of those blanks and when used in conjunction with WCAG, there are very few gaps that remain.  ","version":"Next","tagName":"h3"},{"title":"WCAG vs. MCAG​","type":1,"pageTitle":"Mobile Content Accessibility Guidelines (MCAG)","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/#wcag-vs-mcag","content":" WCAG is designed for web technologies and practices. Not all WCAG success criteria are mapped to mobile and there are issues specific to mobile that WCAG does not cover. WCAG naturally refers to keyboard usage widely since it is the most essential assistance technology for the web and many mobile accessibility features are not considered.WCAG 3 may include guidelines for native mobile apps, but it will likely be several years until this work is complete and an official set of guidelines are published. In the first draft of WCAG 3 (released on May 16, 2024), there are multiple mentions of the guidelines covering “apps”. Previously, the WAI (Web Accessibility Initiative) had said that they would remain web-focused since the “W” stands for “web”. WCAG 3 says: “The goal of WCAG 3 and supporting documents is to make digital products including web, ePub, PDF, applications, mobile apps, and other emerging technologies more accessible and usable to people with disabilities.” ","version":"Next","tagName":"h3"},{"title":"Accessibility checklist for UX designers","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers","content":"","keywords":"","version":"Next"},{"title":"Adaptable UI​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#adaptable-ui","content":" An adaptable user interface (UI) works for everyone. Someone’s screen size or text settings should never stop them from seeing and using anything.  ","version":"Next","tagName":"h2"},{"title":"Visual layouts should be flexible and adapt to a user’s preferred setup.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#visual-layouts-should-be-flexible-and-adapt-to-a-users-preferred-setup","content":" Design content that is visible and usable from 320 to 1280 pixels.Design layouts that adapt between portrait and landscape mode.Ensure that the app is fully mobile responsive including when a user has their text size increased or are zooming in.Check your design in specialized browsing modes (i.e. Dark Mode, High Contrast Mode, or Inverted Colors). If your content is still legible and icons, borders, links, form fields, etc. are still present, no adjustments are needed.Do not use horizontal scrolling and ensure that none of the app elements are broken that would allow for horizontal scrolling.    ","version":"Next","tagName":"h3"},{"title":"Color contrast​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#color-contrast","content":" A minimum contrast between two colors is necessary so that a user can perceive both colors separately.  ","version":"Next","tagName":"h2"},{"title":"Text / copy​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#text--copy","content":" Ensure regular-sized text has a minimum contrast ratio of 4.5:1.Ensure large-sized text has a minimum contrast ratio of 3:1.Check that text placed over images or gradient backgrounds still has sufficient contrast in all viewports.  ","version":"Next","tagName":"h3"},{"title":"UI elements​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#ui-elements","content":" Ensure visual states, like hover or focus, on UI components have a minimum contrast ratio of 3:1.Ensure that form field borders and custom form elements have a minimum contrast ratio of 3:1.Ensure charts, diagrams, and other graphics have a minimum contrast ratio of 3:1 between important parts.Ensure that icons have a minimum contrast ratio of 3:1.    ","version":"Next","tagName":"h3"},{"title":"Target size​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#target-size","content":" When targets are small, it is difficult for users with hand tremors and those who have difficulty with fine motor movement to activate them accurately. Providing sufficient size, or sufficient spacing between targets, will reduce the likelihood of accidentally activating the wrong control.  Ensure that the size of the target for pointer inputs is at least 44 by 44 CSS pixels (or 7x7 millimeters), except when: The target does not overlap any other target and has a target offset of at least 44 CSS pixels to every adjacent targetThe interaction can be achieved through a different control on the same screenThe target is in a sentence, or is in a bulleted or numbered list, or its’ size is otherwise constrained by the line-height of non-target textThe target is a default user agent control and was not modified by the mobile app team (MCAG).    ","version":"Next","tagName":"h2"},{"title":"Content structure​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#content-structure","content":" Structuring content helps people group information and work out what's important and what they need to read first. This structure must be shown visually and using code.  Provide easily identifiable feedback (i.e. confirmation of a form submission, alerting the user when something goes wrong, notify the user of changes on the page, etc.). Instructions should be easy to identify.Design headings that reflect a logical visual and semantic content hierarchy.In a screen with multiple content sections (i.e. Prescription details), each section should have a heading.Ensure headings at the same &quot;level&quot; look similar across the app.Annotate intended headings for developers, if they are unclear.Ensure that the order of the elements on the screen make sense and reflect the content hierarchy of the screen (MCAG).Ensure that elements that assemble a single context (i.e. a heading and a single line of copy that should be read together) are announced by a screenreader as one unit and that each of the parts are not announced separately (MCAG).  ","version":"Next","tagName":"h2"},{"title":"Spacing​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#spacing","content":" Blocks of text (three lines or more in the body text font size without additional zoom) should have sufficient spacing between lines, words, and characters. Using typography and spacking tokens (see &quot;Spacing tokens&quot; below), each typography component will be pre-built into the library with the minimum spacing requirements.  Spaces between lines in text blocks are at least 0.9 times the font size and no more than 1.7 times the font size.Spaces between paragraphs (with subsequent paragraphs) should be at least two times (double) that of the font size.The font’s default inter-word spacing should not be changed.The font’s default inter-letter spacing should not be changed.  ","version":"Next","tagName":"h2"},{"title":"Spacing tokens​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#spacing-tokens","content":" Typography tokens and various other components will be pre-built into the Flagship and Component libraries with the minimum required spacing tokens needed to follow accessibility best practices. While you can increase the amount of spacing used, you should never reduce it without consulting the accessibility specialist on the mobile app team. For full spacing token documentation, see the design system.  ","version":"Next","tagName":"h3"},{"title":"Forms​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#forms","content":" Clear instructions for entering or fixing information will help a user complete a form quickly and correctly the first time. Using autocomplete and giving someone a chance to review information helps reduce the amount of typing.  ","version":"Next","tagName":"h2"},{"title":"Form information should be discernible.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#form-information-should-be-discernible","content":" Put any instructions relating to the whole form before the start of the formAvoid using color alone to identify a required field.Avoid using placeholder text to label a form field.Check that form labels or help text are placed close to the form field.  ","version":"Next","tagName":"h3"},{"title":"Labels and error messages should be discernible.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#labels-and-error-messages-should-be-discernible","content":" Ensure form labels are visible at all times.Place error messages beneath the related form field.Make error messages visible and noticeable using color, familiar icons, and text. Do not use color alone.If an element has both a visible label and an accessible name, the visible label's text should be included in the accessible name (MCAG). The accessible name's copy should start with the text of the visible label (MCAG).  ","version":"Next","tagName":"h3"},{"title":"Information should be checkable before submission.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#information-should-be-checkable-before-submission","content":" Let people review the information they’ve entered in a form and fix any mistakes before they complete a legal or financial transaction, change saved data, or submit a test answer.  ","version":"Next","tagName":"h3"},{"title":"Avoid redundant entries​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#avoid-redundant-entries","content":" Ensure that information previously entered by or provided to the user that is required to be entered again in the same process is either auto-populated or available for the user to select. Except when: re-entering the information is essential, the information is required to ensure the security of the content, or previously entered information is no longer valid.    ","version":"Next","tagName":"h3"},{"title":"Real-time updates (MCAG)​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#real-time-updates-mcag","content":" There should be a visual indication for real-time updates on the screen.There should be auditory indications for real-time updates while using the app.Real-time updates should have tactile indications (haptics) unless a user has turned haptic feedback off.Time-sensitive real-time updates should be reflected in a push notification when a user is not actively using the app unless a user has opted out of or turned off push notifications.  ","version":"Next","tagName":"h2"},{"title":"Toast / snackbar (MCAG)​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#toast--snackbar-mcag","content":" The content of a snackbar should be announced by assistive technology without the focus shifting to it.The font size of a snackbar message should be at the same as the base font size.Each snackbar message should stay visible for at least 5 seconds plus one extra second for every 120 words (rounding up) unless the user can take an action (i.e. &quot;undo&quot;). If there is an action that a user can take, the snackbar should not auto-dismiss.If the only option within the snackbar is to &quot;dismiss&quot;, the snackbar should auto-dismiss.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#images","content":" Images, including icons, that are meaningful must have a text alternative (alt text) so that users who can’t see them, can still get the same visual information they contain.  Identify decorative images so engineers can code them correctly.If not included in the body of the page, a text description of any complex images should be found near the image.If icons are used, they should have accompanying text and/or a label. Icons should not be used on their own, as it can cause issues for blind/low vision users and users with cognitive disabilities.    ","version":"Next","tagName":"h2"},{"title":"External device support (MCAG)​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#external-device-support-mcag","content":" If a smartphone device supports the connection of an external assistive technology device, users should be able to operate controls and other interactive elements of the app while using the device of their choosing.  When designing, consider how your design will be used by a variety of assistive tech devices. These devices include, but are not limited to:  Braille displaysSwitch control devicesEye-tracking systems and/or technologyAugmentative and alternative communication (AAC) devicesHearing aid compatibilityAdaptive keyboards and input devices (including a mouse)  ","version":"Next","tagName":"h2"},{"title":"Keyboard​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#keyboard","content":" Any function or experience a user has when using a mouse must be available to keyboard users. Keyboard accessibility remains as important as ever and most major mobile operating systems do include keyboard interfaces, allowing mobile devices to be operated by external physical keyboards (e.g. keyboards connected via Bluetooth, USB On-The-Go) or alternative on-screen keyboards (e.g. scanning on-screen keyboards).  ","version":"Next","tagName":"h2"},{"title":"All tasks should be able to be performed using only a keyboard.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#all-tasks-should-be-able-to-be-performed-using-only-a-keyboard","content":" Use keyboard interactions that are predictable, logical and intuitive, using native patterns where possible.Keep an expected focus order of UI components so people can understand and use them. Note this order for developers.Avoid triggering important changes that users should be aware of when any component receives keyboard focus.Ensure that changing the settings of any UI component has predictable effects unless you tell users first.  ","version":"Next","tagName":"h3"},{"title":"Ensure that the focusable element does not get obscured / covered.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#ensure-that-the-focusable-element-does-not-get-obscured--covered","content":" Ensure that any components that receive keyboard focus are not hidden by author-created content.  ","version":"Next","tagName":"h3"},{"title":"Keyboard shortcuts should not interfere with other input methods​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#keyboard-shortcuts-should-not-interfere-with-other-input-methods","content":" Use only keyboard shortcuts that include a modifier key like Alt or Control.Use single-character keyboard shortcuts only if they can be turned off, changed, or work when a component has focus.    ","version":"Next","tagName":"h3"},{"title":"Links​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#links","content":" Links must clearly tell users where the link will take them and they must be easy to see.  Ensure links can be identified by more than solely text color.Tell users if links are going to open an element outside of the app. Avoid linking to elements outside of the app when possible.Give visited links a distinct visual state    ","version":"Next","tagName":"h2"},{"title":"Navigation​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#navigation","content":" Users want to navigate around the app easily. A user’s confidence in an app will build when they know where they are and that layouts are applied consistently.  ","version":"Next","tagName":"h2"},{"title":"Layouts should support easy navigation.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#layouts-should-support-easy-navigation","content":" Organize content into common regions and note the regions for developers.Keep navigation items in a consistent layout and order throughout the app.Give users more than one way to find content on the app.    ","version":"Next","tagName":"h3"},{"title":"Dragging movement​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#dragging-movement","content":" Some people cannot perform dragging movements in a precise manner. Others use a specialized or adapted input device, such as a trackball, head pointer, eye-gaze system, or speech-controlled mouse emulator, which may make dragging cumbersome and error-prone.  Ensure that all functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author.Multipoint gestures should have a keyboard alternative.    ","version":"Next","tagName":"h2"},{"title":"Motion interaction​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#motion-interaction","content":" Content and functions that rely on gestures, motion, or a focus state to work, should have alternative ways to access them.  ","version":"Next","tagName":"h2"},{"title":"Content should always be visible.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#content-should-always-be-visible","content":" Avoid content that appears on focus/active only.  ","version":"Next","tagName":"h3"},{"title":"Gestures should be predictable and easy.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#gestures-should-be-predictable-and-easy","content":" Ensure that all tasks can be completed using simple gestures, like a single or double tap.Ensure components only activate when a user activates them.  ","version":"Next","tagName":"h3"},{"title":"Tasks that rely on device motion or user motion should be customizable and accessible.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#tasks-that-rely-on-device-motion-or-user-motion-should-be-customizable-and-accessible","content":" Ensure operations that use motion can be turned off.Ensure the same task can be done using standard UI components.    ","version":"Next","tagName":"h3"},{"title":"Sensory​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#sensory","content":" Information that relies on sensory perceptions (like color or sound) to relay meaning, needs to consider users who won’t receive those sensory clues and offer another way to get the same meaning.  ","version":"Next","tagName":"h2"},{"title":"Communicate information using multiple accessible methods.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#communicate-information-using-multiple-accessible-methods","content":" Add another method if using color to communicate important information.Elements distinction should not solely rely on color cues (MCAG).Elements' state distinction should not solely rely on color cues (MCAG).Conveying information, indicating an action, or prompting a response should not soley rely on color cues (MCAG).    ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#tables","content":" Tables help users interpret information with a structural relationship between headings and data. Tables use visual styles and semantic code to make them easier to read.  ","version":"Next","tagName":"h2"},{"title":"Table styles make readability easier.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#table-styles-make-readability-easier","content":" Use styling to differentiate table headers from data cells.Use borders and/or zebra shading to help visual tracking between rows.Don't include too much white space between columns.    ","version":"Next","tagName":"h3"},{"title":"Timed events​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#timed-events","content":" Time limits must consider people who may need more time to read or complete tasks.  ","version":"Next","tagName":"h2"},{"title":"Time limits should be reasonable and adjustable.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#time-limits-should-be-reasonable-and-adjustable","content":" Use time limits only when they are necessary.Provide users with an option to turn off or adjust a time limit before it begins orWarn users before time expires and give them at least 20 seconds to easily extend the time limit.    ","version":"Next","tagName":"h3"},{"title":"Text styles​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#text-styles","content":" Text on web pages must be easy to read, see and scan. Accessible text makes the reading experience better for everyone.  ","version":"Next","tagName":"h2"},{"title":"Text should be easy to scan and read.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#text-should-be-easy-to-scan-and-read","content":" Avoid overusing italic and all caps.Use underline for links, not for other text.Left-align text. Avoid using right-align, center or justified text..Design content areas so that lines are shorter than 80 characters.Avoid a font size below 16px when possible. Minimum body font size is 16px.    ","version":"Next","tagName":"h3"},{"title":"Multimedia​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#multimedia","content":" Multimedia content can offer users an alternative to text. Users can watch or listen if you give them options to turn on captions, read a transcript, listen to a description of visual content, or watch a sign language translation of this content.  ","version":"Next","tagName":"h2"},{"title":"Alternatives should be easy to find.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#alternatives-should-be-easy-to-find","content":" Put transcripts close to embedded media.Put a link to audio-described video close to video location.    ","version":"Next","tagName":"h3"},{"title":"Consistent help​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#consistent-help","content":" When the placement of the help mechanism is kept consistent across a set of screens, users looking for help will find it easier to identify.  If a help option (contact form, chat box, etc.) is available to a user, ensure that the placement / location and naming of this option is consistent across screens.    ","version":"Next","tagName":"h2"},{"title":"Audio and moving content​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#audio-and-moving-content","content":" Content that moves or starts playing automatically grabs people's attention. Giving people an option to control this, creates a more comfortable experience.  ","version":"Next","tagName":"h2"},{"title":"Flashing content can cause seizures.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#flashing-content-can-cause-seizures","content":" Avoid content that flashes more than 3 times in a second or where the flash is below the general flash and red flash thresholds.  ","version":"Next","tagName":"h3"},{"title":"Audio content must be controllable.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#audio-content-must-be-controllable","content":" Avoid having audio content play automatically unless it plays for 3 seconds or less.Let people control the volume of any audio that plays automatically for more than 3 seconds.  ","version":"Next","tagName":"h3"},{"title":"Moving content must be controllable.​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#moving-content-must-be-controllable","content":" Stop moving content, including carousels, from playing automatically, unless it plays for 5 seconds or less.Let people pause, stop or hide any media content that plays automatically and is longer than 5 seconds.  ","version":"Next","tagName":"h3"},{"title":"Web Views (MCAG)​","type":1,"pageTitle":"Accessibility checklist for UX designers","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-checklist-ux-designers#web-views-mcag","content":" Content presented within Web Views should meet the WCAG 2.2, AA requirements, except when: Elements' target size should meet 2.5.5 Target Size (Enhanced) (AAA) instead of 2.5.8 Target Size (Minimum) (AA)    Note: Most of the current content was borrowed from the Accessibility Not-Checklist (altered for mobile apps). Content / tasks will be updated as these lists move forward. ","version":"Next","tagName":"h2"},{"title":"Helpful tips for running an accessible research session","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help","content":"","keywords":"","version":"Next"},{"title":"Locating the VA: Health and Benefits app​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#locating-the-va-health-and-benefits-app","content":" With the recent update to iOS 18, users can now customize the appearance of their app icons without an additional shortcut or appearance customization app. There are now options available for light and dark mode for the app icons or to completely customize the color of the icons themselves. Prior to the update, we would have asked a sighted participant to locate the app icon with the white &quot;VA&quot; and blue background, however, a participant's app icon may no longer visually appear this way. On Android devices, it is also common for a user to customize the appearance of their app icons, font styles, etc. using shortcuts or apperance customization apps.  Instead of relying on the app icon's appearance to describe and verify that the participant has the VA: Health and Benefits app installed, you should consider building a few extra minutes into your research study plan to verify that the participant has the correct app by asking them to open the app and visually look at the splash / login screen in their screen share to verify.  If Perigean will be verifying this for you, notify your recruiter that they will need to request that the Veteran open the app and visually verify that they have the correct app installed. You should also consider supplying screenshots of the login screen to the recruiter in both dark and light modes, so that they have it to make the visual comparison themselves.  For screen reader participants who are using VoiceOver or TalkBack, no matter which color option or icon style they may have chosen to use on their device, both screen readers will still announce the app as &quot;VA&quot;.  ","version":"Next","tagName":"h2"},{"title":"iOS​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#ios","content":" ","version":"Next","tagName":"h2"},{"title":"How to enable screen sharing in Zoom when using VoiceOver​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#how-to-enable-screen-sharing-in-zoom-when-using-voiceover","content":" In Zoom, navigate/swipe to the &quot;share&quot; (button) and double-tapDouble-tap on the first option: &quot;screen&quot; (button)Double-tap on &quot;start broadcast&quot; (button) The participant will then hear a countdown (3, 2, 1) and the screen will begin broadcasting.  ","version":"Next","tagName":"h3"},{"title":"Screen Curtain​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#screen-curtain","content":" When VoiceOver is active and the participant has begun sharing their screen with you, you may notice that the screen is black and that you cannot see anything that is being shared. This is called screen curtain. If a participant has screen curtain enabled, you will not be able to see anything on the participants' screen unless they disable it.  To disable screen curtain, instruct the participant to tap the screen four times using three fingers. This is called a three-finger quadruple tap.  Note: If you instruct a user to turn off screen curtain during a session, offer to help them re-enable it before ending the session. Provide these instructions (the same instructions used to disable it) while they are still sharing their screen so that you can verify that screen curtain is re-enabled.  ","version":"Next","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#android","content":" ","version":"Next","tagName":"h2"},{"title":"How to enable screen sharing in Zoom when using TalkBack​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#how-to-enable-screen-sharing-in-zoom-when-using-talkback","content":" By default, Zoom will typically default to &quot;active speaker&quot; mode. To display the toolbar, the participant can double-tap the screen with one finger.Once the toolbar is displayed in Zoom, the particpant should navigate/swipe to the &quot;share&quot; (button) and double-tap Share should be option 6 of 11 in the Zoom toolbar. The participant should navigate through the list until they get to &quot;screen&quot; (this is usually the 6th option in the list) and double-tap.The participant will then read out the disclaimer for sharing their screen. Instruct the participant to navigate to &quot;start now&quot; (button) and double-tap.After sharing the screen, Zoom will usually take the user out of Zoom and back to their home screen (or the last screen they were on prior to joining the meeting). Instruct them to return to / open the Zoom app to be able to access the chat area and access the link to the build. Note: After the participant opens the Zoom app again, it will typically default them back to the share option (although it will now announce as &quot;stop share&quot;).Chat should be option 4 of 11 in the Zoom toolbar.  ","version":"Next","tagName":"h3"},{"title":"Screen Curtain / Screen Shade​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#screen-curtain--screen-shade","content":" Some Android devices do have the ability to enable screen curtain on their device. If a participant has shared their screen with you during a session and their screen is black, dimmed, or is not changing, it is possible that their device support screen curtain and that it is enabled. Unfortunately, there is not a simple gesture availablet to disable screen curtain.  To disable screen curtain on an Android device, the participant should:  Triple-tap the screen once to open the TalkBack menu. Note: On some devices, the gesture to open the TalkBack menu may not be available or may not work. In this case, you should instruct the user to navigate to their TalkBack settings within their device settings (Settings &gt; Accessibility &gt; TalkBack). Instruct the participant to locate an option for &quot;screen curtain&quot;, &quot;screen shade&quot;, &quot;show screen&quot;, etc. Note: Depending on the participant's Android device manufacturer (Google, Samsung, etc.), this feature may have a different name or a different way of announcing / listing the feature. The participant should listen for an option that might impact the visibility of the device screen. Alternatively, they might also be ale to activate their voice assistant (Google Assistant, Bixby, etc.) and instruct the voice assistant to show their screen, disable screen shade/curtain, etc. This step will depend on the participant's Android device, but after they have located the option for the screen curtain / shade, they should follow any necessary steps to show their screen / disable screen curtain. This could be a simple double-tap gesture to show the screen or could take them to their TalkBack settings where they may need to toggle off the screen curtain. Note: It is recommended that you ask the participant to talk you through the steps that they are taking to disable the screen shade / curtain and that you (or an observer) make a quick note so that you can help them reactivate it at the end of the session.  ","version":"Next","tagName":"h3"},{"title":"Additional Resources​","type":1,"pageTitle":"Helpful tips for running an accessible research session","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/a11y-research-session-help#additional-resources","content":" VoiceOver Gestures (iOS)TalkBack Gestures (Android)Inclusive Research for Screen Reader Users by Angela Fowler and Jamie Klenetsky Fay (Google Doc) Note: This guide is based on running inclusive research sessions with a computer and not on mobile devices. Not all of the information in the guide will apply to mobile-based research sessions. ","version":"Next","tagName":"h2"},{"title":"Beyond WCAG: Additional MCAG Guidance","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance","content":"","keywords":"","version":"Next"},{"title":"1.1.1. Accessibility Enabled​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#111-accessibility-enabled","content":" Assistive technologies can reach, parse, and convey essential content and user-operable elements in the UI.  Test\tImpactAssistive technologies can reach and programmatically read all essential content, except when: The content has a nearby equivalent alternative that's accessible to assistive technologies. Critical Assistive technologies can reach and trigger every user-operable element, except when: The element has a nearby equivalent alternative that's operable by assistive technologies. Critical  ","version":"Next","tagName":"h2"},{"title":"1.3.1. Real-time Updates Modalities​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#131-real-time-updates-modalities","content":" Real-time updates including essential status or value changes are conveyed in various modalities so all users can perceive them.  Test\tImpactReal-time updates have a visual indication on screen.\tCritical Real-time updates have auditory indications while using the app\tModerate – Critical Real-time updates have tactile indications like haptics, unless the user has turned off haptics\tModerate – Critical Time-sensitive real-time updates reflected in push notifications while not using the app, except when users have turned off notification from the app.\tModerate – Critical  ","version":"Next","tagName":"h2"},{"title":"1.3.2. Perceivable Toasts (Snackbars)​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#132-perceivable-toasts-snackbars","content":" Toast messages (snackbars) are implemented so assistive technologies announce their content and they stay visible for enough time so that all users can fully perceive them.  Test\tImpactThe content of toast elements is announced by assistive technologies without the focus shifting to them.\tCritical The font size of toast messages should be at the size of the rest of the application’s body text.\tSerious Each toast message should stay visible for at least 5 seconds plus one extra second for every 120 words (rounding up).\tSerious  ","version":"Next","tagName":"h2"},{"title":"1.4.3. Discernible Focus Indication​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#143-discernible-focus-indication","content":" Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.  Test\tImpactEvery interactive UI element and component has a discernible indicator when focused.\tSerious Focus indication has a contrast of at least 3:1 with its background.\tSerious  ","version":"Next","tagName":"h2"},{"title":"1.4.4. Distinguished by Color​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#144-distinguished-by-color","content":" Avoid relying only on colors to distinguish between elements' state and value or to convey essential information.  Test\tImpactElements distinction does not solely rely on color cues.\tSerious Elements' states distinction does not solely rely on color cues\tSerious Conveying information, indicating an action, or prompting a response, are not communicated solely by color.\tSerious  ","version":"Next","tagName":"h2"},{"title":"2.1.2. Simplified Gestures​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#212-simplified-gestures","content":" User actions that require complex gestures, like path-based or multipoint gestures, have a single-pointer alternative.  Test\tImpactPath-based gestures have a single-pointer alternative\tCritical Multipoint gestures have a keyboard alternative\tCritical   ","version":"Next","tagName":"h2"},{"title":"2.2. External Devices Support​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#22-external-devices-support","content":" Smartphones are designed with various accessibility features to accommodate users with diverse needs and they often support connectivity with external assistive technology devices.  Some external assistive technology devices that can be connected to smartphones include:  Braille DisplaysSwitch Control DevicesEye-tracking SystemsAugmentative and Alternative Communication (AAC) DevicesHearing Aid CompatibilityAdaptive Keyboards and Input Devices  Test\tImpactIf a smartphone device supports the connection of an external assistive technology device, users can reach and operate controls and other interactive elements of the UI through the assistive technology.\tCritical   ","version":"Next","tagName":"h2"},{"title":"2.5. Navigable​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#25-navigable","content":" This guideline addresses the ability of users to quickly and intuitively navigate to any control area and content in the user interface with any user agent or assistive technology supported by the device.  Test\tImpactUsers can reach essential elements and content using the quick access features of screen readers' “Accessibility Navigation Menus” or similar technology.\tSerious Users can navigate sequentially through the screen without getting trapped in navigation loops or dead ends with any user agent and input modality.\tCritical Screens and components do not require two-dimensional scrolling, except when: Two-dimensional scrolling is essential for understanding the content or the application's functionality (e.g., maps, diagrams, large data tables, games) Serious  ","version":"Next","tagName":"h2"},{"title":"3.1.1. Screen Titled​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#311-screen-titled","content":" Ensure that the mobile application's pivotal screens or primary views, which convey essential information or denote significant content changes, have clear and descriptive textual identifier.  Test\tImpactThe screen has a title that's announced by screen readers when the screen loads.\tSerious The screen's title describes its context\tModerate Screen's title is unique\tMinor  ","version":"Next","tagName":"h2"},{"title":"3.1.6. Section Headings​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#316-section-headings","content":" On screens containing different content sections, each section has a heading to organize the content.  Test\tImpactIn a screen with a multiple content sections, each section has a heading, except when: The section has another identifier that can be determined and announced programmatically andSections are distinguished from each other visually. Serious   ","version":"Next","tagName":"h2"},{"title":"3.3.2. Scaled Text Legibility​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#332-scaled-text-legibility","content":" When text is scaled to the maximum size allowed by the operating system, it is not clipped, obscured, overlapped, or covered by other texts or elements.  Test\tImpactText lines do not exceed the viewport width, causing a two-dimensional scroll.\tModerate – Serious Spaces between paragraphs (on subsequent paragraphs) should be at least two tines of the line spacing.\tMinor  ","version":"Next","tagName":"h2"},{"title":"3.3.5. Text Lines Length​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#335-text-lines-length","content":" Text rows are adaptive to the viewport’s width and have a legible length.  Test\tImpactThe length of text lines does not exceed the width of the screen borders.\tSerious Text line lengths do not exceed 70 characters per row, including spaces.\tMinor  ","version":"Next","tagName":"h2"},{"title":"3.5.2. Error Suggestion​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#352-error-suggestion","content":" In cases where user input results in an error and a correction can be made, the error message includes a suggestion for revision.  Test\tImpactWhen there is an option for it, error messages include suggestions for revision, except when: The information may jeopardize the security or privacy of the user. Serious   ","version":"Next","tagName":"h2"},{"title":"4.1.1. Text Scaling​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#411-text-scaling","content":" All text sizes in the UI are updated and adjusted to the text size set by the user in the operating system’s settings.  Test\tImpactIn the operating system settings (typically under accessibility), increase the font size to the maximum. The application's texts should resize proportionally according to the user's settings.\tMinor – Serious  ","version":"Next","tagName":"h2"},{"title":"4.1.2. Adaptive Display Modes​","type":1,"pageTitle":"Beyond WCAG: Additional MCAG Guidance","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/MCAG/additional-guidance#412-adaptive-display-modes","content":" The UI and content are adaptive to the operating system’s color modes, such as dark and inverted color modes.  Test\tImpactFor each display mode supported by the operating system, the UI and its content, including UI elements, texts, and images of text, are adaptive to display mode changes.\tSerious  ","version":"Next","tagName":"h2"},{"title":"Native Mobile App Accessibility Resources & Articles","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources","content":"","keywords":"","version":"Next"},{"title":"Native Mobile App​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#native-mobile-app","content":" ","version":"Next","tagName":"h2"},{"title":"Platform-specific​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#platform-specific","content":" iOS (HIG)​  Documentation: Accessibility - Foundations - Human Interface GuidelinesIntroduction - Accessibility - Human Interface GuidelinesInclusion - Foundations - Human Interface GuidelinesInclusion - Technologies - Human Interface Guidelines Apple support articles: Get started with accessibility features on iPhone - Apple SupportUse VoiceOver on your iPhone to listen to apps: Turn on and practice VoiceOver on iPhone - Apple SupportLearn VoiceOver gestures on iPhone - Apple Support Apple Style Guide - Writing Inclusively WWDC A11y Video Archive The practice of inclusive design - WWDC21 - Videos - Apple DeveloperThe process of inclusive design - WWDC21 - Videos - Apple DeveloperMake your app visually accessible - WWDC20 - Videos - Apple DeveloperVisual Design and Accessibility - WWDC19 - Videos - Apple DeveloperWriting Great Accessibility Labels - WWDC19 - Videos - Apple Developer  Android (Material Design)​  Documentation: Mobile Accessibility - Material Design Support articles: Android Accessibility HelpUse TalkBack on your Android to listen to apps: Turn TalkBack on or off - Android Accessibility HelpUse TalkBack gestures - Android Accessibility Help Deque Summary and Checklist: Android Native Mobile App Accessibility (pdf)  React Native a11y​  Appt.org: React Native a11y - code samples      ","version":"Next","tagName":"h3"},{"title":"Articles & talks​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#articles--talks","content":" Appt.org: A guide for making apps accessibleMobile Accessibility: How to Build Apps that Work for All Users (shopify)Mobile Accessibility 101 - TalkBack vs. VoiceOver Screen ReadersStaying ahead of the curve on mobile accessibility - Ad HocAccessibility research mobile apps - Which accessibility settings do the Dutch really use on their phone?Talk: Mobile accessibility: testing mobile sites and native apps for accessibility / Gian Wild #id24 2020 Gian Wild - Mobile Accessibility: Testing native apps and mobile sites for accessibility - Speaker Deck Talk: Mobile Accessibility &amp; Floating Action Buttons - May 2019      ","version":"Next","tagName":"h3"},{"title":"Books​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#books","content":" Touch Design for Mobile Interfaces (a lot of accessibility information in this book)A Best-in-Class iOS App book series      ","version":"Next","tagName":"h3"},{"title":"Courses​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#courses","content":" Mobile App Accessibility Fundamentals - Deque UniversityAccessibility Training Options (Mobile) - TPGi      ","version":"Next","tagName":"h3"},{"title":"Documentation / standards / resources​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#documentation--standards--resources","content":" Mobile Content Accessibility Guidelines (MCAG)Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to MobileICT Accessibility Testing Symposium Committee working docs on mobile testing methodology Introduction – Mobile Testing Methodology (pdf)Mobile Testing Methodology (pdf) Mobile Testing on AccessibilityOzWCAG 2.0 Principles Applied to Mobile (downloadable whitepaper)Magentaa11y: Native app accessibility checklist      ","version":"Next","tagName":"h3"},{"title":"General accessibility / inclusive design​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#general-accessibility--inclusive-design","content":" ","version":"Next","tagName":"h2"},{"title":"Articles & talks​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#articles--talks-1","content":" Low literacy: Designing Digital Products for Adults With Low Literacy Cognitive disabilities: Inclusive Design and Cognitive Disability - CSUN Assistive Technology Conference March 2022 with Dennis Lembrée @DennisL (pdf)Designing for People with Cognitive Disabilities and Everyone ElseHow to improve Experience Design by Managing Cognitive Biases | by Marina Shapira, Ph.D | UX Collective General a11y resources: Watch Video: SDNNYC Talk &amp; Discussion: Accessibility 201 – Design Maturity Models with Soren HambyWatch Video: The Principles of Accessible UX Design with Soren Hamby a11y-101Accessibility for Teams - digital.govAd Hoc - Accessibility Champions ProgramVA Mobile app team &gt; UX, A11y Research &gt; A11y &gt; ResourcesA Designer’s Guide to Documenting Accessibility &amp; User Interactions      ","version":"Next","tagName":"h3"},{"title":"Books​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#books-1","content":" Demystifying DisabilityMismatch: How Inclusion Shapes Design (Simplicity: Design, Technology, Business, Life): Holmes, Kat, Maeda, John: 9780262539487Giving a Damn About Accessibility: A Candid and Practical Handbook for Designers (free)AccessAbility Playbook: Delivering accessible client service (free)      ","version":"Next","tagName":"h3"},{"title":"Additional resources​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#additional-resources","content":" Designing accessible servicesInclusive Design PrinciplesThe Ad Hoc Accessibility Beyond Compliance Playbook        ","version":"Next","tagName":"h3"},{"title":"Veteran-specific accessibility resources​","type":1,"pageTitle":"Native Mobile App Accessibility Resources & Articles","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/resources#veteran-specific-accessibility-resources","content":" Invisible Wounds of War: Psychological and Cognitive Injuries, Their Consequences, and Services to Assist Recovery | RANDThe Disability of Veterans (Census.gov) (pdf)US veterans by disability status 2019 | Statista ","version":"Next","tagName":"h3"},{"title":"UI Automation Testing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/","content":"","keywords":"","version":"Next"},{"title":"Background​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#background","content":" For folks looking for a basic primer on &quot;what is UI automation testing&quot;, reading one of the many articles available via quick google search is the recommended method. This section instead covers the background of automated UI testing for the mobile team.  Implementing robust UI automation for the mobile team supports several team goals - more efficiently using QA Engineer time, finding bugs sooner/reducing regressions, and improving FE efficiency (reducing the number of flaky unit tests that are written to accomplish what UI automation is better positioned to test).  Phases include:  Tool assessment &amp; initial implementation: Completed Q3 2022Release candidate script automation: Slated for Q4 2023Key end-to-end test automation: Future  ","version":"Next","tagName":"h2"},{"title":"Detox: our UI automation tool​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#detox-our-ui-automation-tool","content":" Our automated UI testing is done with Detox, which we picked over other tools because it slotted in nicely with existing tools/tech for the team (react native, javascript, jest) while also having more robust functionality with lighter lift than some other tools (write a single script that executes cross-platform; active development, support &amp; documentation updates from the detox team; etc).  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#prerequisites","content":" Follow instructions for FE Development Setup Instructions  ","version":"Next","tagName":"h3"},{"title":"Local setup for detox​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#local-setup-for-detox","content":" Check for the detox pre-reqs on your local machine and install if needed using the yarn package manager. If needed find and delete the detoxrc.js file. This file is sometimes created when you initially install detox and is not needed because the VA Mobile App uses .detoxrc.json file. Check that the emulators used by the script (listed in .detoxrc.json) are installed on your machine, and install them if not. Helpful instructions from detox If you need to create a new Android emulator, make sure to bump up the internal storage (default is 800, bumping to 8000 definitely works). If you don't do this, you'll get an out of storage error. One path that works for this: Shift-Shift &gt; search &quot;Virtual Device Manager&quot; &gt; {create new device or edit existing device} &gt; Show Advanced Settings &gt; scroll down to the &quot;Memory and Storage&quot; section to find the &quot;Internal Storage&quot; field Build and Run App Run yarn install to install the project dependenciesStart Metro with yarn start and leave it running in its own separate terminalRun yarn e2e:ios-build to build the iOS appRun yarn e2e:android-build to build the Android app Run Tests Run yarn e2e:ios-test to run the iOS tests If you want to see the iOS tests on the simulator, you need to have the Simulator app open or run yarn ios before starting the iOS tests (but, if you don't care about watching on the simulator, it'll still run fine without it.) Run yarn e2e:android-test to run the Android tests Android will open the emulator &amp; show you the tests running, automatically.If android tests hangs and you receive this error: Exceeded timeout of 300000ms while handling jest-circus &quot;setup&quot; event, you will need to downgrade API of AVD System Image to 28 Open Android StudioGo to Tools -&gt; Device Manager -&gt; (next to emulator used for tests) Edit this AVD -&gt; (next to system image) ChangeChange API Level to 28 (Release name: Pie) Individual test runtime is ~30 seconds (we start all tests back from the login window). Total test runtime will change as we add more tests, but expect it to take a few minutes as well.  ","version":"Next","tagName":"h3"},{"title":"UI Automation Testing Process​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#ui-automation-testing-process","content":" ","version":"Next","tagName":"h2"},{"title":"Release Candidate Automation​","type":1,"pageTitle":"UI Automation Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/#release-candidate-automation","content":" The RC regression script is split into two sections: testing covered manually, and testing covered with automation..  Each release, someone from the QA team is responsible for 'babysitting' the automated tests for the release candidate build. This person is responsible for confirming all automated cases have run against the correct build, and then signing off on automated testing by leaving a comment in the release sign-off ticket. There are three potential outcomes for this signoff, here's an example of what the comment would look like for each:  All automated cases pass, signing off on that sectionSome automated cases failed: (list of which cases &amp; why). These failures do not indicate a breaking change with the app, and I have written up automation maintenance ticket(s) for the necessary changes: (links to relevant tickets)Some automated cases failed: (list of which cases &amp; why). These failures are breaking changes in the app, and I have written up bug ticket(s): (links to relevant tickets). These bugs SHOULD / SHOULD NOT prevent release of the app.  We create additional tickets, even for test script maintenance issues, to avoid pushing changes onto the RC branch during the release process. ","version":"Next","tagName":"h3"},{"title":"Adding new e2e tests to Availability Framework and Navigation","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/AddingNewFeatures","content":"","keywords":"","version":"Next"},{"title":"Adding a new e2e test to navigation (Note: The only things tested are places in the app where you have the ability to navigate through the bottom navigation bar)​","type":1,"pageTitle":"Adding new e2e tests to Availability Framework and Navigation","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/AddingNewFeatures#adding-a-new-e2e-test-to-navigation-note-the-only-things-tested-are-places-in-the-app-where-you-have-the-ability-to-navigate-through-the-bottom-navigation-bar","content":" Open the Navigation.e2e testAdd the necessary information to navigationDic. The dictionary is broken down into the 4 sections found in the bottom navigation bar: Home, Health, Benefits, and Payments. Add new tests under the appropriate key value. The array follows the following format: [a, b, c] For single e2e tests: string of name of the test. Ex: ‘DisabilityRatings.e2e’. For multiple e2e tests: array of strings with the names of the tests. Ex: [‘Claims.e2e’, ‘Appeals.e2e’]String/array of strings that tells detox how to navigate to your feature. Notes: The test will always navigate to the key value in which the array is in (Home, Health, Benefits, and Payments) firstIf scrolling is required for detox to click on something use the featureID dictionary. It follows the following format: 'string of what needs to be clicked on (should match what is in navigationDic): testID for the scrollView being utilized' Ex: DisabilityRatings (Benefits &gt; Disability rating) is ‘Disability rating’Ex: Claim details (Benefits &gt; Claims &gt; Claims history &gt; 'name of claim') is an array of strings of the following: ['Claims', 'Claims history', 'Received July 20, 2021'] Name of the heading for the page. This is what the tests look for to verify it is in the right location.  ","version":"Next","tagName":"h2"},{"title":"Adding a new e2e test to Availability Framework​","type":1,"pageTitle":"Adding new e2e tests to Availability Framework and Navigation","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/AddingNewFeatures#adding-a-new-e2e-test-to-availability-framework","content":" Open the AvailabilityFramework.e2e testAdd the new waygate to AFNavigationForIndividual. The array has the following format: [String value indicating the e2e test covered, String value of the waygate name, string of navigation value 1, string of navigation value 2] String of navigation values &lt;number\\&gt; tells detox how to navigate to the feature starting from the Home screen. Notes: If scrolling is required for detox to click on something add an else if (featureNavigationArray[j] === 'string of navigation value') statement to the navigateToFeature function in utils.tsIf you are running into issues with inAppReview add your waygate to the if statement found in enableAF ","version":"Next","tagName":"h2"},{"title":"Accessibility Testing Plan","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan","content":"","keywords":"","version":"Next"},{"title":"Section 1: Accessibility Requirements & Approach​","type":1,"pageTitle":"Accessibility Testing Plan","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan#section-1-accessibility-requirements--approach","content":" The following items are based on WCAG 2.2 and Section 508 accessibility standards, organized by product function. Each item description reflects both the requirement and the referenced standard, along with the corresponding implementation approach.  Items that have “Design” / “Designs” bolded reflect standards that must be facilitated by the design workstreamItems that have “Programmatically” bolded reflect standards that focus on technical implementationAccessibility standards that relate to non-existent functionality in the app are marked N/A. In the event that the app’s design changes to include relevant functionality, these standards will be candidates to prioritize as requirements.    Category\tWCAG / 508 Section\tImplementation ApproachColor\tColor contrast (1.4.3_AA) (1.4.6_AAA)\tDesigns for the the app should consider the following: Normal fonts (&lt; 19px) AA compliant: 4.5:1AAA compliant: 7:1 Large fonts (19px +) AA compliant: 3:1AAA compliant: 4.5:1 Color\tColor (1.4.1_A)\tDesigns for the app should not use color as the sole conveyance of information. Color\tNon-text contrast (1.4.11_AA)\tDesigns of UI components and graphical objects in the app designs that are used to understand the content should have a contrast ratio of at least 3:1. Headings &amp; Navigation\tHeading levels (1.3.1_A)\tDesigns for each page should have a single h1 and additional headings (h2 - h6) for each section of the page. There are no skipped heading levels. (i.e. the headings don't jump from h1 to h&gt;). Programmatically specify ARIA level for all text headings in React Native. Headings &amp; Navigation\tInfo and Relationships (1.3.1_A) (502.3.7) (502.3.8)\tLeverage React Native accessible components so that information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. Headings &amp; Navigation\tTables (1.3.1_A) (502.3.3)\tAll tables should be programmatically identified and the table heading for applicable rows and columns should be announced. N/A: There are currently no complex tables in the designs. If we need to pull in a fancier table than what we can build with react native list views, then we may need to pull in a third party library that is accessible and meets the designs. Headings &amp; Navigation\tLists (1.3.1_A)\tLeverage React Native accessible list component so lists can be programmatically determined. Headings &amp; Navigation\tPage title (2.4.2_A)\tEach page on the app should programmatically have a unique title that is descriptive and differentiated. React Native may provide libraries that facilitate this. Headings &amp; Navigation\tHeadings and labels (2.4.6_AA)\tHeadings and labels should describe the topic or purpose and be programmatically determined as such. Headings &amp; Navigation\tNavigation consistency (3.2.3_AA)\tDesigns for navigation mechanisms that are repeated across several pages should be consistent. (Color, icon, text, location, etc.) Headings &amp; Navigation\tSensory characteristics (1.3.3_A) (502.3.8)\tDesigns for pages should not require sensory characteristics such as shape, color, size, visual location, orientation, or sound to be understood or operable. Headings &amp; Navigation\tBypass Blocks (Skip nav) (2.4.1_A) (c205.2.2)\tProvide a means of skipping repeating content (e.g. headers, navigation, bars, etc.). N/A according to section 508 (c205.2.2) and no such navigation exists in the app. Headings &amp; Navigation\tLink purpose in context (2.4.4_A)\tDesign so that the purpose of each link can be determined by its text (e.g. &quot;Schedule your appointment now&quot;) or the context it's surrounded by (e.g. &quot;There are a lot of ways to stay active during the pandemic.&quot;). &quot;Click / tap here&quot; should never be used. Headings &amp; Navigation\tMultiple ways to reach each page (2.4.5_AA) (c205.2.2)\tProvide more than one way to access content (minimum two ways). N/A according to section 508 (c205.2.2) since this is a non-web format. Non-text content &amp; media\tText alternatives (1.1.1_A)\tProvide text alternatives for any non-text content (e.g. images, non-decorative icons, etc.) so that it can be read by a screen reader or translated into large print, braille, speech, symbols or simpler language. Non-text content &amp; media\tText alternatives for audio-only and video-only content (1.2.1_A)\tContent / API should provide text alternatives for all audio and video content. N/A – No such content exists in the app. Non-text content &amp; media\tAudio descriptions (1.2.5_AA) (503.4.2)\tAudio descriptions should be provided for all pre-recorded video content. N/A – No such content exists in the app. Non-text content &amp; media\tVideo &amp; live video captions (1.2.2_A &amp; 1.2.4_AA) (503.4.1)\tContent / API should provide captions for pre-recorded and live video content. N/A – Use native audio / video player from OS if needed and possible. Non-text content &amp; media\tAudio controls (1.4.2_A) (503.4)\tDesign so that all audio content has a mechanism to start, stop and adjust volume independent of the system. N/A – Use native audio / video player from OS if needed and possible. Non-text content &amp; media\tPause, stop, hide - Video &amp; animation controls (2.2.2_A)\tDesign so that all media content has a mechanism to start, stop and hide. N/A – Use native audio / video player from OS if needed and possible. Non-text content &amp; media\tFlashing content (2.3.1_A)\tDesigns should not include content or UI elements that flash more than 3 times per second. Avoid flashing content altogether, if possible. Non-text content &amp; media\tLabel in name (2.5.3_A) (502.3.6)\tDesign UI components with a visual label and ensure that the label is programmatically available in the beginning of the name of the component. Non-text content &amp; media\tIdentify Input Purpose - Form labels and instructions (1.3.5_AA &amp; 3.3.2_A) (502.3.6) (502.3.9) (502.3.12)\tLeverage React Native accessible form components so the purpose of each input field collecting information about the user can be programmatically determined. Non-text content &amp; media\tForm error identification (3.3.1_A)\tLeverage React Native accessible form components so that any errors in filling out a form should be designed descriptive, clearly visible and read programmatically. Non-text content &amp; media\tInput triggers (3.2.2_A)\tDesigns for the app when changing an input should not cause major changes in page content (i.e. forewarn users if their context will change based on their input). Non-text content &amp; media\tForm error suggestions (3.3.3_AA)\tDesigns for the app should include error messages that include suggestions on how to fix the error. Leverage React Native accessible form components so suggestions can be read programmatically. Non-text content &amp; media\tLegal, financial and data error prevention (3.3.4_AA)\tDesigns for the app should enable users to be able to reverse, check or confirm inputs for important data. Text content\tMeaningful reading order (1.3.2_A)\tDesigns for the app should make sure everything is read in an order that makes sense and is programmatically read. Occasionally, iOS will override the order that elements are read on the screen when using Switch Control / Voice Access or a keyboard. QA will test for this and attempt to find a solution, but this is not always possible to fix. Text content\tImages of text (1.4.5_AA) (502.3.8)\tDesigns should not use images that are purely text, unless its visual style cannot be accomplished via styled text (e.g. logo text). Text content\tText spacing (1.4.12_AA)\tDesign and set up text styles so that: Line height / spacing is at least 1.5 times the font sizeParagraph spacing is at least 2 times the font sizeLetter spacing is at least 0.12 times the font size for serif and slab-serif fontsWord spacing is at least 0.16 times the font size for serif and slab-serif fonts Text content\tText Resizing (1.4.4_AA)\tDesign so that it’s possible to resize content significantly (ideally to the max device size). Programmatically, all fonts should scale with the font scaling the user has set in the OS. Please note that on certain device sizes, when a user has display zoom enabled on their device, we can only accommodate text size increases to an extent. Content may become cut off or break out of containers. There is no known fix at this time. Content may also become cut off in native components (usually Android) such as alert boxes when the text size is increased. Using shorter headings and descriptions is recommended to help alleviate this. Text content\tRedundant Entry (3.3.7_A)\tDesign so that information previously entered by or provided to the user that is required to be entered again in the same process is either: auto-populated, oravailable for the user to select. Except when: re-entering the information is essential,the information is required to ensure the security of the content, orpreviously entered information is no longer valid. N/A – No such content exists in the app. Miscellaneous\tContent on Hover or Focus (1.4.13_AA)\tProgrammatically ensure that where content is suddenly visible, then not visible (e.g. a tool-tip) newly shown content is dismissible, hoverable and persistent. This specifically refers to actions that remove pointer hover or when the keyboard focus triggers additional content. Miscellaneous\tFocus Appearance (2.4.13_AAA)\tProgrammatically ensure that when the focus indicator is visible, an area of the focus indicator meets all the following: is at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component, andhas a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states Exceptions: The focus indicator is determined by the user agent and cannot be adjusted by the author, orThe focus indicator and the indicator's background color are not modified by the author. N/A due to exceptions (focus indicators are determined by the OS in the app). Miscellaneous\tFocus Not Obscured (2.4.11_AAA)\tProgrammatically ensure that when a UI component receives focus, no part of the component is hidden by author-created content (e.g. the footer navigation bar). Miscellaneous\tReflow (1.4.10_AA)\tProgrammatically ensure that content doesn't require horizontal scrolling when resizing. Miscellaneous\tTime limits (2.2.1_A)\tProgrammatically ensure that time limits set by the content must be able to be turned off, adjusted, extended, or be longer than 20 hours. If the time limit is essential to the experience, then it is exempt. Miscellaneous\tStatus Messages (4.1.3_A) (502.3.14)\tProgrammatically ensure that users are aware of status changes by declaring status messages through roles or properties. For instance, ensuring that &quot;invalid entry&quot;, &quot;saved&quot;, or &quot;submitted&quot; is communicated to the user. Design should also communicate a change in status. Miscellaneous\tDragging Movements (2.5.7_AA)\tProgrammatically ensure that all functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author. For example, a map should allow users to drag the view of the map around, and the map has up/down/left/right buttons to move the view as well. Design should also avoid creating components where dragging is required. Miscellaneous\tConsistent Help (3.2.6_A)\tDesign should ensure that if any of the following help mechanisms exist and those mechanisms are repeated on multiple screens, they occur in the same relative order to other screen content, unless a change is initiated by the user: Human contact details;Human contact mechanism;Self-help option;A fully automated contact mechanism. N/A – No such content exists in the app. Miscellaneous\tAccessible Authentication (Enhanced) (3.3.8_AAA)\tProgrammatically ensure that a cognitive function test (e.g. remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following: Another authentication method that does not rely on a cognitive function test.A mechanism is available to assist the user in completing the cognitive function test. Device specific\tTarget Size (2.5.5_AAA)\tDesign should ensure that target pointer / touch inputs are at least 44px by 44px. Programmatically, React Native accessible components on tap targets will be leveraged. Device specific\tDevice orientation (1.3.4_AA)\tDesign should ensure that the UI supports portrait and landscape mode. Device specific\tPointer gestures (2.5.1_A) (503.2)\tDesign so that no inputs require gestures and are possible with taps. All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential. Assumption: The only feature that will not have a tap-based alternative is scrolling, and this can be supported by platform capabilities. Both platforms have alternatives available to perform simple gestures (e.g. iOS has Assistive Touch built in.) Device specific\tPointer cancelation (2.5.2_A)\tProgrammatically ensure that for functionality that can be operated using a single pointer (or tap), at least one of the following is true: The down-event of the pointer is not used to execute any part of the function;Completion of the function is on the up-event, and a mechanism is available to abort the function before completion or to undo the function after completion;The up-event reverses any outcome of the preceding down-event;Completing the function on the down-event is essential. Device specific\tMotion Actuation (2.5.4_A)\tFor a feature that requires device motion (e.g. Face ID), design an alternative way to use that feature that doesn't require device motion. Assumption: A login username and password field is an alternative for Face ID. We are also assuming that taking a picture for document upload is an essential function that can’t be done in an alternative way. Code\tPage language (3.1.1_A)\tThe default human language of the app should be programmatically determined. * Please note: We should be very strategic about our pronunciation overrides. It is generally recommended that you not override the screen reader’s pronunciation and that if a correction is needed, we should try not to overcorrect. However, special cases like forcing “mb” to read out as “megabytes” do occur and should be overridden in all instances.* Code\tName, role, value (4.1.2_A) (502.3.1) (502.3.2) (502.3.4) (502.3.5) (502.3.14)\tAll custom UI components (e.g. form elements, links, components, etc.) should programmatically have a name, role and value. Design and the accessibility specialist should work with engineering to determine the best name for custom components. Keyboard\tKeyboard focus visibility (2.4.7) (502.3.12)\tProgrammatically ensure that a keyboard will be supported by OS capabilities. If an element is in focus, it should be clearly visible that it is. Keyboard\tKeyboard focus order (2.4.3_A) (502.3.10)\tThe tab order should make logical sense. All focusable elements should be read aloud by a screen reader. The tab order cannot be programmatically adjusted through React Native as it does not support indexing, therefore the tab order will be dependent on the visual order. However, we could index components using AccessibilityLabel over the indexes of the map over an array of data. Occasionally, iOS will override the focus order when using a keyboard. QA will test for this and attempt to find a solution, but this is not always possible to fix. Keyboard\tKeyboard access (2.1.1_A) (502.3.11) (502.3.13)\tProgrammatically ensure that a keyboard will be supported by OS capabilities. All functionality of the content should be operable when using a keyboard. Keyboard\tKeyboard traps (2.1.2_A) (502.3.13)\tProgrammatically ensure that a keyboard will be supported by OS capabilities. Content should not “trap” keyboard focus (i.e. provide ways to exit modals and widgets using the keyboard). Keyboard\tCharacter Key Shortcuts (2.1.4_A)\tProgrammatically ensure that a keyboard will be supported by OS capabilities. Keyboard shortcuts must be able to be turned off, remapped or active only if the component is in focus. Keyboard\tFocus triggers (3.2.1_A)\tProgrammatically ensure that a keyboard will be supported by OS capabilities. Changing focus should not trigger any unexpected changes to page content.    ","version":"Next","tagName":"h2"},{"title":"Section 2: Test Environment​","type":1,"pageTitle":"Accessibility Testing Plan","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan#section-2-test-environment","content":" ","version":"Next","tagName":"h2"},{"title":"Device Matrix​","type":1,"pageTitle":"Accessibility Testing Plan","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan#device-matrix","content":" The MVP will support both iOS and Android devices. Since there is a variance between accessibility capabilities across operating systems, one device will be manually tested from each platform.  These devices will be selected from the Device Matrix based on availability during the development cycle. Specific devices from the device matrix may be used depending on the test case. For instance, when testing text / content resizing capabilities, devices with a smaller screen size should be prioritized.  While additional configurations may exist on other devices (i.e. non-Samsung Android devices), these settings are likely to be driven by personal user preferences and to go beyond fundamental platform accessibility capabilities.  ","version":"Next","tagName":"h3"},{"title":"Test Tools​","type":1,"pageTitle":"Accessibility Testing Plan","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan#test-tools","content":" Multiple testing tools will be used to ensure adequate testing coverage. Where possible, platform specific assistive technology will be used to inspect accessibility properties that manifest differently across platforms.  Voiceover (iOS) and Talkback (Android) will be used to test Screen Reader capabilitiesBluetooth keyboards* will be used to test keyboard operability. The type of bluetooth keyboard will be confirmed once devices are procured. Deque mobile app testing for iOS and Android may be used to audit the app as a comprehensive set of functionality is developed.If needed, the results of the full app scan will be shared with the 508 Office nearing the end of the development cycle.    ","version":"Next","tagName":"h3"},{"title":"Section 3: Testing Protocol​","type":1,"pageTitle":"Accessibility Testing Plan","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Accessibility/testing-plan#section-3-testing-protocol","content":" This testing protocol will be used to guide the testing process. This testing plan may be adjusted in cases where a requirement has been de-prioritized or is determined to be unfeasible for MVP.  In the criteria section, [P] and [F] denote passing and failing criteria, respectively.    Requirement Preference\tProtocol\tCriteriaColor\tVisual observation that color is not the only method used to provide information.\t[P] If color is used but is not the only method to provide information. [F] If color is the only method used to provide information. Color Contrast\tUse a contrast comparison tool to determine contrast ratio between text and background colors.\t[P] if the contrast ratio is 4.5:1 or greater for normal fonts, and 3:1 or greater for 19px+ fonts, when comparing text to background colors. [F] Less than 4:5:1 contrast ratio for normal fonts and 3:1 for large fonts, when comparing text to background colors. Heading levels, heading and labels\tUse a screen reader to: Ensure that there is only h1 on the pageEnsure all heading levels are purposeful and in logical orderEnsure that no headings are skipped [P] If there is only one h1 on the page and all heading levels are purposeful, in logical order and no headings are skipped. [F] If any heading is skipped, read in illogical order, not purposeful or there is more than one h1 on the page. Info and Relationships\tVerify that the screen reader describes any visual information that denotes a relationship, e.g. a child-component relationship to a parent-component.\t[P] If the user is informed of visually communicated information and relationships [F] If visually communicated information and relationships are not declared to the user Lists\tEnsure that the screen reader describes any list-like components as lists.\t[P] If lists are programmatically determined. [F] If lists are not programmatically determined. Page title\tReview each page in the app and ensure that each unique page title is both descriptive and differentiated.\t[P] If each page title is unique, descriptive and differentiated. [F] If a page title is misleading or undescriptive Sensory characteristics\tVisually inspect pages for any items that require characteristics like shape, color, size, visual location, orientation, or sound to be understood or operable.\t[P] If all components and pages are understood and operable without needing shapes, colors, size, visual locations, orientations or sounds. [F] If pages require any shape, color, size, visual location, orientation, or sound to be understood or operable. Text alternatives\tReview any non-text content with the screen reader to ensure it has a text alternative.\t[P] User is able to interact with non-text content by way of text alternatives. [F] User has no alternative for non-text content. Flashing content\tN/A – The app does not contain any flashing content. In the event this is added, the tester will ensure that any flashing content does not flash more than 3 times per second (3 Hz.)\t[P] No flashing content or if there is, it flashes 3 times per second or less. [F] Flashing content &gt; 3 times per second. Label in name\tReview all components with visual labels and ensure the name of the label either matches or is part of the accessible name that is read by the screen reader.\t[P] The label of the component either matches or is part of the accessible name. [F] The label name is not included in the accessible name or this content is repeated by the screen reader. Identify Input Purpose - Form labels and instructions\tUse the screen reader and visual observation to ensure all fields collecting information are well labeled so the user can easily tell what is needed.\t[P] Purpose for each input field for information collection from the user is easily determined. [F] Input field does not clearly convey the information needed. Form error identification\tUse the screen reader and visual observation to verify that any form entry or submission errors are clearly conveyed to the user. In cases where the app automatically corrects an entered value, the constraint is also communicated.\t[P] Screen reader clearly informs users of errors that have occurred during entry or submission. [F] Error messages do not exist, or the screen reader fails to read errors appearing during entry or submission. Input triggers\tVisually observe that filling out form fields will not change the content of the page or form in any major way and that any change that does occur is communicated to the user.\t[P] Filling in a form causes no changes in page content. [P] Filling in a form causes a minor change in page content, but is communicated to a user. [F] Input by the user causes major structural changes to the form or page and this change is not communicated to a user. Form error suggestions\tUse the screen reader and visual observation while generating errors to ensure that the user is given clear suggestions on how to fix their input.\t[P] Input errors are accompanied by suggestions on how to fix the error. [F] Upon entering information that results in an error, the user does not receive clear suggestions on how to fix the error. Legal, financial and data error prevention\tOn the direct deposit page (and any additional pages that are added in the future that require legal or financial data input), ensure that a user can do at least one of the following: Review the information they’ve enteredConfirm that the information they’ve entered is correctReverse or change the information they’ve entered after submission [P] The user is able to review, confirm, reverse, or change financial and legal inputs. [F] The user is unable to do any of the aforementioned actions and all legal and financial data inputs are final. Meaningful Reading Order\tUse the screen reader to ensure page content is read in a logical order. Occasionally, iOS will override the focus order when using Switch Control / Voice Access or keyboard. QA should test for this and attempt to find a solution, but this is not always possible to fix.\t[P] Content is read in a logical order. [F] Content is not read in a logical order and jumps around. Images of Text\tUse visual observation to verify images are not purely text. If images of text do exist, determine whether this is essential to the information being conveyed (e.g. a logo).\t[P] Images are not purely text (unless it can’t be accomplished via styled text). [F] Image is purely text despite there being a viable alternative. Text Spacing\tUse inspection tools to verify the following: Line height / spacing is at least 1.5 times the font size.Paragraphs are at least 2 times the font size.Letter spacing is at least 0.12 times the font size.Word spacing is at least 0.16 times the font size. [P] Line height / spacing is at least 1.5 times font size, paragraphs are at least 2 times font size, letter spacing is at least 0.12 times font size, word spacing is at least 0.16 times font size. [F] Line height / spacing is less than 1.5 times font size, paragraphs are less than 2 times font size, letter spacing is less than 0.12 times font size, word spacing is less than 0.16 times font size. Text Resizing\tUse the OS font scaling settings to verify the user is able to resize content to the maximum device size. Note: The header and navigation bar will not be reviewed for this criteria, as resizing these components significantly would make them unusable. On certain device sizes, when a user has display zoom enabled on their device, we can only accommodate text size increases to an extent. Content may become cut off or break out of containers. There is no known fix at this time. Content may also become cut off in native components (usually Android) such as alert boxes when the text size is increased. If this occurs, a recommendation may be made to reduce the length of the copy in the container.\t[P] Text may be resized with no loss of functionality. [F] User experiences some loss of functionality when text is resized. Time Limits\tN/A as no time limits currently exist. In the event this is added, the tester will use the screen reader and visual observation to ensure any time limits under 20 hours and set by the content can be turned off, adjusted, or extended.\t[P] If there are no time limits or any time limits existing may be adjusted, extended, or the limit is longer than 20 hours. [F] If there is a time limit (other than essential) that may not be adjusted, extended or is longer than 20 hours. Status Messages\tUse the screen reader and visual observation to check that any errors or other status messages (like “saved” or “submitted”) are communicated to the user.\t[P] All status messages are communicated to the user and may be seen or heard with a screen reader. [F] Status messages are not communicated to the user or read by the screen reader. Target Size\tUse the inspection tool to verify all touch point / target pointer inputs on a page are at least 44px by 44px in size.\t[P] If all touch points on a page are 44px by 44px or larger. [F] If any touch point on a page is smaller than 44px by 44px. Pointer Gestures\tBy observation, verifying no inputs (other than scrolling) requires any gestures other than tapping.\t[P] If all components (e.g. buttons, tabs, or sliders) may be operated with a simple tapping gesture to operate. [F] If a component besides scrolling requires a sliding or path-based gesture to operate. Pointer Cancellation\tBy observation, verify that any functionality that can be operated using a single pointer has at least one of the following true: No down-event, abort or undoNo up-reversal (unless it is essential) [P] There is no down-event, abort, undo or there is no up-reversal (unless it is essential). [F] There are down-events, aborts, undos and up-reversals that are not essential. Motion Actuation\tBy observation, verify that there are alternatives to any feature requiring device motion (like Face ID) and that there is no required shaking or tilting of the device, etc. Note: Taking a picture with the device is an exception because it is an essential function with no alternative.\t[P] If all functions using motion have an alternative that doesn’t require shaking or tilting of the device. [F] If shaking or tilting of the device is necessary without an alternative (other than taking pictures). Page Language\tN/A since the app only supports English. If an app supports multiple languages, ensure that the language can be accurately identified by the device by checking that: Screen readers can load the correct pronunciation rules.Characters and scripts are displayed correctly.Media players can show captions correctly. [P] Page is written in human language and is easily read, both visually and with the screen reader. Media players and characters/ scripts are also correct. [F] Page is unable to be read visually or by screen reader. Characters and script do not match the selected language. Name, Role, Value\tUse the screen reader and visual observation to verify all custom UI components have a discernible, logical name and role (and value when applicable).\t[P] The name, role, and value when applicable, of each custom component are clear and read by the screen reader. [F] Any custom UI components are missing a name, role or value. Keyboard Focus Visibility\tUse a keyboard connected to the device and verify ability to tab through page elements, ensuring that focus is clearly visible.\t[P] If focus is clearly visible while tabbing through elements. [F] If focus is difficult to determine while tabbing through elements. Keyboard Focus Order\tUse a keyboard connected to the device to tab through page elements. Verify the following: Tab order is logical.All focused elements are read aloud by the screen reader. Occasionally, iOS will override the focus order when using a keyboard. QA should still test for this and attempt to find a solution, but this is not always possible to fix.\t[P] If tab order is in logical order AND all elements are read aloud by screen reader. [F] If tab order jumps around the screen in an illogical order OR all elements are not read aloud. Keyboard Access\tUse a keyboard connected to the device and verify that all functionality of content is accessible and operable through use of the keyboard.\t[P] If all elements on the screen are accessed and operable through the keyboard. [F] If any element on the screen may not be operable through the keyboard. Keyboard Traps\tUse a keyboard connected to the device and verify that all functions of the page are operable without becoming trapped in any particular element, modal, or widget (e.g. getting stuck and not able to leave the element).\t[P] If a user is able to leave or exit all operations on the screen without becoming trapped or “stuck”. [F] If a user gets caught in any sort of loop or element that they may not exit using any key or combination of keys on the keyboard. Character Key Shortcuts\tUse a keyboard connected to the device to verify that any custom keyboard shortcuts can be turned off, remapped or only active while the component is in focus.\t[P] If a custom keyboard shortcut is able to be turned off, remapped or is only active when the component is in focus [F] If a custom keyboard shortcut cannot be modified or is active beyond in-focus components. Focus Triggers\tUse a keyboard connected to the device to tab through and verify that no unexpected changes appear to page content by simply changing focus.\t[P] If no unexpected changes occur when changing focus [F] If any unexpected changes occur to page content when changing focus Redundant Entries\tN/A – Complex forms requiring redundant entries do not currently exist in the app. In the future, if forms with redundant entries are added and required, ensure that the field can be: auto-populated, oravailable for the user to select. Except when: re-entering the information manually is essential,the information is required to ensure the security of the content, orpreviously entered information is no longer valid. [P] Redundant form entries can be auto-populated or are available to select. [P] It is required that a redundant form entry be manually entered due to the security of the content, the previous information entered is invalid, or entering the information again manually is essential. [F] A user must manually input information into redundant form fields without the ability to auto-populate or select and it is not due to invalidity, secure content, or otherwise essential to manually entire. Focus Not Obscured\tUse visual observation to verify that when a UI component receives focus, no part of the component is hidden by other content (e.g. the footer navigation bar).\t[P] No focusable elements are obscured or hidden by other content / elements. [F] A focusable element is hidden or obscured behind / below another element. Consistent Help\tN/A – A help feature does not currently exist in the app. If a help feature is added to the app in the future and is included / repeated on multiple screens, visually verify that it occurs / appears in the same relative order and / or area on each screen.\t[P] A help mechanism exists and appears in the same relative area on each screen of the app. [F] A help mechanism exists and does not appear in the same relative area on each screen of the app. Accessible Authentication\tVerify that a cognitive function test (e.g. remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following: Another authentication method that does not rely on a cognitive function test.A mechanism is available to assist the user in completing the cognitive function test. Note: We do not currently have control over the login process and cannot ensure compliance with this guideline.\t[P] The login process does not only require a cognitive function test to login. If a cognitive function test is present, it provides alternatives. [F] The login process requires a cognitive function test to login and there is no other alternative to bypass and / or gain assistance in completing the test to login. ","version":"Next","tagName":"h2"},{"title":"Closing bug tickets","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/ClosingBugTickets","content":"","keywords":"","version":"Next"},{"title":"Why not just write up all bugs and keep those issues around forever?​","type":1,"pageTitle":"Closing bug tickets","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/ClosingBugTickets#why-not-just-write-up-all-bugs-and-keep-those-issues-around-forever","content":" To deliver a meaningful, high-quality app to veterans, teams must devote some portion of their time to fixing bugs to improve the user experience. However, even on teams that are dedicating a reasonable portion of time towards those improvements, it's easy for a backlog of bug tickets to get bloated to the point where it's unmanageable (requires too much cognitive load to understand &amp; prioritize).  In addition to spending 30% of our time on maintenance (bug fixes, code upkeep, and the like), a clear set of definitions for bug tickets that we will close as 'not fixing' will help keep the backlog of bug tickets to a manageable, meaningful set.  ","version":"Next","tagName":"h2"},{"title":"When to close as not fixing​","type":1,"pageTitle":"Closing bug tickets","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/ClosingBugTickets#when-to-close-as-not-fixing","content":" Bug tickets that should be closed without fixing include:  Any bug in an external system, where the mobile app team cannot / will not be responsible for fixing it For high-severity bugs, ideally when closing they will include information about how the issue was communicated to the responsible external team Bugs that are no longer relevant/no longer apply (for example, a visual issue with the UI of a screen, but the screen has since been redesigned to remove the previously-wrong element)Bugs that are prohibitively 'expensive'/risky to fix (decision made in conjunction with the relevant FE team)Low-severity bugs which have been reported from production, and we are unable to reproduce in staging  ","version":"Next","tagName":"h3"},{"title":"Process​","type":1,"pageTitle":"Closing bug tickets","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/ClosingBugTickets#process","content":" Anyone can close a bug ticket as &quot;not fixing&quot; by closing the issue, adding a comment with explanation, and applying the &quot;Closed - Can't / Won't Fix&quot; label.Anyone can open a previously &quot;not fixing&quot; bug ticket by re-opening it, adding a comment with explanation, and contacting the owning subteam about it. ","version":"Next","tagName":"h3"},{"title":"Compatibility and Support","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Compatibility","content":"","keywords":"","version":"Next"},{"title":"Mobile OS Support​","type":1,"pageTitle":"Compatibility and Support","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Compatibility#mobile-os-support","content":" When building a mobile app, minimum OS compatibility must be selected. Supporting older operating systems allows more potential users to be able to run the app, but also may cause support issues as older hardware and unsupported operating systems need to be maintained. Supporting only newer operating systems reduces the maintenance complexity of the app, but also reduces the number of people who may install the app.  Our goal is to have allow veterans to access the mobile app in as many versions as possible, while keeping the work necessary to support those versions scalable and sustainable.  ","version":"Next","tagName":"h2"},{"title":"Support Levels​","type":1,"pageTitle":"Compatibility and Support","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Compatibility#support-levels","content":" Major OS versions for iOS and Android will fall into one of three support levels:  Active: tested each release; will fix bugsPassive: not tested each release; will fix bugs (when practical)Unsupported: not tested; won't fix bugs  These levels are defined by:  Active: Used by 80% of veterans for the VA Health and Benefits mobile app in the last quarter iOS: Last 2 major OS versionsAndroid: Last 3 major OS versions Passive: Any major versions older than Active, not yet UnsupportedUnsupported: Version for which OS vendor or major dependency (ex: login, react native) has dropped support. Dropping support includes end of development tool support and/or end of security updatesAs of May 2024, there are no unsupported OS versions for the app ","version":"Next","tagName":"h3"},{"title":"Detox Best Practices","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/Detox Best Practices","content":"","keywords":"","version":"Next"},{"title":"Creating/updating detox tests for a new feature​","type":1,"pageTitle":"Detox Best Practices","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/Detox Best Practices#creatingupdating-detox-tests-for-a-new-feature","content":" For any new feature work detox work needs to either be:  Added to the acceptance criteria and done on a per ticket basisDone in a new ticket at the end of the feature that encompasses all the work completed (If a new ticket needs to be made please follow the Engineering best practices for ticket creation.)  The following must be done for all new feature detox work no matter whether you are updating an existing detox test or creating a new one.  Ensure that the test encompasses any new changes to the manual release candidate (RC) script and test steps where possible Anything that happens outside of the app itself can't be automated with Detox. In the past this has included stuff like opening and selecting an attachment in messages etc. Inform QA what has been automated. This allows QA to: Move the correct manual cases to the automated folder/split a case if needed in testRailConfirm that all test runs for the new automated script can be recorded in TestRail (preferably automatically, but at least manually) Ensure the new/updating script provides artifacts (where necessary) for success and failureEnsure that the new test has been added to the array/dictionary in the Navigation.e2e and AvailabilityFramework.e2e tests (if needed). How to add new tests can be found hereEnsure that the test is named for the screen/feature its automating ('Prescriptions', 'HomeScreen', etc.) and that the test has been placed in the e2e folder.Ensure that e2e_detox_mapping.yml has been updated to account for any added/deleted files  ","version":"Next","tagName":"h3"},{"title":"Updating Detox tests for non feature work​","type":1,"pageTitle":"Detox Best Practices","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/Detox Best Practices#updating-detox-tests-for-non-feature-work","content":" Detox is currently running on a per PR basis and is running any tests that might be affected with the code change. The following must be done if any of the detox tests fail:  Update any parts of the detox that were affected by the code change and repush the PR. This will cause the test to rerun. If you want to check to see if the detox test works before pushing the PR you can either run the test locally or run the test in github actions using the workflow_dispatch trigger Ensure that e2e_detox_mapping.yml has been updated to account for any added/deleted files in the PR  ","version":"Next","tagName":"h3"},{"title":"General Best Practices​","type":1,"pageTitle":"Detox Best Practices","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Automation/Detox Best Practices#general-best-practices","content":" Tests usually follow the same initial format where you import the necessary variables, have a dictionary of any constants, and run a beforeAll statement that navigates to the specific feature in the appAny global functions/constants should be placed in utils.ts. Utils.ts is also where all the navigation to a specific page functions live.Set your demo mode password to '' (null) before running the testsUse by.id in your tests (and add the associated testID to the code) where possible. This makes the tests less flaky ","version":"Next","tagName":"h3"},{"title":"Release Testing","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing","content":"","keywords":"","version":"Next"},{"title":"The release testing process​","type":1,"pageTitle":"Release Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing#the-release-testing-process","content":" ","version":"Next","tagName":"h2"},{"title":"Release run and build are made​","type":1,"pageTitle":"Release Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing#release-run-and-build-are-made","content":" When it's time for a new release, automated scripts create iOS and Android release candidate builds that are distributed via TestFlight and AppTester, and also a release candidate regression testing run in TestRail. A member of the QA team will assign the cases of the test run evenly to the available testers, and pick an assistive technology that will be used for all cases in the run.  ","version":"Next","tagName":"h3"},{"title":"Testing the release candidate build​","type":1,"pageTitle":"Release Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing#testing-the-release-candidate-build","content":" Members of the QA team run their assigned portions of the script, using the release candidate builds and 'actual' test users in the VA staging environment (not demo mode of the app). When issues that are found, the QA Engineer will write a bug ticket (per usual process), making sure to check if the issue is present in the most recent release that's live in App and Play stores, or if it's a new issue specific to this release.  The release candidate script is split between manual testing and automated testing (see description of automated release testing). For efficiency, we are working to automate as much RC testing as possible. However, due to limitations within the VA ecosystem around storing and accessing credentials to staging environments, as well as limitations by upstream teams on how often we can make PUT requests, many service calls that are critical to cover during release testing will remain manual testing, for now.  Occasionally, upstream service downtimes will prevent QA from running portions of the RC script (ex: appointment services are down during the RC testing window, which prevents us from testing appointment details display and appointment cancellation). When this occurs, the QA assigned to test those cases works with the Product release owner, typically in Slack, to figure out appropriate next steps (delaying release signoff in hopes of the services coming back up to allow testing; releasing without QA signoff, with the risk of not having tested that portion of the script; etc.)  ","version":"Next","tagName":"h3"},{"title":"QA release signoff​","type":1,"pageTitle":"Release Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing#qa-release-signoff","content":" Once all cases in the release testing script have been run, a QA representative adds a comment to the release ticket which includes a list of bugs found (if any), and whether or not QA recommends releasing the candidate build based on our testing results. The Product release owner uses this information to decide whether to release as-is, or to fix bugs before release.  ","version":"Next","tagName":"h3"},{"title":"Maintaining the RC regression testing script​","type":1,"pageTitle":"Release Testing","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Release Testing#maintaining-the-rc-regression-testing-script","content":" As the functionality within the mobile app continues to grow, it's important to maintain a release testing script that both 1) covers the key workflows of critical features within the mobile app and 2) is a reasonable time investment to run each release.  Continuing to automate what we can is a key element of getting good coverage of the mobile app each release, while not continually increasing QA testing time required to release the app.  Another key element to maintaining this balance is crafting RC test cases for new features at a good level of 'depth' (more intensive for highly-used features; less intensive for less-frequented activities). For further discussion, see the RC case responsibilities for feature testing link will be added after that documentation is written. ","version":"Next","tagName":"h2"},{"title":"Why a testing summary?","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Testing Summary","content":"","keywords":"","version":"Next"},{"title":"When is a testing summary written​","type":1,"pageTitle":"Why a testing summary?","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Testing Summary#when-is-a-testing-summary-written","content":" A testing summary (implicit in the name) is written when testing is completed, but before the release of the software under test. ","version":"Next","tagName":"h2"},{"title":"Tool Setup","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Tool Setup","content":"","keywords":"","version":"Next"},{"title":"TestFlight (iOS testing app distribution)​","type":1,"pageTitle":"Tool Setup","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Tool Setup#testflight-ios-testing-app-distribution","content":" Ask your engineering lead to grant permission for you to use the TestFlight app (they will need your company work email address, to add it to the list of allowed users).Download the TestFlight app on your testing device.Wait until you receive an email invitation to test the VA app via TestFlight (from the Engineering lead, via the work in step 1), then open the email and tap “View in TestFlight” or “Start testing”, then tap “Install” or “Update” for the app you want to test.  By default, TestFlight only shows the most recent testing build that was built. If you are looking for a specific build, make sure that the comments describing what's in the build or the build ID number match what you are looking for. You can find earlier builds by scrolling down and tapping &quot;View Previous Builds&quot;, then picking a version (they are listed chronologically, with the most recent previous builds in the first version listed).  As a general resource, here's Apple's documentation on testing with TestFlight.  ","version":"Next","tagName":"h2"},{"title":"AppTester (Android testing app distribution)​","type":1,"pageTitle":"Tool Setup","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Tool Setup#apptester-android-testing-app-distribution","content":" Ask your engineering lead to grant permission for you to use the AppTester app (they will need your company work email address, to add it to the list of allowed users).Wait until you receive an email invitation to test the VA app via AppTester, then open the email and and tap either “Download the latest build” or “Install Firebase App Tester”Tap &quot;Download App Tester&quot; on the banner across the bottom of the next pageTap &quot;OK&quot; on the warning popup (this type of file can harm your device)After the .apk has fully downloaded, tap &quot;open&quot;If you get a warning that you can't install unknown apps from the internet, tap &quot;Settings&quot; to go update those settings. This should open the “Install unknown apps” settings page, or the “App info” settings page for Chrome. If it doesn’t, you can navigate to it via “Settings &gt; Apps &gt; Chrome”. Then, find the “Install Unknown Apps” and section, tap it, and toggle “Allow from this Source” to the “ON” position.At this point, you should be prompted to install &quot;App Tester&quot; - tap &quot;Install&quot;. If you're not prompted automatically, you can use the back button to go back to re-download and install from the screen in step 3.After the app has installed tap &quot;Open&quot;. You should see the VA Health and Benefits mobile app in the list of test apps - tap on it.On the next screen, there should be a banner that says you need to enable additional permissions. Tap &quot;Get Started&quot; on that banner.In the instructions sheet that appears (and you're welcome to read those instructions, or just follow along here) tap &quot;Open Google Play store&quot;Once the play store opens, tap your profile icon in the top righthand corner of the screen (will have your picture, or a generic profile-esque icon)Select &quot;Settings&quot;Tap the &quot;About&quot; section to expand it, locate the &quot;Play Store Version&quot; row and tap it 7 times.A snackbar will appear that says &quot;You are now a developer&quot;. Scroll up and tap on the &quot;General&quot; area in Play Store settings.Toggle &quot;Internal App Sharing&quot; to ONTap &quot;turn on&quot; in the popup window that appearsNavigate back to App Tester. The instruction sheet should still be present - scroll down to the bottom and tap &quot;done&quot;Tap &quot;Download&quot; on the build you want to install. Depending on your device, you will either be taken to an &quot;about this app&quot; page while the app downloads and installs, or you will be taken to the Google Play Store where you will need to tap &quot;install&quot; to actualy start installing the app.  If you are looking for a specific testing build, make sure that the comments describing what's in the build or the build ID number match what you are looking for. You can find earlier builds by scrolling down (they are listed in reverse chronological order).  As a general resource, here's Google's documentation on troubleshooting/FAQs for testing with Firebase AppTester.  ","version":"Next","tagName":"h2"},{"title":"Charles Proxy (SSL proxying tool)​","type":1,"pageTitle":"Tool Setup","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Tool Setup#charles-proxy-ssl-proxying-tool","content":" Get approval for a Charles Proxy license from mobile Engineering lead, then work with internal IT team to get Charles Proxy on your work computer.Configure Charles and your iOS devices for plain text viewing of traffic.Configure Charles and your Android devices for plain text viewing of traffic.If you've never used a tool like this to intercept and mock data, you can use the articles on map local and breakpoints as a starting point.  The Charles certificate installed on your devices will expire after a bit less than a year. When that happens, you'll need to reset your certificate and reinstall it on your devices.  The Charles Docsy site is great, but not necessarily easily searched, so here are quick links to the iOS troubleshooting and Android troubleshooting pages. ","version":"Next","tagName":"h2"},{"title":"Resources","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources","content":"","keywords":"","version":"Next"},{"title":"QA-specific​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#qa-specific","content":" ","version":"Next","tagName":"h2"},{"title":"TestRail​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#testrail","content":" TestRail is the web-based test management system used across the VA platform teams to document testing, including the VA Health &amp; Benefits mobile app. Requesting access to TestRail is done via DSVA Slack.  If you're unfamiliar with TestRail overall, their own guide and the basic how-to's laid out by the Platform team are good starting resources to browse.  Within the VA Mobile project, our top-level test case folders to be familiar with are (links are to parent folders, explore the subfolders to see all cases):  the release candidate regression test cases, which contains cases run during release testingthe active cases, which collectively describe the full testable behavior of the mobile appthe standard test cases, which are generic test cases for functionality that spans features (such as error handling, accessibility, or feature flags) and can be pulled into test runs for new features without re-writing casesthe upcoming feature cases, which contains cases written ahead of time for not-yet-implemented features, andthe archive, which contains cases for deprecated functionality in the app  ","version":"Next","tagName":"h3"},{"title":"TestFlight & AppTester​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#testflight--apptester","content":" We distribute testing builds through TestFlight for iOS, and Firebase's AppTester for Android. Key builds for manual testing include: release candidate builds for release testing, builds based on the develop branch that are updated daily (for visual QA or backend testing), and on-demand builds of branches not yet merged to develop for ticket testing.  To get access to either TestFlight or App Tester, follow the platform-specific instructions for your testing device on the Tool Setup page.  ","version":"Next","tagName":"h3"},{"title":"Charles Proxy​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#charles-proxy","content":" We use Charles Proxy as a key tool for things like error state testing, mocking data we don't have access to, and downtime window testing.  ","version":"Next","tagName":"h3"},{"title":"On demand build​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#on-demand-build","content":" We create on-demand builds of the pre-production mobile app using a github workflow for testing new frontend code. You need to have write-access to the mobile app repo to kick off these builds.  Visiting the page linked above, tap on &quot;Run Workflow&quot; near the top righthand corner. Then fill out the workflow prompts: By default, the develop branch is selected in the &quot;Use workflow from&quot; field. Replace it with the branch you want to test.By default, the staging environment is selected in the &quot;Environment&quot; field. Very occasionally (such as user testing), you'd change it to production instead.Add a label to the &quot;Notes&quot; field that will help you identify your build in a list of all on-demand builds. Typically we'll include ticket ID, such as &quot;9687 fix payment name&quot;Tap &quot;run workflow&quot; Typically it takes ~10-15 minutes for Android to build, and about 5 minutes longer than that for iOS to build.If any build fails, attempt to re-run the failed builds at least once (iOS in particular can be a little flaky).  ","version":"Next","tagName":"h3"},{"title":"Mobile team tools (as they relate to QA)​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#mobile-team-tools-as-they-relate-to-qa","content":" ","version":"Next","tagName":"h2"},{"title":"1Password​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#1password","content":" The VAMobile and VA.gov vaults contain usernames and passwords for staging test users.  ","version":"Next","tagName":"h3"},{"title":"Github​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#github","content":" Most commonly used: writing a bug ticket with the new bug report template.  ","version":"Next","tagName":"h3"},{"title":"How do I​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#how-do-i","content":" ","version":"Next","tagName":"h2"},{"title":"Log into the mobile app in a staging environment?​","type":1,"pageTitle":"Resources","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/Resources#log-into-the-mobile-app-in-a-staging-environment","content":" First, you need to get TestFlight (iOS) or AppTester (Android) set up on the device you'll use, which includes coordination with the mobile Engineering lead to get added to the list of approved testers.If you're testing backend changes, it's best to use a current version of the daily develop builds. If you're testing frontend changes, you'll need to follow the on-demand build process, above.Any credentials that work to log into staging.va.gov will also work to log into the mobile app in the staging environment. The mobile team, by and large, does not have the ability to create staging users or specific staging data, so you will need to work with other VA teams to do any prep needed for testing. ","version":"Next","tagName":"h3"},{"title":"User Experience","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/","content":"User Experience The User Experience team for the VA mobile app includes interaction design, content design, accessibility and research practices. See the menu at left for more detail.","keywords":"","version":"Next"},{"title":"Foundations","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/Foundations/","content":"","keywords":"","version":"Next"},{"title":"Our approach​","type":1,"pageTitle":"Foundations","url":"/va-mobile-app/docs/UX/Foundations/#our-approach","content":" As outlined in our project mission, the VA: Health and Benefits app should be a trusted source for Veterans to quickly and easily check the status of their VA services and complete simple, transactional tasks across their health and benefits.  ","version":"Next","tagName":"h2"},{"title":"Values​","type":1,"pageTitle":"Foundations","url":"/va-mobile-app/docs/UX/Foundations/#values","content":" In order to accomplish this we approach our design work by the following values:  Accessibility first The VA Mobile App is an application that supports all users and their needs. This means we design all aspects of the application to be inclusive and accessible. Human centered In all aspects of the design process, we must understand and connect with Veterans on a human level.  ","version":"Next","tagName":"h3"},{"title":"Process​","type":1,"pageTitle":"Foundations","url":"/va-mobile-app/docs/UX/Foundations/#process","content":" Our values are embodied in our design process:  Discovery &amp; research In order to understand a new feature or problem we interview users, go through research done by other VA teams, and/or look at other companies or applications for inspiration. Iteration cycles In most cases, we go through several iterations of a design before it is handed off to engineering. Most designs begin with sketches or low-fidelity mockups in Balsamiq. Accessibility &amp; technical feasibility reviews These reviews are conducted when appropriate and are used to clarify designs from an accessibility and engineering perspective. Incorporation of standard mobile conventions In an effort to utilize components and functionality that user’s are most familiar with.  ","version":"Next","tagName":"h3"},{"title":"Principles​","type":1,"pageTitle":"Foundations","url":"/va-mobile-app/docs/UX/Foundations/#principles","content":" Principles help in establishing a foundation for a system or application. They allow teams to have a unifying vision and objective standard of measurement.  VA Design Principles ","version":"Next","tagName":"h3"},{"title":"Working with others","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/working-with-others","content":"","keywords":"","version":"Next"},{"title":"Planning and Design (PM, UX, Content)​","type":1,"pageTitle":"Working with others","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/working-with-others#planning-and-design-pm-ux-content","content":" Involvement\tHow to pull us in\tArtifacts QA deliversHigh-level design review or feature planning\tIncluded on meeting requests, tagged in Slack/invited to relevant channels\tn/a  ","version":"Next","tagName":"h2"},{"title":"Implementation & PR review (Eng)​","type":1,"pageTitle":"Working with others","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/working-with-others#implementation--pr-review-eng","content":" Involvement\tHow to pull us in\tArtifacts QA deliversHigh-level review or feature planning\tIncluded on meeting requests, tagged in Slack/invited to relevant channels\tn/a Creation of test plan (features only**)\tTicket created (using this template) and assigned to appropriate QA Engineer\tCompleted ticket will include: link to TestRail for peer-reviewed test plan and information about any further testing data prep needed from feature team  **For new feature implementation or other large changes, parallelizing test planning with engineering implementation is the most efficient way to work, to give advance notice if the planned test data is not sufficient for QA needs, and to make sure that QA is ready to jump into testing as soon as Engineering finishes PR review. For bug fixes or other small changes, QA typically will wait until PR review is complete to create a test plan. If unsure if a test plan creation ticket should be created for a particular need, please ask your assigned QA Engineer.  ","version":"Next","tagName":"h2"},{"title":"Testing (QA)​","type":1,"pageTitle":"Working with others","url":"/va-mobile-app/docs/QA/QualityAssuranceProcess/working-with-others#testing-qa","content":" Involvement\tHow to pull us in\tArtifacts QA deliversHigh-level review or feature planning\tIncluded on meeting requests, tagged in Slack/invited to relevant channels\tn/a Manual testing\tEngineering implentation tickets assigned to appropriate QA Engineer, after passing PR review\tPer-ticket: Completed ticket will include planned &amp; completed testing (comment, or TestRail link, as appropriate). Per-feature: Testing Summary. Automated testing\tEngineering detox script addition/updates assigned to appropriate QA Engineer, after passing PR review\tPRs or tickets will include QA review  NB: During testing, towards the end of QA review, the UX team does UX review (visual, interaction, and content review). For details, reference the UX team documentation on the UX QA process. ","version":"Next","tagName":"h2"},{"title":"Information Architecture","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture","content":"","keywords":"","version":"Next"},{"title":"Defining information architecture​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#defining-information-architecture","content":" Information architecture (IA) is the practice of organizing, structuring, and labeling content in an effective and sustainable way. This guide is intended to help designers and content maintainers make content within the VA mobile app usable and findable to Veterans.  ","version":"Next","tagName":"h2"},{"title":"Information Architecture principles​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#information-architecture-principles","content":" The following guiding principles are used to help Veterans find information and complete tasks within the VA Health and Benefits app:  Considers the larger VA system: The app’s IA and navigational language consider VA touchpoints, properties and programs outside of the mobile app (digital and physical), with each thing working together as an omnichannel system.Consistent sense of place: The app uses multiple wayfinding approaches to communicate where users are now in the app and where they can go from there. Examples of this are displaying global navigation on every screen in the hierarchy, screen names that are unique and descriptive, using common screen transitions to communicate a screen's position in the hierarchy, and including descriptive back labels on each screen.Delivers value at every level: Each screen in the app should contain valuable and/or actionable content—no screens that are just lists of links.Extensible: The app’s IA and navigation model leave room to expand its feature set by considering and anticipating future organizational needs.Informed by Veterans: IA decisions are based on user research conducted with Veterans, examining their mental models around the organization of common tasks and undertanding of labels, as well as getting feedback on proposed solutions.Keeps it simple: Content is prioiritized and includes only what’s absolutely necessary—the fewer elements (number of levels in the hierarchy, number of screens, number of links on a screen) the better.  ","version":"Next","tagName":"h2"},{"title":"References:​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#references","content":" VA.gov Information Architecture (IA) teamBest Practices for IA on VA.govVA.gov Design principles  ","version":"Next","tagName":"h3"},{"title":"When to think about IA​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#when-to-think-about-ia","content":" Launching a new feature in the VA Health and Benefits appAdding a new category or subsection to the VA Health and Benefits appRewriting content and needing to split or merge an existing screenLooking to improve the findability of an existing feature and/or screenRemoving a feature and/or screenChanging the UX of global navigational elements (i.e. tab bar/bottom navigation, top bar, including treatments for back buttons, contextual actions and screen titles)  ","version":"Next","tagName":"h2"},{"title":"IA documentation​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#ia-documentation","content":" Understanding what’s guiding the app’s current information architecture and make future decisions that are in line with the existing organization, navigation, labeling, and indexing systems.  ","version":"Next","tagName":"h2"},{"title":"Sitemap/flow diagram​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#sitemapflow-diagram","content":" A sitemap is a planning tool that visually shows how information will be grouped and labeled, where content will be located, and how a user will move through the app. This adaptation of a standard sitemap includes the system display logic for screens that have variants, key actions (buttons, links), common processes and points where it makes use of native mobile integrations. This is the source of truth for the app’s IA.    VA Mobile App - Detailed sitemap 2.0  ","version":"Next","tagName":"h3"},{"title":"Taxonomy description​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#taxonomy-description","content":" The VA Health and Benefits app’s IA contains four top level categories: Home, Benefits, Health and [Payments]. Each category contains at least two features and/or subcategories. Features within each category should be grouped into subsections if the number of features in a category exceeds six.  Top level categories and contents​  Home: The app’s default screen—displays a combined, personalized view of the information (and tasks) most relevant to the individual Veteran from across the VA, plus persistent access to general VA info (ex: contact and location finder) and lesser used features like Profile and Settings. Profile (Subcategory): Infrequently updated items like personal information (such as contact information, military information, DOB) that isn’t specific to a single category and app settings. Health: All health-related features and statuses. Features: Appointments, Prescriptions, VA vaccine records, Messaging (future: Medical records). Benefits: All benefit-related features and statuses that are not health-related. Features: Disability rating, Claims, VA Letters (future: Education) Payments: A unified section for managing financial information from across the VA. Features: VA payment history, direct deposit information (future: Medical copays, Bills, Travel reimbursements).  ","version":"Next","tagName":"h3"},{"title":"Adding new items to the app’s Information Architecture​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#adding-new-items-to-the-apps-information-architecture","content":" A feature’s placement within the app’s navigation and taxonomy should take user mental models, business goals, and the feature type into account. Determining Navigation and Information Architecture Placement for New VA Mobile App Features is a guide intended to help teams decide where a new feature belongs in this app’s sitemap and navigation model.Always try to find a placement in an existing category first before proposing a new top-level category for a feature. Confirm new category names and contents with card sort research before adding to the app.Within a category, keep the hierarchy as flat as possible in terms of screens (limit the levels it’s possible to drill down through in order to get to child screens), but without inlcuding too many options on a single screen.If there are many features within a category, group the features and label the groups at category level before introducing additional levels into the screen hierarchy—this helps avoid cognitive overload.All features in the VA mobile app should have a primary placement within the app’s taxonomy, even if there are multiple entry points for it at different locations within the app (example of secondary entry points: personalized home screen content, cross-references within other sections).When content outgrows the current category structure, conduct card sort research to determine new category names and contents (Avoid using “hamburger” and “more” menus as primary navigation).  ","version":"Next","tagName":"h3"},{"title":"Background​","type":1,"pageTitle":"Information Architecture","url":"/va-mobile-app/docs/UX/Foundations/Information-Architecture#background","content":" The VA Health and Benefits app’s Information Architecture and navigation model are based on the findings and output from a multi-stage, collaborative and cross-functional design and research process: Information Architecture and Navigation - High Level Project Summary  Phase I: Two rounds of card sorting (open and closed) with VeteransPhase II: Navigation model design exploration, audit and comparative analysisPhase III: Evaluative testing with Veterans, including a usability study of the proposed navigation model and sitemap reflected through a low-fidelity prototype ","version":"Next","tagName":"h2"},{"title":"Research","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/Foundations/Research/","content":"","keywords":"","version":"Next"},{"title":"Our approach​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#our-approach","content":" UX designers and researchers on the flagship mobile app’s team use various research methods grounded in human-centered design methods in order to stay current on the Veteran experience using the flagship mobile app. The team employs both qualitative and quantitative research activities based on the types of questions we’re trying to answer, and delivers these activities in an agile development cycle. A question-led approach ensures we stay focused on the specific things we need to learn to support the product roadmap.  ","version":"Next","tagName":"h2"},{"title":"Working together with Veterans​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#working-together-with-veterans","content":" When we talk to Veterans in 1:1 sessions, we use SAMHSA’s trauma-informed principles to guide our interactions with Veterans. Trauma-informed principles ensure research sessions with Veterans and the team are led with care. Members of the mobile UX team are actively involved in the VA’s trauma-informed community of practice.  ","version":"Next","tagName":"h3"},{"title":"Types of research​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#types-of-research","content":" The team uses the following research methods:  Veteran interviews (remote and in-person)VA employee interviewsJourney mappingCard sortingPrototype testingConcept TestingCompetitive analysisMobile app review analysis  We incorporate research in a dual track agile approach. We use evaluative methods to gain insight into:  Newly released mobile app features in productionUpcoming feature ideas using clickable prototype simulations  We use generative methods to:  Gain a deep awareness of the current mobile app experience,Explore new areas of the app we want to consider for our roadmap,Uncover unmet Veteran needs  Using a mixed method approach, findings from qualitative activities are compared against patterns emerging from analysis of quantitative sources, which include Google Analytics and App Store reviews. For example, if we see GA metrics indicating a large percentage of users are stopping at a certain point in the claims flow, 1:1 interviews with Veterans will enable deep dives to explore how and why Veterans are using claims in the app, and what areas might be causing confusion.  ","version":"Next","tagName":"h3"},{"title":"Ongoing research: post release​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#ongoing-research-post-release","content":" On a regular basis, when new, larger features or improvements are launched, the team will do a quick check in with Veterans using the app in order to get feedback on the overall experience. This will enable us to hear first-hand from Veterans about the initial experience after release, and help set up benchmarking metrics to compare against future improvements as we continue to iterate on the feature. Because these sessions happen in production, they are relatively fast and easy to set up and execute.  ","version":"Next","tagName":"h3"},{"title":"Running research​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#running-research","content":" The team works under the guidance provided by OCTO and follows the design and research guidelines maintained by OCTO’s platform team. This guidance includes instructions on how to set up, recruit, and run research studies.  Prior to embarking on a new research study, the team reviews any prior studies available in OCTO’s research repository. These studies might range from foundational to evaluative in nature, and this step ensures the team surfaces applicable insights that other teams have uncovered before moving forward with a new study in order to avoid duplication in studies.  ","version":"Next","tagName":"h2"},{"title":"Research templates​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#research-templates","content":" The OCTO Design Platform provides templates for research plans, conversation guides, and research reports.  Research PlanConversation GuideResearch Findings  In order to make running research studies easier and efficient, the flagship mobile app team has developed additional templates to support UX team members in the process. The templates on the flagship mobile app site should be used as supplements to the OCTO platform artifacts.  In order to encourage cross-functional team collaboration, UX team members can utilize a research observer sign up sheet template. This signup sheet template allows team members to look for open observer spots during the course of a research study and sign up for open sessions.  The research study lead uses the information provided from Perigean, the VA’s recruiting contractor, to populate the signup sheet with the session dates, times and unique zoom links prior to circulating.  Sign Up Sheet Template  ","version":"Next","tagName":"h3"},{"title":"VA Mobile app research​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#va-mobile-app-research","content":" VA mobile app UX research on GithubResearch plans and findings for VA mobile app features and research efforts, 2020 to present.Conducting remote User Research with a pre-release production app build &amp; user credentialsPlanning tips and a template for conducting remote research with a pre-release production app build.  ","version":"Next","tagName":"h2"},{"title":"VA Research resources​","type":1,"pageTitle":"Research","url":"/va-mobile-app/docs/UX/Foundations/Research/#va-research-resources","content":" VA Platform: Research at VALearn about how VA does research for VA digital services. Includes templates and guidelines to help plan, facilitate, and synthesize research.Resources for mobile research sessionsIncludes scripts to help guide participants through sharing screens and other technical issues during sessions.VA.gov Research RepositoryAll research at VA (including mobile research) is stored in a searchable repository ","version":"Next","tagName":"h2"},{"title":"Monthly App Store Review Process","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#overview","content":" Each month, the VA Mobile app team analyzes all of the app review comments that were left for the app in the Google Play Store and Apple's App Store during the previous month.  We download the reviews from the Feedback Hub. The Feedback Hub is a site run by the Mobile team that scrapes information from the app stores as well as the /r/VeteransBenefits and /r/Veterans subreddits and displays it in a way that is more usable. We label the comments with tags relevant to their content, such as “accessibility,” “ease of use,” “homepage,” “login,” “performance,” or “requests,” then analyze trending sentiments by looking at which tags that used most frequently or more than usual and whether they are used with positive, neutral, negative ratings. Finally, we remove any PII and upload all of the information to Github.  You can find the full list of comments and corresponding data (OS, user’s app version, date and time of review, rating number, and review title) as well as an overview with the trending sentiment information for each month in the VA Mobile app team’s App Stores Reviews folder in Github. You can review a step-by-step guide to the app store review process below.  ","version":"Next","tagName":"h2"},{"title":"How-to​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#how-to","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Download the reviews from the feedback hub​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-1-download-the-reviews-from-the-feedback-hub","content":" Select App Store or Play Store at the top.Ensure “All” ratings are selected from the dropdown.Input the date range for the month you are working on.Tap “search”.Click the “Download as .csv” button to export.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Import the data to Google Sheets​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-2-import-the-data-to-google-sheets","content":" In the spreadsheet, create two new sheets for the month (one for overview and one for reviews) and import the reviews for the corresponding date into that month’s &quot;reviews&quot; sheet.  Note: You can duplicate a previous month and remove the data.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Clean up the import​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-3-clean-up-the-import","content":" Verify that data pulled in correctlyAdd wrapping to the gridsVerify that the conditional formatting for the ratings pulled in (you should see red, green, etc. in the column). If not, apply it to the column. Define the range for the tags column (i.e. TagMarch24). This allows the spreadsheet to do the math and pull the totals into the overview sheet.  ","version":"Next","tagName":"h3"},{"title":"Step 4: Analyze the data​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-4-analyze-the-data","content":" Update the overview with the correct dates and review totals for the month.Read each review and add a corresponding tag. Refer to the primary tag list sheet found within the spreadsheet.Note: Not every review needs to be tagged. Use your best judgment. Verify that the totals for each tag have been pulled into the overview sheet.By looking at your overview, focus on the keywords with the most tags and then count each review with the corresponding tag.Determine if the trending sentiment for the tag is positive, negative, or mixed. Include the total (for example, if there are 20 total and 17 positive, you’d add “17 Positive” to the trending sentiment column). Pull out a few of the reviews that you think are important and add them to the review sample column (try to limit the samples to 2-4). If the trending sentiment is “mixed”, try to pull both positive and negative samples into the overview.  ","version":"Next","tagName":"h3"},{"title":"Step 5: Find or create a new folder on Github​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-5-find-or-create-a-new-folder-on-github","content":" In the App Store Reviews folder on Github, find or create the folder for the corresponding quarter.  If you are adding app store reviews for a month in an existing quarter’s folder, select the month that you are updating and edit the file.  How to create a folder for a new quarter​  Create the new folder (add a file in Github and / at the end to create a new folder). Follow the naming convention of the previous quarters (four digit year followed by a hyphen and then the quarter). Create placeholder files for all three months in the quarter. Follow the naming convention of the other files (i.e. 2024-04-Summary-VA-Mobile-App-Store-Reviews.md) Add a readme.md file to the folder (content can be copied from the readme.md file in another folder, but be sure to update the dates in the file to the new quarter).  ","version":"Next","tagName":"h3"},{"title":"Step 6: Add the overview to Github​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-6-add-the-overview-to-github","content":" Back in your app store review sheet, select only your table in the overview and then convert the overview table to markdown.Paste the converted markdown table into your Github file.Above the table, add a title in the following format: 2024 Q1 Summary VA Mobile App Store Reviews Do not forget to update the date. Back in your overview sheet, copy rows 1-3 with the date, number of reviews, etc. and paste those into your file on Github. Add bold styling to the date. Preview your file and if everything looks good, commit the changes.  ","version":"Next","tagName":"h3"},{"title":"Step 7: Add the full list of reviews to Github​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-7-add-the-full-list-of-reviews-to-github","content":" Note: To protect PII (Personal Identifiable Information), when you are pulling in the full list of reviews into Github, delete the author column prior to copying the table. You can restore it after by undoing the action (edit &gt; undo or ⌘+Z).  Replace any personally identifiable information in any of the reviews with [redacted].  After removing the author column, select the full table and then convert the overview table to markdown.Paste the converted markdown table into your Github file.Preview your file and if everything looks good, commit the changes.If you have not already done so, restore the author column in the Google sheet.  ","version":"Next","tagName":"h3"},{"title":"Step 8: Notify the team on Slack​","type":1,"pageTitle":"Monthly App Store Review Process","url":"/va-mobile-app/docs/UX/Foundations/Research/montly-reviews#step-8-notify-the-team-on-slack","content":" After the app store reviews have been added to Github, share the findings in the following Slack channel:  #va-mobile-app (in DSVA) Provide a short description and link back to that month's overview page on Github. ","version":"Next","tagName":"h3"},{"title":"How We Work","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/","content":"How We Work Where we workWorking with othersDesigning the UIDesign LibrarianBranching in FigmaBuilding screens in FigmaCreating components in FigmaPermissions and sharing in Figma","keywords":"","version":"Next"},{"title":"How to build screens in Figma","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/building-screens-figma","content":"","keywords":"","version":"Next"},{"title":"A guide to building working files and shipped files​","type":1,"pageTitle":"How to build screens in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/building-screens-figma#a-guide-to-building-working-files-and-shipped-files","content":"   ","version":"Next","tagName":"h2"},{"title":"Step 1: Create your frame​","type":1,"pageTitle":"How to build screens in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/building-screens-figma#step-1-create-your-frame","content":" Create a frame at 360 x 760.In the assets panel, search “template” and drag the template into the frame.After adding the template to the frame, you can then select that template layer, which will give you options in the design panel on the right-hand side of the screen. In this panel, you can select the category (home, health, benefits, payments) and template type (feature, subtask, etc.).    ","version":"Next","tagName":"h2"},{"title":"Step 2: Add your content​","type":1,"pageTitle":"How to build screens in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/building-screens-figma#step-2-add-your-content","content":" To create and link your content to your template, we recommend following the steps below:  From the assets panel, drag the content area component onto the page.Detach the instance and remove the content area layer (it’s just a placeholder).Add your components to the content area (they can all be customized by selecting the component’s layer in the design panel on the right-hand side of the screen).After you have completed adding your components, we recommend that you add autolayout to the main “content area (default)” component to help keep consistent spacing and alignment. Then, create a new component and give your content a unique name.In the main frame that houses your template, select the template’s layer. Scroll down to “Main Content” and then select your content component. This will replace the placeholder content with the content that you just created.  Note: You can always go back and make changes to the content component that you created. Also, there may be additional ways to create a content component, such as by starting from scratch and creating a new component.  ","version":"Next","tagName":"h2"},{"title":"Step 3: Create dark mode versions​","type":1,"pageTitle":"How to build screens in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/building-screens-figma#step-3-create-dark-mode-versions","content":" After you’ve created all of the shipped screens in light mode, you may need to create dark mode versions of your screens.  To create dark mode versions, select all of your light mode layers and duplicate them (on Mac, you can hold down option and click + drag to duplicate). We recommend visually grouping light mode versions together and dark mode versions together.We recommend adding light and/or dark mode to each of your frame names within your shipped file. For example, you may name one of your light mode frames “Profile / Landing / Light” and the dark mode frames “Profile / Landing / Dark”.After you have duplicated your light mode versions, you’ll need to change the color mode. You can adjust the mode by clicking the change variable mode icon and switching each library to &quot;Dark&quot; (see screenshot below).    You may also need to update some of your components within your content area to dark mode. The easiest way to do this is to select each component layer within the “Layers” panel on the left (you may have to click the option to “See All Layers”). You’ll want to look for the “Content” layer and may have to go several layers deep within this layer to find your individual component layers. Then, select “Dark” in the mode area within the design panel. Figma is not without glitches and will sometimes return your component to its default settings when switching the color mode. When this happens, sometimes resetting the component will fix it. You can do this by clicking the icon with 3 dots (“...”) in the design panel. Click the icon and select “Reset all changes” (see screenshot below). If this doesn’t work, you may have to update each component manually.When using the “Text Area” and “Default List” components, you may have to update each row within the component to dark mode vs. updating the entire component at one time. This will often prevent the content from restoring to default.   ","version":"Next","tagName":"h2"},{"title":"Design librarian","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/design-librarian","content":"","keywords":"","version":"Next"},{"title":"Responsibilities​","type":1,"pageTitle":"Design librarian","url":"/va-mobile-app/docs/UX/How-We-Work/design-librarian#responsibilities","content":" ","version":"Next","tagName":"h2"},{"title":"Maintenance​","type":1,"pageTitle":"Design librarian","url":"/va-mobile-app/docs/UX/How-We-Work/design-librarian#maintenance","content":" Ensures feature files are consistent. Librarian is responsible for creating new files to ensure that files are set up consistently.Librarian will review files before front-end handoff.Librarian will ensure shipped files are up-to-date. Maintains and updates app store images.  ","version":"Next","tagName":"h3"},{"title":"Improvement​","type":1,"pageTitle":"Design librarian","url":"/va-mobile-app/docs/UX/How-We-Work/design-librarian#improvement","content":" Reviews Figma files for any inconsistencies or areas of improvement.Improves how the team works in Figma.  ","version":"Next","tagName":"h3"},{"title":"Collaboration​","type":1,"pageTitle":"Design librarian","url":"/va-mobile-app/docs/UX/How-We-Work/design-librarian#collaboration","content":" Collaborates with the mobile team and answers any Figma-related questions.Collaborate with the design system librarian.    For assistance with the design library files in Figma, reach out to the Design System team. ","version":"Next","tagName":"h3"},{"title":"Branching in Figma","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching","content":"","keywords":"","version":"Next"},{"title":"What is branching?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#what-is-branching","content":" Branching is a form of version control commonly used in software development in which you make a copy of something, make changes, and then merge those changes back into the main file/codebase.  ","version":"Next","tagName":"h2"},{"title":"Why are we branching?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#why-are-we-branching","content":" Branching allows you to create a separate space to experiment without impacting your main file. It also allows you to submit changes to a reviewer (ie Design Librarian) before merging your changes to the main file.  ","version":"Next","tagName":"h2"},{"title":"When should we create a branch?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#when-should-we-create-a-branch","content":" For now, we’ll be testing branching in our design library for:  Adding a new component to our libraryUpdating an existing component in our libraryExperimental changes we don’t want to commit to yetUpdating the shipped filesUpdating the App Store images file  In the future, we may consider branching for:  Evaluative research such as user testingLarge scale reorganization or restructuresDevelopment handoff of specific components or feature work  ","version":"Next","tagName":"h2"},{"title":"Who will be able to do what in the design library?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#who-will-be-able-to-do-what-in-the-design-library","content":" We’ll be updating permissions for the design library as follows:  Owner (UX lead) Able to adjust file and project permissionsAlways has editing and publishing rightsAlso has Editor and Viewer permissions Editors (design librarians) Temporarily have editing and publishing rightsAble to review and approve branchesAlso have Viewer permissions Viewers (everyone else) Able to create and edit branchesAble to submit branches for review  ","version":"Next","tagName":"h2"},{"title":"How do I create a branch in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#how-do-i-create-a-branch-in-figma","content":" Open the file you want to branch. Next to the file name, there is a dropdown where you can select Create branch.  Note: When working in a branch, keep track of if/when you move components from one section to another in the library. This may cause conflicts and/or duplicate components when a Reviewer merges your branch into the main file. Be sure to include this information when you submit your branch for review.    Name your branch and select Create.    Now, you have a branch (aka a copy) of the file.  You can tell when you’re working in a branch by the arrow symbol next to the file name.    ","version":"Next","tagName":"h2"},{"title":"How do I view branches in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#how-do-i-view-branches-in-figma","content":" Open the dropdown menu next to the branch name. Then, select See all branches.    If you switch branches, Figma automatically saves your changes in the branch you were previously working on, so you don’t need to worry about losing your work.    ","version":"Next","tagName":"h2"},{"title":"How do I submit a branch for review in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#how-do-i-submit-a-branch-for-review-in-figma","content":" Open the dropdown menu next to the branch name. Then, select Review and merge changes.    In the modal, you’ll see a list of available reviewers. Add the current design librarians as Reviewers. Then, select Request review.    Before sending a branch for review, be sure to include:  Description of what changes were madeJustification for why changes were made (ticket number, Slack message, etc)In the future, we may ask for documentation to be included  ","version":"Next","tagName":"h2"},{"title":"How do I review and merge changes from a branch in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#how-do-i-review-and-merge-changes-from-a-branch-in-figma","content":" Only the Owner and Editors can review and merge changes. When you request a review of your branch, the Reviewers (design librarians) will receive a notification in Figma, Slack, and/or email.    Next, a Reviewer will review your changes.    Reviewers can view before and after versions of your changes as side-by-side or overlay comparisons.    Next, a Reviewer can approve or suggest changes to your branch. Changes can be suggested in the modal or through comments on the individual designs.      If approved, a Reviewer will merge your changes to the main file. As a reviewer, it’s recommended to add a Name and Description to the merge.    After the review, you’ll receive a notification in Figma and/or email that your branch was either approved and merged or has changes suggested. You’ll be able to view the suggestions in the review modal or through comments. Then, you’ll need to repeat this process to submit your branch for another review.    ","version":"Next","tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"Branching in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-branching#resources","content":" Branching in FigmaFAQs about branching in FigmaComplete guide to Figma branching ","version":"Next","tagName":"h2"},{"title":"Creating components in Figma","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/figma-components","content":"","keywords":"","version":"Next"},{"title":"How to set up components​","type":1,"pageTitle":"Creating components in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-components#how-to-set-up-components","content":" Component configuration All components should have “simplify all instances” checked.For components on the doc site: Description: Add a short description of how the component should be used from the documentation site.Link: Add a link to the component’s page on the documentation site. For components that only live in Figma and do not appear on the doc site: Description: Add a short description of how the component should be used.Note: Most Figma-only components are sub-parts or building blocks of another component in Figma. They exist in Figma to allow designers to build and use components, but are not required from an engineering perspective. For one component in Figma, there can sometimes be multiple Figma-only components. Colors All colors should be pulled from the Design Tokens file (not light/dark theme files). It is also recommended that you use any semantic tokens that are available. Typography All text styles should be pulled from the Foundations Library (not light/dark theme files). Autolayout Components must be set up to automatically vertically resize as text changes. Typically, a component’s height will need to be set to “hug” to accomplish this. Components must be set up for responsive widths. Here are some potential ways to achieve this: Variant widths may need to be set to “fill” at 360px.Constraints may need to be set to &quot;left and right&quot; or “scale.”Autolayout properties may need to be customized depending on the component’s design. Properties Properties should be listed in an order that mimics the component’s visual layout from top to bottom and left to right.For main components, show nested properties as appropriate.Variants should be named and set up consistently. Type: Appears below Mode. Used for things like Primary / Secondary or H1 / H2.Layout: Appears below Type. Used for things like Horizontal / Vertical or varying quantities.State: Appears below Layout. Used for things like Focus / Active or Open / Closed or Active / Inactive. Booleans should be named and set up consistently. Used to show/hide icons, buttons, content, etc.Always name them descriptively – i.e. icon (left) / icon (right), button (secondary), header (show/hide). Instance swaps should be named and set up consistently. Preferred values should be set as appropriate.Always name them descriptively – i.e. icon (left) / icon (right). Text properties should be named and set up consistently. Add content fields for every editable content area.Header and title fields should be named descriptively – i.e. header / title or header 1, header 2, etc.Body copy fields should always be named “content”.Fields such as labels, tags, and buttons should be named descriptively – i.e. button text. ","version":"Next","tagName":"h2"},{"title":"Designing the UI","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui","content":"","keywords":"","version":"Next"},{"title":"UI best practices​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#ui-best-practices","content":" Use components already available in the system.Use Balsamiq or another lower fidelity tool to ideateIf you are working on an existing feature, take a look in the app using demo mode to see how it’s currently working. Figma’s shipped screens are our best examples of how it should look, but there may be some inconsistencies.Consider which screen type to use.Lean on the Design Librarian for support if you aren’t sure where or how to work.  ","version":"Next","tagName":"h2"},{"title":"Designing in Figma​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#designing-in-figma","content":" There are a few paths that can be taken when updating existing features or creating new features.  Most common: Using existing component(s) with no updates Ideally, we’re using the building blocks we already have when adding new features to the app. If there is an existing component in the library that can be used and does not need to be changed, team members should add the component from the design system's Component Library and/or the VA Mobile App Design Library and** avoid detaching it in your working file**. Rare: Using existing component(s) with some updates If you believe the existing component needs to be changed, add the component from the VA Mobile App Design Library and detach it for ideation. Once approved, work with the Design Librarian to add it to the library. Caution: Making a new component If a design requires a new component, try using Balsamiq, pen and paper, or your favorite low fidelity tool to ideate on ideas.When you’re ready, prep documentation for the component by following how to document components.Once approved, work with the Design Librarian to add it to the library.  ","version":"Next","tagName":"h2"},{"title":"Best practices in Figma​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#best-practices-in-figma","content":" Follow the rules around where we work in Figma. Generally, most of your work will be done in the working file for the category your feature is in.Every working file should include a Cover page in your file.In your working file, avoid creating local components unless it is a new component that will ultimately be imported into the Flagship or Component Library.Tagging folks in comments can be a good way to communicate and work async. Try to have longer discussions outside of comments.  ","version":"Next","tagName":"h3"},{"title":"Documenting your work​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#documenting-your-work","content":" [TK] - coming up with standards around a11y, design decisions, etc.  ","version":"Next","tagName":"h2"},{"title":"Prepping your work for handoff​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#prepping-your-work-for-handoff","content":" Once designs are ready to be handed off to the engineering team, you can review this checklist before handoff to make sure you’ve covered everything that the FE team will need.  ","version":"Next","tagName":"h2"},{"title":"Variations​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#variations","content":" Determine data organization (e.g. how is a list sorted, does it need filtering, etc)Create designs with data variations (e.g. examples for lots of data, not much data)Document and create designs of error states and unhappy pathsDocument and create designs of empty statesConsider your design with fonts enlarged or varying screen sizesConsider dark mode versions of designsAnnotate your design using the VADS Web Annotation Kit. Note: There is a mobile / iOS version of the annotation kit that is still in progress. If you need an annotation that is mobile-specific, you may be able to find it in this kit. If you need something that is not available in either kit, please contact accessibility to determine the best option.  ","version":"Next","tagName":"h3"},{"title":"IA/Flows​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#iaflows","content":" Document the IA of your feature &amp; where it lives in the app See: VA Mobile app - IA documentation for the app's sitemap and guidance on adding new features Update category screens, if neededDocument intended flowDefined back labels and screen title  ","version":"Next","tagName":"h3"},{"title":"Reviews​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#reviews","content":" Have a peer review your workReceive a sign-off from accessibility on the designs and annotationsReceive a sign-off from the content designer on all copyReview component updates and/or additions with the Design Librarian The Design Librarian will review the updates with the design system team to determine if we will need to coordinate with them on any component updates and/or additions.  ","version":"Next","tagName":"h3"},{"title":"Prepping for handoff​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#prepping-for-handoff","content":" Add Figma links and screenshots of designs (light and dark mode) to appropriate ticketsCreate pages for each FE implementation ticket in the working file as outlined in the Figma file workflowCheck with Product about when work will be handed offPlan to attend a FE handoff meeting to answer any questions  ","version":"Next","tagName":"h3"},{"title":"Handing off and following along​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#handing-off-and-following-along","content":" ","version":"Next","tagName":"h2"},{"title":"Development Handoff​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#development-handoff","content":" Team members should expect to do a design walkthrough with engineering as part of the handoff process. In the design walkthrough, team members should be prepared to answer questions related to flow, error/empty states, and design decisions. See prepping your work for handoff above.After the design walkthrough, team members should make any updates to designs, and ensure that appropriate tickets are updated with the intended flow, Figma links, and screenshots.As designs are being implemented by the engineering team, team members should respond to questions (in Slack and/or Zenhub) in a timely manner and communicate with the front-end team (engineers and product manager) to collaborate on refinements.  ","version":"Next","tagName":"h3"},{"title":"QA​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#qa","content":" QA will be QAing AC in tickets throughout the entire development process for a project/feature.Each epic should have visual, interaction, accessibility, and content QA (aka UX QA) completed before release.The exact plan and timing for UX QA can vary across features - you will collaborate with Product and QA to ensure that everyone has the same understanding of what will work best for any given feature. That being said, here are some general guidelines: For large features/features with brand new components, do a round of visual and interaction QA early in development (~when implementation ticket is in PR review).For all features, do visual, interaction, accessibility, and content QA on the 'last needed bug fixes build' for a feature, at the same time that QA is doing their fix verification and regression testing.Use the FE handoff pages in the working file to compare the work.For using real test users/data, see this Slack thread on logging in as a test user.On your testing device, complete a QA of the feature’s happy path.If you need a testing user to reach a particular screen or edge case, you can message a QA engineer in Slack for help.If bugs/issues are found, log a ticket. Here are examples of a UX bug (4009) and a content bug (4121). If you notice that QA engineering is not finding bugs that should have been caught in earlier tickets, let QA know, so they can improve their work.  ","version":"Next","tagName":"h3"},{"title":"Launching​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#launching","content":" For major features, team members should expect to work with the Design Librarian and the Product team to prepare the app store content.  ","version":"Next","tagName":"h3"},{"title":"Moving/Publishing Work​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#movingpublishing-work","content":" ","version":"Next","tagName":"h2"},{"title":"Library updates​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#library-updates","content":" When the design work is complete and is approved for launch, work with the Design Librarian to implement any needed updates into the Flagship Library.  ","version":"Next","tagName":"h3"},{"title":"Move work to shipped file​","type":1,"pageTitle":"Designing the UI","url":"/va-mobile-app/docs/UX/How-We-Work/designing-ui#move-work-to-shipped-file","content":" When the design is live in the app, work with the Design Librarian to create a shipped file as outlined in the Figma file workflow. ","version":"Next","tagName":"h3"},{"title":"Working with others","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/working-with-others","content":"","keywords":"","version":"Next"},{"title":"How UX and Content collaborate​","type":1,"pageTitle":"Working with others","url":"/va-mobile-app/docs/UX/How-We-Work/working-with-others#how-ux-and-content-collaborate","content":" As a way of scaling the content designer’s work across a team that is working on multiple features and projects simultaneously, the content designer may take on different levels of involvement in projects depending on their scope, size, and complexity.  Content designer leads content work: The content designer is heavily involved in features or projects that are complex, have a large scope, or require extensive collaboration between VA stakeholders, including Sitewide Content team. The content designer should be included in all meetings (stakeholder, engineering, product, etc.). For these types of projects, the content designer is already aware of complexity, scope, and requirements as they will be involved in leadership-level meetings in which upcoming work is discussed by POs, PMs, and delivery leads.Content designer completes discovery work (either in direct collaboration with or separate from UX designer), which could include the following tasks: Completing a content-focused comparative analysis (if needed)Identifying copy to be repurposed from VA.gov or other VA productsReviewing relevant VA content briefs (if available)Reviewing prior research results Content designer and UX designer directly collaborate on low-fidelity wireframes and user flowsIf research is within scope, content designer works with UX designer and researcher to ensure research plans encompass copy-related questions and also to ensure conversation guides are accurately wordedContent designer and UX designer continue to work closely on changes to designs, iterations, and edge cases.Copy is delivered directly in Figma design files. Content designer and UX designer can use copy status tags in Figma to note where copy is in the process (i.e., copy needs approval, copy in progress, copy ready, etc.). Content designer owns final sign-off on copy and will likely pass copy through the Sitewide Content team for approval given the complexity of the project. Content designer supports content work: The content designer takes a supportive role for less or smaller projects. Examples include features in which we can easily pull content from VA.gov or smaller projects. Content designer doesn’t need to be included in all meetings. Content designer meets with UX designer and product manager to understand problem space, possible solutions, and technical constraints. Content designer raises possible risks or issues that might affect the copy.UX designer completes content-specific discovery tasks. This may include completing a comparative analysis, reviewing VA style guide/plain language standards, accessing VA content briefs, etc.UX designer meets with content designer to review first pass at copy. Content designer will provide feedback and/or suggestions.Content designer owns final sign-off on copy and may pass copy through the Sitewide Content team for approval if determined necessary.  ","version":"Next","tagName":"h2"},{"title":"Design Librarian​","type":1,"pageTitle":"Working with others","url":"/va-mobile-app/docs/UX/How-We-Work/working-with-others#design-librarian","content":" Design Librarianis a rotating designer who maintains and improves how we work in Figma and serves as a resource within the mobile team, VA, and Ad Hoc. ","version":"Next","tagName":"h2"},{"title":"Permissions and sharing in Figma","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/figma-permissions","content":"","keywords":"","version":"Next"},{"title":"Sharing files​","type":1,"pageTitle":"Permissions and sharing in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-permissions#sharing-files","content":" All of our Figma files are set so “anyone with the link can view.” If you’re having trouble sharing a file with someone outside of the VA Mobile App team, reach out to the UX Lead or Design Librarian for help.  ","version":"Next","tagName":"h2"},{"title":"Setting permissions​","type":1,"pageTitle":"Permissions and sharing in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-permissions#setting-permissions","content":" ","version":"Next","tagName":"h2"},{"title":"Adding members or guests to the team​","type":1,"pageTitle":"Permissions and sharing in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-permissions#adding-members-or-guests-to-the-team","content":" Admin, Owner, or Editor invites new Member or Guest to VA Mobile App team as an Editor or Viewer. Members must have an Ad Hoc email address and can be set as an Editor or Viewer. Typically, only designers on the VA Mobile App team should be Editors. All other team members should be Viewers.Guests will not have an Ad Hoc email address and will automatically be set as a Viewer. Member or Guest accepts the invitation to join the VA Mobile App team.In Figma, a Member or Guest will need to switch to the Ad Hoc organization in the top left corner, click on All Teams, and open the VA Mobile App team’s space.Member or Guest can now see all of our Figma files. 3. Members will be able to Edit or View files depending on their permissions. 4. Guests will be able to view files and use the library in their private drafts. If a guest needs edit access to a particular file, they can be added as an Editor in that file.  Team permissions by role​  Team member\tRoles\tPaid account\tFigma\tFigJamOrg/IT\tAdmin\t✅\t✅\t✅ UX Lead\tOwner\t✅\t✅\t✅ Design Librarian\tEditor\t✅\t✅\t✅ UX Designer\tEditor\t✅\t✅\t✅ UX Content\tEditor\t✅\t✅\t✅ UX Researcher\tViewer\t🚫\tView only\tView only Product\tViewer\t🚫\tView only\tView only Engineering\tViewer\t🚫\tView only\tView only Guests\tViewer-restricted\t🚫\tView only\tView only  ","version":"Next","tagName":"h3"},{"title":"Setting permissions for projects and files​","type":1,"pageTitle":"Permissions and sharing in Figma","url":"/va-mobile-app/docs/UX/How-We-Work/figma-permissions#setting-permissions-for-projects-and-files","content":" For projects, set the Owner as the UX Lead. Then, set the share settings so “Members of VA Mobile App can edit.”For shipped files, set the Owner as the UX Lead. Then, set the share settings so “Anyone with the link can view.” Members of the VA Mobile App will still be able to edit.For working files, set the Owner as the Design Librarian. Then, set the share settings so “Anyone with the link can view.” Members of the VA Mobile App will still be able to edit.  Project and file permissions by role​  Team member\tProjects\tShipped files\tWorking filesUX Lead\t🔑 Owner\t🔑 Owner\t✅ Can edit Design Librarian\t✅ Can edit\t✅ Can edit\t🔑 Owner UX Designer\t✅ Can edit\t✅ Can edit\t✅ Can edit UX Content\t✅ Can edit\t✅ Can edit\t✅ Can edit UX Researcher\tView only\tView only\tView only Product\tView only\tView only\tView only Engineering\tView only\tView only\tView only Guests\tView only\tView only\tView only  Library permissions by role​  Team member\tLibrary project\tLibrary filesUX Lead\t🔑 Owner\t🔑 Owner Design Librarian\t✅ Can edit\t✅ Can edit UX Designer\t✅ Can edit\t✅ Can edit UX Content\t✅ Can edit\t✅ Can edit UX Researcher\tView only - Able to use library in drafts\tView only - Able to use library in drafts Product\tView only - Able to use library in drafts\tView only - Able to use library in drafts Engineering\tView only - Able to use library in drafts\tView only - Able to use library in drafts Guests\tView only - Able to use library in drafts\tView only - Able to use library in drafts ","version":"Next","tagName":"h3"},{"title":"UX Resources","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/Resources","content":"","keywords":"","version":"Next"},{"title":"Design​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#design","content":" ","version":"Next","tagName":"h2"},{"title":"Figma​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#figma","content":" VA Mobile Team​  Current features, resources, libraries, and design explorations.  Design Library​  Finalized components, text styles, and color styles.  🚢 Shipped files​  Example screens that are in production. Home &amp; ProfileBenefitsHealthPayments  ","version":"Next","tagName":"h3"},{"title":"Balsamiq​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#balsamiq","content":" UX brainstorm &amp; work Brainstorming and low-fi designs. UX ready to handoff Designs for hand-off or review with engineers.  ","version":"Next","tagName":"h3"},{"title":"Information Architecture​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#information-architecture","content":" Sitemap and IA Living artifact documenting the mobile app's structure.  ","version":"Next","tagName":"h3"},{"title":"Research​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#research","content":" UX research on Github Research folders for all VA Mobile app studies.  ","version":"Next","tagName":"h2"},{"title":"VA Design System​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#va-design-system","content":" design.va.gov Content style guide, components, and patterns include guidance, standards, and tools to help teams build a consistent, intuitive, and Veteran-centered experience across VA.gov.  ","version":"Next","tagName":"h2"},{"title":"Design: Archived files​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#design-archived-files","content":" ","version":"Next","tagName":"h2"},{"title":"Sketch files​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#sketch-files","content":" Mobile App Design Library The design library is for finalized components, text styles, and color styles. Mobile App Screens This where we work day to day. This file is for finalized app screen designs as well as sandbox designs. Mobile App Graveyard The graveyard is for work we aren’t going forward with or past iterations VA Mobile App store images This file is where we create the app store images  ","version":"Next","tagName":"h3"},{"title":"InVision​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#invision","content":" MVP prototype (deprecated) This prototype is a good representation of most MVP features (minus Secure Messaging), but is not up to date or being maintained as of Winter 2021.* Sketch library - in Invision (deprecated)This shows all the MVP components laid out as a library visible and inspectable in Invision. Deprecated July 2021. Library style sheets (deprecated)Shows the components from the design library. Deprecated July 2021.  ","version":"Next","tagName":"h3"},{"title":"Figma 1.0 (before 2022)​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#figma-10-before-2022","content":" Figma files that represent MVP feature work, prior to restructuring the IA &amp; Navigation. Deprecated Q1 2022.  ","version":"Next","tagName":"h3"},{"title":"Components​","type":1,"pageTitle":"UX Resources","url":"/va-mobile-app/docs/UX/Resources#components","content":" MVP Mobile App UI Styles on Google Docs (deprecated) ","version":"Next","tagName":"h3"},{"title":"Where we work","type":0,"sectionRef":"#","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work","content":"","keywords":"","version":"Next"},{"title":"Whiteboarding​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#whiteboarding","content":" ","version":"Next","tagName":"h2"},{"title":"Mural​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#mural","content":" Whiteboarding software used to brainstorm, do group work, and synthesize research.  ","version":"Next","tagName":"h3"},{"title":"FigJam​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#figjam","content":" Whiteboarding software that comes with Figma. We use this to do group work, map out user flows, and brainstorm ideas. Might eventually replace Mural.  ","version":"Next","tagName":"h3"},{"title":"Wireframing​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#wireframing","content":" ","version":"Next","tagName":"h2"},{"title":"Pen and paper​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#pen-and-paper","content":" Feel free to go old school when drafting up ideas. Photos of low fidelity drawings can be inserted in Mural, FigJam, Figma, Google docs, Zenhub tickets, etc.  ","version":"Next","tagName":"h3"},{"title":"Balsamiq​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#balsamiq","content":" Where designers are encouraged to work on wireframes and low-fidelity designs. We have two workspaces:  UX Brainstorm and Working for ideation and work in progress.UX Ready to Handoff where we move finished work we want to talk to with the larger team.  ","version":"Next","tagName":"h3"},{"title":"Prototyping​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#prototyping","content":" Both Balsamiq and Figma can be used to develop prototypes, although we typically develop them in Figma.  ","version":"Next","tagName":"h2"},{"title":"Design​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#design","content":" We use Figma for design work. This is where we maintain our UI libraries and work on high-fidelity designs, prototypes, and content. Each project within the VA Mobile team has a specific purpose.  ","version":"Next","tagName":"h2"},{"title":"Flagship team​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#flagship-team","content":" Design Resources 🧰​  Includes Flagship libraries, UI kits, and templates for working/shipped files The Flagship Library is used for flagship-specific components that have not been built into the design system yet. Who uses this: UX teams  Global 🌎​  Includes research, working files, shipped files, prototypes, and product management filesWho uses this: Global team  Health &amp; Benefits 🏥​  Includes research, working files, shipped files, prototypes, and product management filesWho uses this: Health and benefits team  ","version":"Next","tagName":"h3"},{"title":"Platform team​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#platform-team","content":" API &amp; QART 🚀​  Includes App Store Images and device UI kitsWho uses this: API &amp; QART teams  Design System 📐​  Includes Design System libraries, working files, and product management filesWho uses this: Design system team  ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#other","content":" 🏖 Sandbox​  This is your own area where you can explore and iterate. Each team member has their own sandbox file. If you are working on something together, consider working or moving Sandbox work to a working file.Who uses this: UX. You might decide to share files with product and engineering for collaboration and early feasibility discussions, but how you use your Sandbox is up to you.  🪦 Graveyard​  A place to put features we aren’t going forward with.Who uses this: UX  🪦 Version 1.0​  A place to put files from version 1.0 of the app.Who uses this: UX  ","version":"Next","tagName":"h3"},{"title":"File names in Figma​","type":1,"pageTitle":"Where we work","url":"/va-mobile-app/docs/UX/How-We-Work/where-we-work#file-names-in-figma","content":" We use consistent file naming conventions across projects in Figma.  [File Name] - 🔍 Working - VA Mobile Where designers are creating features and handing off to ENG &amp; QAAlso includes explorations for existing features that we aren’t moving forward with, but want to keep a record of.If you are building new components, you can create them here. If adopted, they will eventually move to the Design library.Who uses this: UX, PM, QA, ENG [File Name] - 🚢 Shipped - VA Mobile Example screens from the app that are live in the app, comparable to Demo Mode.Good for using as a reference, but not the source of truth (the app is the source of truth).Who uses this: UX, PM, QA, outside stakeholders/colleagues [File Name] - 🧪 Discovery/Research/Prototype - VA Mobile Discovery, research, and prototype filesFiles should be read-only, so that we maintain quality for the usability study.Who uses this: UX teams [File Name] - 💡 Strategy/Product - VA Mobile Files related to planning and strategyWho uses this: Product teams, UX teams ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}