name: Lookup Slack Username

on:
  workflow_dispatch:
    inputs:
      email_address:
        description: 'Email address to lookup Slack ID for'
        required: true
        type: string
  workflow_call:
    inputs:
      email_address:
        description: 'Email address to lookup Slack ID for'
        required: true
        type: string

jobs:
  get-slack-name:
    runs-on: ubuntu-latest

    steps:
      - name: Determine Target Email
        id: determine_email
        run: |
          TARGET_EMAIL="${{ github.event.inputs.email_address }}"
          # Trim leading/trailing whitespace using bash parameter expansion
          TARGET_EMAIL="${TARGET_EMAIL%${TARGET_EMAIL##*[![:space:]]}}" # Trim trailing
          TARGET_EMAIL="${TARGET_EMAIL#[${TARGET_EMAIL%%[![:space:]]*}]" # Trim leading

          if [[ -n "$TARGET_EMAIL" ]]; then
            echo "Email provided: $TARGET_EMAIL"
          else
            echo "Error: No email_address input was provided. Cannot determine target email."
            exit 1 # Exit with an error if no email is provided
          fi
          
          echo "target_email=$TARGET_EMAIL" >> "$GITHUB_OUTPUT"

      - name: Validate Email Domain
        id: validate_email
        run: |
          TARGET_EMAIL="${{ steps.determine_email.outputs.target_email }}"
          # Case-insensitive check for @VA.gov at the end of the email address
          if [[ "$TARGET_EMAIL" =~ "@VA.gov$" || "$TARGET_EMAIL" =~ "@va.gov$" ]]; then
            echo "Email domain is valid: $TARGET_EMAIL"
          else
            echo "Error: VA email is required. The provided email '$TARGET_EMAIL' does not end with @VA.gov."
            exit 1 # Fail the job
          fi

      - name: Lookup Slack User ID by Email
        id: lookup_slack_id_by_email
        if: steps.determine_email.outputs.target_email != ''
        run: |
          TARGET_EMAIL="${{ steps.determine_email.outputs.target_email }}"
          echo "Attempting to find Slack ID for email: $TARGET_EMAIL"
          SLACK_USER_DATA=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.SLACK_API_TOKEN }}" \
                                  "https://slack.com/api/users.lookupByEmail?email=$TARGET_EMAIL")
          
          SLACK_USER_ID=$(echo "$SLACK_USER_DATA" | jq -r '.user.id')
          
          if [ "$SLACK_USER_ID" == "null" ] || [ -z "$SLACK_USER_ID" ]; then
            echo "Warning: Could not find Slack user for email $TARGET_EMAIL via API."
            echo "slack_user_id=" >> "$GITHUB_OUTPUT" # Set empty if not found
          else
            echo "slack_user_id=$SLACK_USER_ID" >> "$GITHUB_OUTPUT"
            echo "Found Slack ID for $TARGET_EMAIL: $SLACK_USER_ID"
          fi
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

      - name: Use Slack username
        id: output-slack-user-id
        run: |
          FINAL_SLACK_ID="${{ steps.lookup_slack_id_by_email.outputs.slack_user_id }}"

          if [ -n "$FINAL_SLACK_ID" ]; then
            echo "Final Slack User ID is: $FINAL_SLACK_ID"
            echo "slack_username=$FINAL_SLACK_ID" >> "$GITHUB_OUTPUT" 
          else
            echo "Could not determine Slack User ID for the provided email."
            echo "slack_username=unknown" >> "$GITHUB_OUTPUT"
          fi
