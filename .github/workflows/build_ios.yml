# Reusable workflow that sets up environment, installs depdendencies, and
# runs iOS fastlane using provided inputs
name: '[Build] Reusable iOS Workflow'

on:
  workflow_call:
    inputs:
      # Used to determine the environment variables to build the app with
      # Options: test, staging, production
      environment:
        type: string
        default: staging
      # Specifies which fastlane lane to run
      # Options: qa, rc, review, release, on_demand
      lane:
        type: string
        default: qa
      # Release notes that will show next to the version in TestFlight
      # Fastlane will default to "New QA version for {{DATE_TIME}}"
      notes:
        type: string
        default: ''
      # The branch or tag that we want to build from.  Defaults to the branch/tag that triggered
      # the automation, otherwise uses develop
      ref:
        type: string
        default: ''
      # Timestamp of the Slack thread where build related messages should be sent.
      # Gets assigned to the SLACK_THREAD_TS environment variable that Fastlane uses.
      slack_thread_ts:
        type: string
        default: ''
      # TestFlight group to distribute to. Fastlane defaults to "Development Team"
      tf_group:
        type: string
        default: ''
      # Version to use for production release. QA/On-demand builds will increment
      # upon the latest version in TestFlight
      version:
        type: string
        default: qa

defaults:
  run:
    working-directory: VAMobile/ios

env:
  # IAM staging app client secret
  APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
  # IAM production app client secret
  APP_CLIENT_SECRET_PROD: ${{ secrets.APP_CLIENT_SECRET_PROD }}
  # Password to enter demo mode from login screen
  DEMO_PASSWORD: ${{ secrets.DEMO_PASSWORD }}
  # Slack API token used by fastlane
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  build_ios:
    runs-on: macos-latest-xlarge
    env:
      # App Store Connect Issuer ID
      APPSTORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_CONNECT_API_KEY_ISSUER_ID }}
      # App Store Connect Key Id
      APPSTORE_CONNECT_API_KEY_ID: ${{ secrets.APPSTORE_CONNECT_API_KEY_ID }}
      # Path to write secret key to. Also used by fastlane
      APPSTORE_CONNECT_FILEPATH: './AppStoreConnectKey.p8'
      # Xcode project file name
      IOS_PROJ_FILE: 'VAMobile.xcodeproj'
      # Xcode scheme to build
      IOS_SCHEME: 'VAMobileRelease'
      # Fast lane patch password
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
    steps:	
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup ssh-agent with VA Mobile Automation ssh key for fastlane match
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VA_MOBILE_ROBOT_GITHUB_SSH_KEY }}
      - name: Decode base64 encoded App Store Connect API key and GoogleService-Info.plist
        run: |
          echo "Notes: ${{ inputs.notes }}"
          echo "${{ secrets.APPSTORE_CONNECT_BASE64 }}" | base64 --decode > "$APPSTORE_CONNECT_FILEPATH"
          echo "${{ secrets.IOS_GS_PLIST_BASE64 }}" | base64 --decode > GoogleService-Info.plist
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 16.2
      - name: Setup node and restore yarn cache
        uses: actions/setup-node@v3
        with:
          node-version-file: 'VAMobile/.nvmrc'
      - name: Install npm dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: cd VAMobile && yarn install --frozen-lockfile --non-interactive
      - name: Validate environment and lane matrix
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_THREAD_TS: ${{ inputs.slack_thread_ts }}
        run: |
          # Define valid combinations as a matrix
          declare -A valid_combinations
          valid_combinations["production,review"]="✅"     # Release builds
          valid_combinations["production,release"]="✅"    # Go Live builds  
          valid_combinations["production,on_demand"]="✅"  # On-demand production
          valid_combinations["staging,qa"]="✅"            # QA builds
          valid_combinations["staging,rc"]="✅"            # RC builds
          valid_combinations["staging,on_demand"]="✅"     # On-demand staging
          valid_combinations["test,qa"]="✅"               # Test QA builds
          
          COMBO="${{ inputs.environment }},${{ inputs.lane }}"
          
          if [[ -z "${valid_combinations[$COMBO]}" ]]; then
            echo "❌ ERROR: Invalid environment and lane combination"
            echo "Environment: ${{ inputs.environment }}"
            echo "Lane: ${{ inputs.lane }}"
            echo "Valid combinations:"
            for combo in "${!valid_combinations[@]}"; do
              echo "  - $combo"
            done
            #TODO  Switch channel back to va-mobile-app
            # Send Slack notification before failing
            if [[ -n "$SLACK_THREAD_TS" && -n "$SLACK_API_TOKEN" ]]; then
              ERROR_MSG="🚨 VALIDATION FAILED: Invalid environment/lane combination for ${{ github.workflow }}. Environment: ${{ inputs.environment }}, Lane: ${{ inputs.lane }}. See workflow run for valid combinations."
              curl -X POST \
                   -H 'Authorization: Bearer '"$SLACK_API_TOKEN" \
                   -H 'Content-type: application/json' \
                   -d '{"channel": "va-mobile-sandbox", "text": "'"$ERROR_MSG"'", "thread_ts": "'"$SLACK_THREAD_TS"'"}' \
                   https://slack.com/api/chat.postMessage || true
              echo "Slack notification sent"
            else
              echo "Slack notification skipped (missing thread_ts or token)"
            fi
            
            exit 1
          fi
          
          echo "✅ Valid combination: $COMBO"
      - name: Set app environment variables
        run: | 
          echo "Environment is: ${{ inputs.environment }}"
      #TODO Commenting out for testing #11455
          # yarn env:${{ inputs.environment }}

      # - name: Set SLACK_THREAD_TS environment variable
      #   if: inputs.slack_thread_ts
      #   run: echo SLACK_THREAD_TS=${{inputs.slack_thread_ts}} >> $GITHUB_ENV
      # - name: Install pods
      #   run: pod install
      # - name: Bundle app
      #   run: yarn bundle:ios
      # - name: Install gems
      #   run: bundle install
      # - name: Update fastlane
      #   run: bundle update fastlane
      # - name: Run fastlane with retries
      #   uses: nick-fields/retry@v2
      #   with:
      #     timeout_minutes: 20
      #     max_attempts: 3
      #     command: cd VAMobile/ios && bundle exec fastlane ${{ inputs.lane }} version:"${{ inputs.version }}" notes:"${{ inputs.notes }}" tfGroup:"${{ inputs.tf_group }}" --verbose
      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   timeout-minutes: 15
