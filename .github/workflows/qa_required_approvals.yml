#
# Checks if QA approvals are necessary, and if so runs the associated action when a new review is added
#

name: "[Utils] QA required approval"

on:
  push:
  pull_request:
    types: [opened, edited, converted_to_draft, ready_for_review, reopened]
    paths:
      - "VAMobile/src"
      - "VAMobile/e2e"
      - "VAMobile/package.json"
      - "VAMobile/.detoxrc.json"
      - "!VAMobile/src/*.test.tsx"
      - "!.github/**"
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  check_for_qa_approval:
    name: Requires QA approval
    runs-on: ubuntu-latest
    steps:
      - name: Get Mobile reviewers
        run: |
          # Fetch GitHub Mobile Reviewers
          MOBILE_REVIEWERS=$(gh api orgs/department-of-veterans-affairs/teams/flagship-mobile-reviewers/members --jq 'map(.login) | join(",")')
          echo mreview= $MOBILE_REVIEWERS >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        id: mobile_reviewers
      - name: Get QA reviewers
        run: |
          # Fetch GitHub QA Reviewers
          QA_REVIEWERS=$(gh api orgs/department-of-veterans-affairs/teams/flagship-mobile-qa/members --jq 'map(.login) | join(",")')
          echo qreview= $QA_REVIEWERS >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        id: qa_reviewers

      - name: Check QA approval
        shell: bash
        run: |
          if [[ "${{ github.event.pull_request.user.login }}" == "dependabot[bot]" ]]
            then
            echo "PR opened by Dependabot. Skipping QA approval check."
            exit 0
          fi
          # approvals=$(curl --request GET \
          # --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews?per_page=100 \
          # --header 'Authorization: ${{ secrets.GITHUB_TOKEN }}' \
          # --header 'Content-Type: application/json' )
          # jq -c '[map(select(.state == "APPROVED")) | .[] .user.login]')

          echo "${{secrets.GH_ACTIONS_PAT}}" >> token.txt
          gh auth login --with-token < token.txt
          required_approval_count=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/department-of-veterans-affairs/va-mobile-app/branches/develop/protection |
          jq -c '.required_pull_request_reviews.required_approving_review_count')

          echo print outputs
          approvals='["jbergman-oddball", "timwright12"]'
          echo "Approvers: $approvals"  
          echo "required approval count: $required_approval_count"
          echo "Mobile Reviewers: ${{ steps.mobile_reviewers.outputs.mreview }}"
          echo "QA Reviewers: ${{ steps.qa_reviewers.outputs.qreview }}"
          echo end printing outputs

          echo before if
          if [[ $(jq '.[] | length' <<< "$approvals") -ge $required_approval_count ]]
          echo after 1st if
            then
              echo before 2nd if
              if [[ $(jq --arg check_value "${{steps.mobile_reviewers.output.mreview}}" '.[] | select(IN($check_value)) | length' <<< "$approvals") -gt 0 ]]
              echo after second if
              # if  [[ $(echo -n "${{ steps.mobile_reviewers.outputs.mreview }}" | wc -c) -gt 0 ]]
                then
                echo before 3rd if
                echo 'This PR has at least one engineer approval. Now checking for QA approval...'
                if [[ $(jq --arg check_value "${{steps.qa_reviewers.output.qreview}}" '.[] | select(IN($check_value)) | length' <<< "$approvals") -gt 0 ]]
                echo after 3rd if
                # if [[ $(echo -n "${{ steps.qa_reviewers.outputs.qreview }}" | wc -c) -gt 0 ]]
                  then
                  echo before 4th
                  echo 'This PR has QA and engineer approval to merge'
                  echo after 4th
                  exit 0
                else 
                  echo before 5th
                  echo 'This PR requires QA approval to merge'
                  echo Approvers are: ${{ steps.qa_reviewers.outputs.qreview }}
                  echo after 5th
                  exit 1
                fi
              else
                echo before 6th
                echo 'This PR requires Engineer approval before QA review'
                echo Approvers are: ${{ steps.mobile_reviewers.outputs.mreview }}
                echo after 6th
                exit 1
              fi 
          else
            echo before 7th
            echo 'This PR requires two approvals, including one QA approval, before merging.'
            echo after 7th
            exit 1
          fi
