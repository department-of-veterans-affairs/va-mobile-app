#
# Detox screenshot gathering in CI
#

name: "[Utils] Gather iOS and Android screenshots"

on:
  push:
  #   paths:
  #     - "VAMobile/e2e/screenshots/screenshot_data.ts"
  workflow_dispatch:

defaults:
  run:
    working-directory: VAMobile

env:
  # IAM staging app client secret
  APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
  # IAM production app client secret
  APP_CLIENT_SECRET_PROD: ${{ secrets.APP_CLIENT_SECRET_PROD }}
  # Slack API token
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  start_slack_thread:
    name: Start Slack thread
    uses: ./.github/workflows/start_slack_thread.yml
    secrets: inherit
    with:
      channel_name: va-mobile-sandbox
      message: "Generating new App Store images for iOS and Android. Please see :thread: for results. This process may take a while."

  generate-screenshots:
    runs-on: macos-latest-large
    outputs:
      outcome: ${{ steps.run_images.outcome }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # NOTE: is this needed?
      # - name: Decode base64 encoded App Store Connect API key and GoogleService-Info.plist
      #   working-directory: VAMobile/ios
      #   run: |
      #     echo "${{ secrets.APPSTORE_CONNECT_BASE64 }}" | base64 --decode > "$APPSTORE_CONNECT_FILEPATH"
      #     echo "${{ secrets.IOS_GS_PLIST_BASE64 }}" | base64 --decode > GoogleService-Info.plist

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Setup node and restore yarn cache
        uses: actions/setup-node@v3
        with:
          node-version-file: "VAMobile/.nvmrc"
          cache: "yarn"
          cache-dependency-path: "./VAMobile/yarn.lock"

      - name: Install macOS dependencies
        run: |
          brew tap wix/brew
          brew install applesimutils
          brew install imagemagick
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1

      - name: Install npm dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Set app environment variables
        run: yarn env:staging

      - name: Install pods
        working-directory: VAMobile/ios
        run: pod install

      - name: Decode base64 encoded keys
        working-directory: VAMobile/android
        run: |
          mkdir keys
          cd keys
          echo "${{ secrets.GOOGLE_KS }}" | base64 --decode > vamobile
          echo "${{ secrets.GOOGLE_SA_JSON }}" | base64 --decode > service-account.json
          echo "${{ secrets.FIREBASE_DIST_FILE_BASE64 }}" | base64 --decode > firebase-dist.json
          cd ../app
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > google-services.json

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          working-directory: VAMobile/android

      - name: Install Ruby gems
        working-directory: VAMobile/ios
        run: bundle install

      # - name: Bundle iOS app
      #   run: yarn e2e:ios-build

      - name: Bundle Android app
        run: yarn e2e:android-build

      - name: Run Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28 # Match your target API level
          target: google_apis # Or 'default' if you don't need Google APIs
          arch: x86_64 # Or arm64 for Apple Silicon runners
          avd-name: Pixel_6_Pro_API_33 # This name can be used to explicitly define the AVD name
          profile: pixel_6_pro # Or a different device profile if you want
          script: yarn detox test -c android --cleanup ./screenshot.e2e.ts # Your actual test command

      - name: gather-and-make-app-store-images
        id: run_images
        run: |
          ../.github/scripts/app-store-images/generate_images.sh
        # continue-on-error: true

      # NOTE: is this needed?
      # - name: Rerun e2e tests for iOS if failed
      #   if: steps.run_e2e_tests.outcome == 'failure'
      #   id: rerun_e2e_tests
      #   run: |
      #     yarn jest:clear;
      #     if [[ "${{ steps.run_e2e_tests.outputs.NAV_AF_TEST_RUN}}" != "" ]]; then
      #       yarn e2e:ios-test /e2e/tests/Navigation.e2e AvailabilityFramework.e2e ${{matrix.testsuite}}.e2e --updateSnapshot --debug-synchronization 15000
      #     else
      #       yarn e2e:ios-test /e2e/tests/${{matrix.testsuite}} --updateSnapshot --debug-synchronization 15000
      #     fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "ios-android-app-store-images"
          path: VAMobile/artifacts
          retention-days: 1

  output-slack-results:
    needs: [start_slack_thread, generate-screenshots]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Inform Slack of Success
        if: needs.generate-screenshots.outputs.outcome == 'success'
        id: inform_slack_success
        shell: bash
        run: |
          ts=$(curl -X POST -H 'Authorization: Bearer '"$SLACK_API_TOKEN"' ' \
             -H 'Content-type: application/json' \
             --data '{"channel":"'${{needs.start_slack_thread.outputs.channel_id}}'","thread_ts":"'${{needs.start_slack_thread.outputs.thread_ts}}'","text":"App Store images created successfully." \n See <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run> for results."}' \
             https://slack.com/api/chat.postMessage|\
             jq -r '.ts')
           echo "SLACK_THREAD_TS=${ts}" >> $GITHUB_OUTPUT

      - name: Inform Slack of Failure
        if: needs.generate-screenshots.outputs.outcome == 'failure'
        id: inform_slack_failure
        shell: bash
        run: |
          ts=$(curl -X POST -H 'Authorization: Bearer '"$SLACK_API_TOKEN"' ' \
             -H 'Content-type: application/json' \
             --data '{"channel":"'${{needs.start_slack_thread.outputs.channel_id}}'","thread_ts":"'${{needs.start_slack_thread.outputs.thread_ts}}'","text":"App Store image creation failed." \n See <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run> for results."}' \
             https://slack.com/api/chat.postMessage|\
             jq -r '.ts')
           echo "SLACK_THREAD_TS=${ts}" >> $GITHUB_OUTPUT
