name: Weekly Reviewer Assignment

on:
  push:
  schedule:
    # Run every Monday at 8:33 AM EST (1:33 PM UTC)
    - cron: '33 13 * * 1'

env:
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  assign-reviewer:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Get team members and select reviewer
      id: select-reviewer
      run: |
        # Get team members from GitHub API
        RESPONSE=$(curl -s \
          -H "Authorization: token ${{ secrets.GH_ACTIONS_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/orgs/department-of-veterans-affairs/teams/flagship-mobile-pr-reviewers/members")
        
        # Check if response contains an error
        if echo "$RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
          echo "Error from GitHub API: $(echo "$RESPONSE" | jq '.message')"
          exit 1
        fi
        
        # Extract team members and select reviewer
        TEAM_MEMBERS=$(echo "$RESPONSE" | jq -r '.[].login')
        # Exclude jbergman-oddball from the list
        MEMBERS=()
        for member in $TEAM_MEMBERS; do
          if [ "$member" != "jbergman-oddball" ]; then
            MEMBERS+=("$member")
          fi
        done
        MEMBER_COUNT=${#MEMBERS[@]}
        if [ $MEMBER_COUNT -eq 0 ]; then
          echo "No team members found after exclusion"
          exit 1
        fi
        # Use week number to determine who's reviewer
        WEEK_NUM=$(date +%U)
        echo "Current week number: $WEEK_NUM"
        INDEX=$((WEEK_NUM % MEMBER_COUNT))
        REVIEWER_PERSON=${MEMBERS[$INDEX]}
        
        # GitHub username to Slack user ID mapping
        declare -A GITHUB_TO_SLACK=(
           ["dumathane"]="U08HW514Y8Y"
           ["jmarchi"]="U01APSBG86A"
           ["keli13"]="U01ATFT0XBP"
           ["dftony"]="U08HW41SBUG"
           ["matthew-df"]="U08UWE4S3GW"
           ["AdryienH"]="U08N85KC05Q"
        )
        
        # Get Slack user ID for the selected person
        SLACK_USER_ID="${GITHUB_TO_SLACK[$REVIEWER_PERSON]}"
        
        if [ -z "$SLACK_USER_ID" ]; then
          echo "Warning: No Slack mapping found for GitHub user: $REVIEWER_PERSON"
          echo "Using GitHub username in Slack message"
          SLACK_MENTION="@$REVIEWER_PERSON"
        else
          echo "Mapped $REVIEWER_PERSON to Slack user ID: $SLACK_USER_ID"
          SLACK_MENTION="<@$SLACK_USER_ID>"
        fi
        
        echo "reviewer_person=$REVIEWER_PERSON" >> $GITHUB_OUTPUT
        echo "slack_mention=$SLACK_MENTION" >> $GITHUB_OUTPUT
        echo "week_number=$WEEK_NUM" >> $GITHUB_OUTPUT
        echo "Selected reviewer: $REVIEWER_PERSON for week $WEEK_NUM"
    
    - name: Get Slack channel ID
      id: get-channel
      run: |
        CHANNEL_NAME="va-mobile-sandbox"
        
        fetch_page() {
          last_response=$(curl -X GET -H 'Authorization: Bearer '"$SLACK_API_TOKEN"' ' \
          -H 'Content-type: application/x-www-form-urlencoded' \
          https://slack.com/api/conversations.list\?limit=1000\&cursor=$cursor | jq .)
        }
        get_id() {
          id=$(jq '.channels[] | .name as $data | select($data == "'$CHANNEL_NAME'").id' <<< $last_response)
        }
          
        get_cursor() {
          cursor=$(jq '.response_metadata.next_cursor' <<< $last_response)
        }
        
        id=""
        cursor=""
        last_response=""
        fetch_page
        get_id
        
        while [[ -z "$id" ]]
        do
          get_cursor
          fetch_page
          get_id
        done
        echo "channel_id=${id}" >> $GITHUB_OUTPUT
    
    - name: Send Slack notification
      run: |
        SLACK_MENTION="${{ steps.select-reviewer.outputs.slack_mention }}"
        CHANNEL_ID="${{ steps.get-channel.outputs.channel_id }}"
        URL="https://department-of-veterans-affairs.github.io/va-mobile-app/docs/Engineering/BackEnd/Monitoring/ReviewProcedure/"
        
        echo "Sending Slack notification..."
        
          MESSAGE="üìù *Primary channel for Mobile App & Platform Team and any comms related to mobile app features. All Mobile App epics are tracked on the Global Mobile GitHub project.*\nPull Request reviewer rotation this week: $SLACK_MENTION\n<$URL>"
          curl -X POST \
            -H "Authorization: Bearer $SLACK_API_TOKEN" \
            -H "Content-type: application/json" \
            -d "{\"channel\": \"$CHANNEL_ID\", \"text\": \"$MESSAGE\"}" \
            https://slack.com/api/chat.postMessage
    
    - name: Update channel topic
      run: |
        SLACK_MENTION="${{ steps.select-reviewer.outputs.slack_mention }}"
        CHANNEL_ID="${{ steps.get-channel.outputs.channel_id }}"
        
        TOPIC_TEXT="*Primary channel for Mobile App & Platform Team and any comms related to mobile app features. All Mobile App epics are tracked on the Global Mobile GitHub project.*\nPull Request reviewer rotation this week: $SLACK_MENTION\n<$URL>""
        
        echo "Updating channel topic..."
        
        curl -X POST \
          -H "Authorization: Bearer $SLACK_API_TOKEN" \
          -H "Content-type: application/json" \
          -d "{\"channel\": \"$CHANNEL_ID\", \"topic\": \"$TOPIC_TEXT\"}" \
          https://slack.com/api/conversations.setTopic
