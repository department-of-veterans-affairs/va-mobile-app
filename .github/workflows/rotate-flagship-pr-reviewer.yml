name: Weekly Reviewer Assignment

on:
  push:
  schedule:
    # Run every Monday at 8:33 AM EST (1:33 PM UTC)
    - cron: '33 13 * * 1'

env:
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  assign-reviewer:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Get team members and select reviewer
      id: select-reviewer
      run: |
        # Get team members from GitHub API
        RESPONSE=$(curl -s \
          -H "Authorization: token ${{ secrets.GH_ACTIONS_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/orgs/department-of-veterans-affairs/teams/flagship-mobile-pr-reviewers/members")
        
        # Check if response contains an error
        if echo "$RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
          echo "Error from GitHub API: $(echo "$RESPONSE" | jq '.message')"
          exit 1
        fi
        
        # Extract team members and select reviewer
        TEAM_MEMBERS=$(echo "$RESPONSE" | jq -r '.[].login')
        # Exclude jbergman-oddball from the list
        MEMBERS=()
        for member in $TEAM_MEMBERS; do
          if [ "$member" != "jbergman-oddball" ]; then
            MEMBERS+=("$member")
          fi
        done
        MEMBER_COUNT=${#MEMBERS[@]}
        if [ $MEMBER_COUNT -eq 0 ]; then
          echo "No team members found after exclusion"
          exit 1
        fi
        
          # Use week number to determine primary and backup reviewers
          WEEK_NUM=$(date +%U)
          echo "Current week number: $WEEK_NUM"
          INDEX=$((WEEK_NUM % MEMBER_COUNT))
          BACKUP_INDEX=$(((WEEK_NUM + 1) % MEMBER_COUNT))
          REVIEWER_PERSON=${MEMBERS[$INDEX]}
          BACKUP_PERSON=${MEMBERS[$BACKUP_INDEX]}
        
          # GitHub username to Slack user ID mapping
          declare -A GITHUB_TO_SLACK=(
            ["dumathane"]="U08HW514Y8Y"
            ["jmarchi"]="U01APSBG86A"
            ["keli13"]="U01ATFT0XBP"
            ["dftony"]="U08HW41SBUG"
            ["matthew-df"]="U08UWE4S3GW"
            ["AdryienH"]="U08N85KC05Q"
          )
        
          # Get Slack user IDs for the selected persons
          SLACK_USER_ID="${GITHUB_TO_SLACK[$REVIEWER_PERSON]}"
          BACKUP_SLACK_USER_ID="${GITHUB_TO_SLACK[$BACKUP_PERSON]}"
        
          if [ -z "$SLACK_USER_ID" ]; then
            echo "Warning: No Slack mapping found for GitHub user: $REVIEWER_PERSON"
            SLACK_MENTION="@$REVIEWER_PERSON"
          else
            SLACK_MENTION="<@$SLACK_USER_ID>"
          fi
        
          if [ -z "$BACKUP_SLACK_USER_ID" ]; then
            echo "Warning: No Slack mapping found for GitHub user: $BACKUP_PERSON"
            BACKUP_SLACK_MENTION="@$BACKUP_PERSON"
          else
            BACKUP_SLACK_MENTION="<@$BACKUP_SLACK_USER_ID>"
          fi
        
          echo "reviewer_person=$REVIEWER_PERSON" >> $GITHUB_OUTPUT
          echo "slack_mention=$SLACK_MENTION" >> $GITHUB_OUTPUT
          echo "backup_person=$BACKUP_PERSON" >> $GITHUB_OUTPUT
          echo "backup_slack_mention=$BACKUP_SLACK_MENTION" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUM" >> $GITHUB_OUTPUT
          echo "Selected reviewer: $REVIEWER_PERSON and backup: $BACKUP_PERSON for week $WEEK_NUM"
  # Use week number to determine primary and backup reviewers
  WEEK_NUM=$(date +%U)
  echo "Current week number: $WEEK_NUM"
  INDEX=$((WEEK_NUM % MEMBER_COUNT))
  BACKUP_INDEX=$(((WEEK_NUM + 1) % MEMBER_COUNT))
  REVIEWER_PERSON=${MEMBERS[$INDEX]}
  BACKUP_PERSON=${MEMBERS[$BACKUP_INDEX]}
        
        # GitHub username to Slack user ID mapping
        declare -A GITHUB_TO_SLACK=(
           ["dumathane"]="U08HW514Y8Y"
           ["jmarchi"]="U01APSBG86A"
           ["keli13"]="U01ATFT0XBP"
           ["dftony"]="U08HW41SBUG"
           ["matthew-df"]="U08UWE4S3GW"
           ["AdryienH"]="U08N85KC05Q"
        )
        
        # Get Slack user IDs for the selected persons
        SLACK_USER_ID="${GITHUB_TO_SLACK[$REVIEWER_PERSON]}"
        BACKUP_SLACK_USER_ID="${GITHUB_TO_SLACK[$BACKUP_PERSON]}"

        if [ -z "$SLACK_USER_ID" ]; then
          echo "Warning: No Slack mapping found for GitHub user: $REVIEWER_PERSON"
          SLACK_MENTION="@$REVIEWER_PERSON"
        else
          SLACK_MENTION="<@$SLACK_USER_ID>"
        fi

        if [ -z "$BACKUP_SLACK_USER_ID" ]; then
          echo "Warning: No Slack mapping found for GitHub user: $BACKUP_PERSON"
          BACKUP_SLACK_MENTION="@$BACKUP_PERSON"
        else
          BACKUP_SLACK_MENTION="<@$BACKUP_SLACK_USER_ID>"
        fi

        echo "reviewer_person=$REVIEWER_PERSON" >> $GITHUB_OUTPUT
        echo "slack_mention=$SLACK_MENTION" >> $GITHUB_OUTPUT
        echo "backup_person=$BACKUP_PERSON" >> $GITHUB_OUTPUT
        echo "backup_slack_mention=$BACKUP_SLACK_MENTION" >> $GITHUB_OUTPUT
        echo "week_number=$WEEK_NUM" >> $GITHUB_OUTPUT
        echo "Selected reviewer: $REVIEWER_PERSON and backup: $BACKUP_PERSON for week $WEEK_NUM"
    
      id: select-reviewer
      run: |
        # Get team members from GitHub API
        RESPONSE=$(curl -s \
        -H "Authorization: token ${{ secrets.GH_ACTIONS_PAT }}" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/orgs/department-of-veterans-affairs/teams/flagship-mobile-pr-reviewers/members")

        # Check if response contains an error
        if echo "$RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
        echo "Error from GitHub API: $(echo "$RESPONSE" | jq '.message')"
        exit 1
        fi

        # Extract team members and select reviewer
        TEAM_MEMBERS=$(echo "$RESPONSE" | jq -r '.[].login')
        # Exclude jbergman-oddball from the list
        MEMBERS=()
        for member in $TEAM_MEMBERS; do
        if [ "$member" != "jbergman-oddball" ]; then
            MEMBERS+=("$member")
        fi
        done
        MEMBER_COUNT=${#MEMBERS[@]}
        if [ $MEMBER_COUNT -eq 0 ]; then
        echo "No team members found after exclusion"
        exit 1
        fi

        # Use week number to determine primary and backup reviewers
        WEEK_NUM=$(date +%U)
        echo "Current week number: $WEEK_NUM"
        INDEX=$((WEEK_NUM % MEMBER_COUNT))
        BACKUP_INDEX=$(((WEEK_NUM + 1) % MEMBER_COUNT))
        REVIEWER_PERSON=${MEMBERS[$INDEX]}
        BACKUP_PERSON=${MEMBERS[$BACKUP_INDEX]}

        # GitHub username to Slack user ID mapping
        declare -A GITHUB_TO_SLACK=(
        ["dumathane"]="U08HW514Y8Y"
        ["jmarchi"]="U01APSBG86A"
        ["keli13"]="U01ATFT0XBP"
        ["dftony"]="U08HW41SBUG"
        ["matthew-df"]="U08UWE4S3GW"
        ["AdryienH"]="U08N85KC05Q"
        )

        # Get Slack user IDs for the selected persons
        SLACK_USER_ID="${GITHUB_TO_SLACK[$REVIEWER_PERSON]}"
        BACKUP_SLACK_USER_ID="${GITHUB_TO_SLACK[$BACKUP_PERSON]}"

        if [ -z "$SLACK_USER_ID" ]; then
        echo "Warning: No Slack mapping found for GitHub user: $REVIEWER_PERSON"
        SLACK_MENTION="@$REVIEWER_PERSON"
        else
        SLACK_MENTION="<@$SLACK_USER_ID>"
        fi

        if [ -z "$BACKUP_SLACK_USER_ID" ]; then
        echo "Warning: No Slack mapping found for GitHub user: $BACKUP_PERSON"
        BACKUP_SLACK_MENTION="@$BACKUP_PERSON"
        else
        BACKUP_SLACK_MENTION="<@$BACKUP_SLACK_USER_ID>"
        fi

        echo "reviewer_person=$REVIEWER_PERSON" >> $GITHUB_OUTPUT
        echo "slack_mention=$SLACK_MENTION" >> $GITHUB_OUTPUT
        echo "backup_person=$BACKUP_PERSON" >> $GITHUB_OUTPUT
        echo "backup_slack_mention=$BACKUP_SLACK_MENTION" >> $GITHUB_OUTPUT
        echo "week_number=$WEEK_NUM" >> $GITHUB_OUTPUT
        echo "Selected reviewer: $REVIEWER_PERSON and backup: $BACKUP_PERSON for week $WEEK_NUM"
