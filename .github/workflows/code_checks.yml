#
# Lint and Unit Test jobs that runs our lint:ci and test npm scripts
#

name: '[Code Quality] Code Checks'

on:
  pull_request:
  push:
    branches:
      - main
      - develop
      - 'release/v**'

defaults:
  run:
    working-directory: VAMobile

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/install.yml
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Audit dependencies
        run: yarn security-check
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Sets up node with v16 and restores global cache so we don't have to re-download dependencies
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'VAMobile/yarn.lock'
      - name: Install dependencies
        uses: ./.github/install.yml
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules
      - run: yarn lint:ci
  test:
    runs-on: ubuntu-4-cores-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5] # Array of chunks we want to split the tests into
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'VAMobile/yarn.lock'
      - name: Install dependencies
        uses: ./.github/install.yml
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules
      - name: yarn test
        # GHA does not have test splitting built in, so we run this script to split our tests into chunks and run
        # jest with the specified files.  The number at the end is the # of chunks we're splitting the tests into.
        # This should match the numbers of items in the matrix chunk array above
        run: bash ${GITHUB_WORKSPACE}/.github/scripts/setupTestMatrix.sh ${{ matrix.chunk }} 5
