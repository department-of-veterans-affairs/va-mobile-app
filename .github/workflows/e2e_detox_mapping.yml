#
# Detox e2e tests in CI
#

name: "[e2e] Detox Mapping"

on:
  workflow_call:
    outputs:
      test_matrix:
        description: "The matrix output for the e2e tests"
        value: ${{ jobs.find_detox_tests_to_run.outputs.output1 }}
      test_run:
        description: "String saying test has been run"
        value: ${{ jobs.find_detox_tests_to_run.outputs.output2}}

defaults:
  run:
    working-directory: VAMobile

env:
  # IAM staging app client secret
  APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
  # IAM production app client secret
  APP_CLIENT_SECRET_PROD: ${{ secrets.APP_CLIENT_SECRET_PROD }}
  # Android Key Store Key Alias
  ANDROID_KS_KEY_ALIAS: ${{ secrets.ANDROID_KS_KEY_ALIAS }}
  # Android Key Store Key Alias Password
  ANDROID_KS_KEY_PW: ${{ secrets.ANDROID_KS_KEY_PW }}
  # Android Key Store Key Password
  ANDROID_KS_PW: ${{ secrets.ANDROID_KS_PW }}
  # App ID for Android project in Firebase
  FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
  # Filepath for firebase distribution key. Also used by fastlane
  FIREBASE_DIST_KEY_FILEPATH: ${{ secrets.FIREBASE_DIST_KEY_FILEPATH }}
  # Slack API token
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  find_detox_tests_to_run:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.testing_matrix.outputs.TESTING_MATRIX }}
      output2: ${{ steps.testing_matrix.outputs.TEST_RUN}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get SHA
        id: get-sha
        run: echo "sha=$(git rev-parse origin/develop)" >> $GITHUB_OUTPUT
      - name: Get file difference by file name
        id: changed_files_file_name
        uses: tj-actions/changed-files@v41
        with:
          base_sha: "${{ steps.get-sha.outputs.sha }}"
          path: './VAMobile/src'
      - name: Check if directory/file is in detox mapping
        id: detox_mapping_check
        run: |
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in ${{steps.changed_files_file_name.outputs.all_changed_and_modified_files}}; do
            baseFile=$(echo $file | sed 's#.*/##')
            baseFile=$(echo $baseFile | sed 's/ //g')
            fileFound=$(echo $fileNames | jq --arg fileName "$baseFile" '.[$fileName]')
            if [[ "$fileFound" == "null" ]]; then
              fileDirectory=$(dirname $file)
              baseDirectory=$(echo $fileDirectory | sed 's#.*/##')
              baseDirectory=$(echo $baseDirectory | sed 's/ //g')
              directoryFound=$(echo $directoryNames | jq --arg fileName "$baseDirectory" '.[$fileName]')
              if [[ "$directoryFound" == "null" ]]; then
                echo "Missing File: $file or missing directory: $fileDirectory"
                exit 1
              fi
            fi
          done
      - name: Check if directory/file is spelled correctly
        id: detox_mapping_spell_check
        run: |
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for directory in $(echo $directoryNames | jq 'keys | .[]'); do
            echo "$directory"
            test=$(find ${{ github.workspace }}/VAMobile/src -type d -name '$directory')
            echo "directoryFound: $test"
            if [[ ! $(find ${{ github.workspace }}/VAMobile/src -type d -name '$directory') ]]; then
              directoryMisspelled="true"
              echo "Directory misspelled: $directory"
              break
            fi
          done
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in $(echo $fileNames | jq 'keys | .[]'); do
            if [[ ! $(find ${{ github.workspace }}/VAMobile/src -type d -name '$file') ]]; then
              fileMisspelled="true"
              echo "File misspelled: $file"
              break
            fi
          done
          if [[ "$directorymisspeled" == "true" || "$filesMisspelled" == "true" ]]; then
            exit 1
          fi
      - name: Check if e2eNames is spelled correctly
        id: detox_mapping_e2e_names_spell_check
        run: |
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for directory in $(echo $directoryNames | jq 'keys | .[]'); do
            for e2eTest in $($directoryNames | jq --arg directory "$directory" '.[$directory] | .[]'); do
              if [[ ! $(find ${{ github.workspace }}/VAMobile/e2e/tests -type f -name '$e2eTest') ]]; then
                echo "e2eTests in $directory are not spelled correctly"
                exit 1
              fi
            done
          done
      - name: Get testing matrix array
        id: testing_matrix
        run: |
          firstInstanceFile="true"
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in ${{steps.changed_files_file_name.outputs.all_changed_and_modified_files}}; do
            baseFile=$(echo $file | sed 's#.*/##')
            baseFile=$(echo $baseFile | sed 's/ //g')
            fileFound=$(echo $fileNames | jq --arg fileName "$baseFile" '.[$fileName]')
            if [[ "$fileFound" == "null" ]]; then
              fileDirectory=$(dirname $file)
              baseDirectory=$(echo $fileDirectory | sed 's#.*/##')
              baseDirectory=$(echo $baseDirectory | sed 's/ //g')
              directoryFound=$(echo $directoryNames | jq --arg fileName "$baseDirectory" '.[$fileName]')
              if [[ "$firstInstanceFile" == "true" ]]; then
                test_matrix=$directoryFound
                test_matrix=$(echo $test_matrix | jq -c '.')
                firstInstanceFile="false"
              else
                test_matrix=$(echo $test_matrix | jq -c '.')
                test_matrix=$(echo $test_matrix | jq --argjson matrix "$directoryFound" '. += $matrix')
              fi
            else
              if [[ "$firstInstanceFile" == "true" ]]; then
                test_matrix=$fileFound
                test_matrix=$(echo $test_matrix | jq -c '.')
                firstInstanceFile="false"
              else
                test_matrix=$(echo $test_matrix | jq -c '.')
                test_matrix=$(echo $test_matrix | jq --argjson matrix "$fileFound" '. += $matrix')
              fi
            fi
          done
          test_matrix=$(echo $test_matrix | jq -c 'unique')
          echo "TESTING_MATRIX=$test_matrix" >> $GITHUB_OUTPUT
          echo "TEST_RUN=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
