#
# Detox e2e tests in CI
#

name: "[e2e] Detox Mapping"

on:
  workflow_call:
    outputs:
      test_matrix:
        description: "The matrix output for the e2e tests"
        value: ${{ jobs.find_detox_tests_to_run.outputs.output1 }}
      test_run:
        description: "String saying test has been run"
        value: ${{ jobs.find_detox_tests_to_run.outputs.output2}}

defaults:
  run:
    working-directory: VAMobile

env:
  # IAM staging app client secret
  APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
  # IAM production app client secret
  APP_CLIENT_SECRET_PROD: ${{ secrets.APP_CLIENT_SECRET_PROD }}
  # Android Key Store Key Alias
  ANDROID_KS_KEY_ALIAS: ${{ secrets.ANDROID_KS_KEY_ALIAS }}
  # Android Key Store Key Alias Password
  ANDROID_KS_KEY_PW: ${{ secrets.ANDROID_KS_KEY_PW }}
  # Android Key Store Key Password
  ANDROID_KS_PW: ${{ secrets.ANDROID_KS_PW }}
  # App ID for Android project in Firebase
  FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
  # Filepath for firebase distribution key. Also used by fastlane
  FIREBASE_DIST_KEY_FILEPATH: ${{ secrets.FIREBASE_DIST_KEY_FILEPATH }}
  # Slack API token
  SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

jobs:
  find_detox_tests_to_run:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.testing_matrix.outputs.TESTING_MATRIX }}
      output2: ${{ steps.testing_matrix.outputs.TEST_RUN}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get SHA
        id: get-sha
        run: echo "sha=$(git rev-parse origin/develop)" >> $GITHUB_OUTPUT
      - name: Get file difference by file name
        id: changed_files_file_name
        uses: tj-actions/changed-files@v41
        with:
          base_sha: "${{ steps.get-sha.outputs.sha }}"
          path: './VAMobile/src'
      - name: Check if directory/file is in detox mapping
        id: detox_mapping_check
        run: |
          directoryFound="false"
          noFileFound="false"
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in ${{steps.changed_files_file_name.outputs.all_changed_and_modified_files}}; do
            baseFile=$(echo $file | sed 's#.*/##')
            baseFile=$(echo $baseFile | sed 's/ //g')
            fileFound=$(echo $fileNames | jq --arg fileName "$baseFile" '.[$fileName]')
            if [[ "$fileFound" == "null" ]]; then
              fileDirectory=$(dirname $file)
              echo "$fileDirectory"
              for directory in $(echo $directoryNames | jq -r 'keys | .[]'); do
                if [[ $fileDirectory =~ $directory ]]; then
                  directoryFound="true"
                  break
                fi
              done
              if [[ "$directoryFound" == "false" ]]; then
                echo "Missing File: $file or missing directory: $fileDirectory"
                noFileFound="true"
              fi
            fi
          done
          if [[ "$noFileFound" == "true" ]]; then
            exit 1
          fi
      - name: Check if directory/file is spelled correctly
        id: detox_mapping_spell_check
        run: |
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for directory in $(echo $directoryNames | jq -r 'keys | .[]'); do
            if [[ "$(find ${{ github.workspace }}/VAMobile/src -type d -name "$directory")" == "" ]]; then
              directoryMisspelled="true"
              echo "Directory misspelled: $directory"
              exit 1
            fi
          done
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in $(echo $fileNames | jq -r 'keys | .[]'); do
            if [[ "$(find ${{ github.workspace }}/VAMobile/src -type f -name "$file")" == "" ]]; then
              fileMisspelled="true"
              echo "File misspelled: $file"
              exit 1
            fi
          done
      - name: Check if e2eNames is spelled correctly
        id: detox_mapping_e2e_names_spell_check
        run: |
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for directory in $(echo $directoryNames | jq 'keys | .[]'); do          
            for e2eTest in $(echo $directoryNames | jq --argjson directory "$directory" --raw-output '.[$directory] | .[]'); do
              if [[ "$(find ${{ github.workspace }}/VAMobile/e2e/tests -type f -name "${e2eTest}.e2e.ts")" == "" ]]; then
                echo "e2eTests in $directory are not spelled correctly"
                echo "$e2eTests misspelled: $e2eTest"
                exit 1
              fi
            done
          done
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in $(echo $fileNames | jq 'keys | .[]'); do           
            for e2eTest in $(echo $fileNames | jq --argjson file "$file" --raw-output '.[$file] | .[]'); do
              if [[ "$(find ${{ github.workspace }}/VAMobile/e2e/tests -type f -name "${e2eTest}.e2e.ts")" == "" ]]; then
                echo "e2eTests in $file are not spelled correctly"
                echo "$e2eTests misspelled: $e2eTest"
                exit 1
              fi
            done
          done
      - name: Get testing matrix array
        id: testing_matrix
        run: |
          firstInstanceFile="true"
          directoryNames=$(jq -r '.directory' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          fileNames=$(jq -r '.files' ${{ github.workspace }}/VAMobile/e2e/detoxMapping.json)
          for file in ${{steps.changed_files_file_name.outputs.all_changed_and_modified_files}}; do
            baseFile=$(echo $file | sed 's#.*/##')
            baseFile=$(echo $baseFile | sed 's/ //g')
            fileFound=$(echo $fileNames | jq --arg fileName "$baseFile" '.[$fileName]')
            if [[ "$fileFound" == "null" ]]; then
              fileDirectory=$(dirname $file)
              echo "$fileDirectory"
              for directory in $(echo $directoryNames | jq -r 'keys | .[]'); do
                if [[ "$fileDirectory" =~ "$directory" ]]; then
                  echo "$directory"
                  directoryFound=$(echo $directoryNames | jq --arg fileName "$directory" -r '.[$fileName]')
                  echo "$directoryFound"
                  if [[ "$firstInstanceFile" == "true" ]]; then
                    test_matrix=$directoryFound
                    test_matrix=$(echo $test_matrix | jq -c '.')
                    firstInstanceFile="false"
                  else
                    test_matrix=$(echo $test_matrix | jq -c '.')
                    test_matrix=$(echo $test_matrix | jq --argjson matrix "$directoryFound" '. += $matrix')
                  fi
                  break
                fi
              done
            else
              if [[ "$firstInstanceFile" == "true" ]]; then
                test_matrix=$fileFound
                test_matrix=$(echo $test_matrix | jq -c '.')
                firstInstanceFile="false"
              else
                test_matrix=$(echo $test_matrix | jq -c '.')
                test_matrix=$(echo $test_matrix | jq --argjson matrix "$fileFound" '. += $matrix')
              fi
            fi
          done
          test_matrix=$(echo $test_matrix | jq -c 'unique')
          echo "TESTING_MATRIX=$test_matrix" >> $GITHUB_OUTPUT
          echo "TEST_RUN=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
