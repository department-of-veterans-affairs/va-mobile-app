name: Add User from Issues

on:
  issues:
    types: [labeled]

jobs:
  create-invite:
    if: contains(github.event.issue.labels.*.name, 'add-team-member') && !contains(github.event.issue.labels.*.name, 'processed') && !contains(github.event.issue.labels.*.name, 'complete')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_ACTIONS_PAT }}
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            // const DEBUG = core.isDebug();
            // function debug(msg) {
            //   if (DEBUG) {
            //     core.debug(msg);
            //   }
            // }
            // GH team to add user to
            const TEAM_SLUG = "flagship-mobile-team";
            // role to give user in team
            const DEFAULT_ROLE = "member"
            // assignees for any errors
            const EXCEPTION_ASSIGNEES = ['lexicalninja', 'narin']

            function getFirstMatch(regex, str) {
            const match = regex.exec(str);
              if (match) {
                return match[match.length > 1 ? 1 : 0];
              }
                return null;
            }

            function addComment(body) {
              return github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.payload.issue.number,
                body,
              });
            }

            function addLabels(labels) {
              let normalizedLabels = labels;
              if (!Array.isArray(labels)) {
                normalizedLabels = [labels];
              }
              return github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: context.payload.issue.number,
                labels: normalizedLabels,
              });
            }

            function closeIssue() {
              return github.rest.issues.update({
                owner,
                repo,
                issue_number: context.payload.issue.number,
                state: "closed",
              });
            }

            function addAssignees(assignees) {
              return github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: context.payload.issue.number,
                  assignees,
                });
              }

            async function inviteToTeam(username) {
              return github.rest.teams.addOrUpdateMembershipForUserInOrg({
                org: owner,
                team_slug: TEAM_SLUG,
                username: username,
                role: DEFAULT_ROLE
              })
            }

            const extractUsernameRegex = /@[a-zA-Z-_0-9]+/;
            const username = getFirstMatch(extractUsernameRegex, context.payload.issue.body).substring(1);


            if(username) {
              await inviteToTeam(username)
              await addComment("User added successfully")
              await addLabels("complete")
              await closeIssue()
            } else {
              // error
              const errorMessage = "Invalid username. Requires manual addition to team"
              // assign for manual approval and addition, add error label
              await addAssignees(EXCEPTION_ASSIGNEES)
              await addLabels("needs-approval")
              await addComment(errorMessage)
            }
      - if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_ACTIONS_PAT }}
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            function addComment(body) {
              return github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.payload.issue.number,
                body,
              });
            }

            await addComment('Failed to send invitation. See Actions logs for details.)
