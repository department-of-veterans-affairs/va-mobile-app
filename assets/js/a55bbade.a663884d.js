"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3342],{9540:(e,n,t)=>{t.d(n,{d:()=>o});var s=t(72077);const o=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>c});t(96540);var s=t(58069),o=t(65537),i=t(79329),r=t(9540),a=t(84476),m=t(74848);const l=e=>{let{props:n}=e;return n?(0,m.jsx)(m.Fragment,{children:a.Ay.isEmpty(n)?(0,m.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,m.jsxs)("table",{children:[(0,m.jsx)("thead",{children:(0,m.jsxs)("tr",{children:[(0,m.jsx)("th",{children:"Name"}),(0,m.jsx)("th",{children:"Type"}),(0,m.jsx)("th",{children:"Default Value"}),(0,m.jsx)("th",{children:"Required"}),(0,m.jsx)("th",{children:"Description"})]})}),(0,m.jsx)("tbody",{children:Object.keys(n).map((e=>(0,m.jsxs)("tr",{children:[(0,m.jsx)("td",{children:(0,m.jsx)("code",{children:e})}),(0,m.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,m.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,m.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,m.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function c(e){const n=(0,r.d)(e.componentName),{description:t,displayName:a,props:c}=n[0],d=`How to use the ${a} component`,p=`Full code for the ${a} component`;return(0,m.jsxs)(m.Fragment,{children:[t,(0,m.jsx)("br",{}),(0,m.jsx)("br",{}),(0,m.jsxs)(o.A,{children:[(0,m.jsx)(i.A,{value:"props",label:"Properties",children:(0,m.jsx)(l,{props:c})}),(0,m.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,m.jsx)(s.A,{title:d,className:"language-tsx test",children:e.example})}),(0,m.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,m.jsx)(s.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,m.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,m.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},68339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,exampleString:()=>d,frontMatter:()=>m,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"Flagship design library/Components/Selection and Input/Form Elements/FormAttachments","title":"FormAttachments","description":"","source":"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments.mdx","sourceDirName":"Flagship design library/Components/Selection and Input/Form Elements","slug":"/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Checkbox","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Checkbox"},"next":{"title":"FormWrapper","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormWrapper"}}');var o=t(74848),i=t(28453);t(58069);const r="import React, { FC, ReactNode } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ImagePickerResponse } from 'react-native-image-picker/src/types'\n\nimport { Button, ButtonVariants, Icon } from '@department-of-veterans-affairs/mobile-component-library'\nimport _ from 'underscore'\n\nimport { Box, TextView } from 'components/index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { DocumentPickerResponse } from 'screens/BenefitsScreen/BenefitsStackScreens'\nimport { getFileDisplay } from 'utils/common'\nimport { useTheme } from 'utils/hooks'\n\nexport type FormAttachmentsProps = {\n  /** callback called on click of remove link for an attachment */\n  removeOnPress?: (attachment: ImagePickerResponse | DocumentPickerResponse) => void\n  /**button label */\n  buttonLabel?: string\n  /**button onPress */\n  buttonPress?: () => void\n  /** optional TestID */\n  testID?: string\n  /** list of current attachments */\n  attachmentsList?: Array<ImagePickerResponse | DocumentPickerResponse>\n}\n\n/** A common component for form attachments, displays Attachments heading with helper link,\n * already attached items with remove option, and an optional large button. */\nconst FormAttachments: FC<FormAttachmentsProps> = ({\n  removeOnPress,\n  buttonLabel,\n  buttonPress,\n  testID,\n  attachmentsList,\n}) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const { t: tFunction } = useTranslation()\n\n  const renderFileNames = (): ReactNode => {\n    return _.map(attachmentsList || [], (attachment, index) => {\n      const { fileName, fileSize: formattedFileSize, fileSizeA11y } = getFileDisplay(attachment, tFunction, true)\n      const text = [fileName, formattedFileSize].join(' ').trim()\n\n      return (\n        <Box key={index}>\n          <Box\n            flexDirection={'row'}\n            mr={theme.dimensions.gutter}\n            mt={index !== 0 ? theme.dimensions.condensedMarginBetween : 0}\n            mb={theme.dimensions.condensedMarginBetween}>\n            <Box mt={theme.dimensions.attachmentIconTopMargin} mr={theme.dimensions.textIconMargin}>\n              <Icon name=\"AttachFile\" width={20} height={20} fill={theme.colors.icon.spinner} />\n            </Box>\n            <TextView\n              variant=\"MobileBodyBold\"\n              ml={theme.dimensions.textIconMargin}\n              accessibilityLabel={fileSizeA11y ? [fileName, fileSizeA11y].join(' ').trim() : undefined}>\n              {text}\n            </TextView>\n          </Box>\n          <Button\n            onPress={() => removeOnPress?.(attachment)}\n            label={t('remove')}\n            a11yHint={t('remove.a11yHint', { content: fileName })}\n            buttonType={ButtonVariants.Destructive}\n            testID={testID}\n          />\n        </Box>\n      )\n    })\n  }\n\n  const attachmentsDoNotExist = !attachmentsList || attachmentsList.length === 0\n\n  return (\n    <Box>\n      <TextView>{t('attachments')}</TextView>\n      <Box\n        mt={theme.dimensions.standardMarginBetween}\n        mb={attachmentsDoNotExist ? 0 : theme.dimensions.standardMarginBetween}>\n        {renderFileNames()}\n      </Box>\n      {buttonLabel && buttonPress && (\n        <Button\n          label={buttonLabel}\n          onPress={buttonPress}\n          buttonType={ButtonVariants.Secondary}\n          a11yLabel={buttonLabel}\n          testID={testID}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default FormAttachments\n";var a=t(64555);const m={},l=void 0,c={},d="<FormAttachments \nattachmentsList={[ { name: 'file.txt' }, { fileName: 'image.jpeg' } ]} \nremoveOnPress={() => {}} \nlargeButtonProps={{ label: 'add files', onPress: () => {} }} />",p=[];function h(e){return(0,o.jsx)(a.A,{componentName:"FormAttachments",example:d,codeString:r})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h()}}}]);