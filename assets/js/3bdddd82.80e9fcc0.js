"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5050],{2440:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>u,exampleString:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/List/DefaultList","title":"DefaultList","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/List/DefaultList.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization/List","slug":"/Flagship design library/Components/Layout and Organization/List/DefaultList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/DefaultList","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"BaseListItem","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/BaseListItem"},"next":{"title":"List header","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader"}}');var i=n(74848),o=n(28453);n(58069);const l="import React, { FC } from 'react'\n\nimport { List, ListItemObj, ListProps } from 'components'\nimport { TextLines } from 'components/TextLines'\nimport { type TextLine } from 'components/types'\nimport { generateTestIDForTextList } from 'utils/common'\n\n/**\n * Signifies each item in the list of items in {@link DefaultListProps}\n */\nexport type DefaultListItemObj = {\n  /** lines of text to display */\n  textLines: Array<TextLine>\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link DefaultList}\n */\nexport type DefaultListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<DefaultListItemObj>\n  /** if true the text will be selectable */\n  selectable?: boolean\n} & Partial<ListProps>\n\n/**\n *Component to show a list composed of lines of display text built using TextLines\n */\nconst DefaultList: FC<DefaultListProps> = ({\n  items,\n  title,\n  titleA11yLabel,\n  rightTitleTextA11yLabel,\n  rightTitleText,\n  selectable,\n}) => {\n  const listItemObjs: Array<ListItemObj> = items.map((item) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { textLines, testId, detoxTestID, ...listItemObj } = { ...item }\n    const testIdToUse = testId ? testId : generateTestIDForTextList(textLines)\n    const detoxTestIDToUse = detoxTestID ? detoxTestID : testIdToUse\n\n    const content = <TextLines listOfText={textLines} selectable={selectable} />\n\n    return { ...listItemObj, content, testId: testIdToUse, detoxTestID: detoxTestIDToUse }\n  })\n\n  return (\n    <List\n      items={listItemObjs}\n      title={title}\n      titleA11yLabel={titleA11yLabel}\n      rightTitleText={rightTitleText}\n      rightTitleTextA11yLabel={rightTitleTextA11yLabel}\n    />\n  )\n}\n\nexport default DefaultList\n";var a=n(64555);const r={},d=void 0,c={},p="const exampleList: Array<DefaultListItemObj> = \n[\n    {\n        textLines: [{ text: 'line 1 on the first button' }, { text: 'line 2 on the first button' }],\n        a11yHintText: 'press this button to do something',\n        onPress: () => { console.log('button 1 pressed') },\n        testId: 'line-1-on-the-button',\n    },\n    {\n        textLines: [{ text: 'line 1 on the second button' }, { text: 'line 2 on the second button' }],\n        a11yHintText: 'press this button to do something',\n        onPress: () => { console.log('button 2 pressed') },\n        testId: 'line-1-on-the-second-button',\n    },\n]\n\n<DefaultList items={exampleList} />",m=[];function x(t){return(0,i.jsx)(a.A,{componentName:"DefaultList",example:p,codeString:l})}function u(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(x,{...t})}):x()}},9540:(t,e,n)=>{n.d(e,{d:()=>i});var s=n(72077);const i=t=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((e=>e.displayName===t))},64555:(t,e,n)=>{n.d(e,{A:()=>c});n(96540);var s=n(58069),i=n(65537),o=n(79329),l=n(9540),a=n(84476),r=n(74848);const d=({props:t})=>t?(0,r.jsx)(r.Fragment,{children:a.Ay.isEmpty(t)?(0,r.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Name"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Default Value"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:Object.keys(t).map((e=>(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:e})}),(0,r.jsx)("td",{style:{minWidth:200},children:t[e].type?.name}),(0,r.jsx)("td",{children:t[e].defaultValue&&t[e].defaultValue.value.toString()}),(0,r.jsx)("td",{children:t[e].required?"Yes":"No"}),(0,r.jsx)("td",{children:t[e].description})]},e)))})]})}):null;function c(t){const e=(0,l.d)(t.componentName),{description:n,displayName:a,props:c}=e[0],p=`How to use the ${a} component`,m=`Full code for the ${a} component`;return(0,r.jsxs)(r.Fragment,{children:[n,(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"props",label:"Properties",children:(0,r.jsx)(d,{props:c})}),(0,r.jsx)(o.A,{value:"example",label:"Example",children:t.example&&(0,r.jsx)(s.A,{title:p,className:"language-tsx test",children:t.example})}),(0,r.jsx)(o.A,{value:"code",label:"Source Code",children:t.codeString&&(0,r.jsx)(s.A,{title:m,className:"language-tsx",children:t.codeString})}),(0,r.jsx)(o.A,{value:"accessibility",label:"Accessibility",children:(0,r.jsx)("pre",{className:"preText",children:t.accessibilityInfo})})]})]})}}}]);