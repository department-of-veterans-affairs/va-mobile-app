"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9347],{9129:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,exampleString:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"Flagship design library/Components/Selection and Input/Pickers/VAModalPicker","title":"VAModalPicker","description":"","source":"@site/docs/Flagship design library/Components/Selection and Input/Pickers/VAModalPicker.mdx","sourceDirName":"Flagship design library/Components/Selection and Input/Pickers","slug":"/Flagship design library/Components/Selection and Input/Pickers/VAModalPicker","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/VAModalPicker","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"PickerList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/PickerList"},"next":{"title":"Tags","permalink":"/va-mobile-app/docs/Flagship design library/Components/Tags/"}}');var s=t(74848),i=t(28453);t(58069);const l="import React, { FC, ReactElement, useCallback, useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  AccessibilityProps,\n  Modal,\n  Pressable,\n  PressableProps,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  View,\n} from 'react-native'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nimport { Icon, IconProps, useSnackbar } from '@department-of-veterans-affairs/mobile-component-library'\n\nimport { Box, BoxProps, TextView, TextViewProps, VAScrollView } from 'components'\nimport { Events } from 'constants/analytics'\nimport { a11yHintProp, a11yValueProp } from 'utils/accessibility'\nimport { logAnalyticsEvent } from 'utils/analytics'\nimport { getTranslation } from 'utils/formattingUtils'\nimport { useTheme } from 'utils/hooks'\n\nimport {\n  generateA11yValue,\n  generateInputA11yLabel,\n  getInputWrapperProps,\n  removeInputErrorMessage,\n  renderInputError,\n  renderInputLabelSection,\n} from '../formFieldUtils'\nimport PickerList, { PickerListItemObj } from './PickerList'\n\n/**\n * Signifies type of each item in list of {@link pickerOptions}\n */\nexport type PickerItem = {\n  /** label is the text displayed to the user for the item */\n  label: string\n  /** value is the unique value of the item, used to update and keep track of the current label displayed */\n  value: string\n  /** icon to show */\n  icon?: IconProps\n}\n\nexport type VAModalPickerProps = {\n  /** Currently selected item from list of options */\n  selectedValue: string\n  /** Called when the selected value is changed */\n  onSelectionChange: (selectValue: string) => void\n  /** Called when the cancel button is pressed */\n  onClose?: () => void\n  /** list of items of containing types label and value for each option in the picker */\n  pickerOptions: Array<PickerItem>\n  /** i18n key for the text label next the picker field */\n  labelKey?: string\n  /** optional boolean that disables the picker when set to true */\n  disabled?: boolean\n  /** optional boolean that displays required text next to label if set to true */\n  isRequiredField?: boolean\n  /** optional key for string to display underneath label */\n  helperTextKey?: string\n  /** optional callback to update the error message if there is an error */\n  setError?: (error?: string) => void\n  /** if this exists updated picker styles to error state */\n  error?: string\n  /** If true, will include a blank option at the top of the list with a blank value */\n  includeBlankPlaceholder?: boolean\n  /** renders a button instead of form field */\n  displayButton?: boolean\n  /** i18n key text for the name of the button */\n  buttonText?: string\n  /** i18n key  text for the picker confirm button */\n  confirmBtnText?: string\n  /** shows the modal by default */\n  showModalByDefault?: boolean\n  /** Optional TestID for scrollView */\n  testID?: string\n  /** Optional TestID for cancel button */\n  cancelTestID?: string\n  /** Option TestID for apply button */\n  confirmTestID?: string\n}\n\n/**A common component to display a picker for the device with an optional label*/\nconst VAModalPicker: FC<VAModalPickerProps> = ({\n  selectedValue,\n  onSelectionChange,\n  onClose,\n  pickerOptions,\n  labelKey,\n  disabled,\n  isRequiredField,\n  helperTextKey,\n  setError,\n  error,\n  includeBlankPlaceholder,\n  displayButton = false,\n  buttonText,\n  confirmBtnText,\n  testID,\n  showModalByDefault,\n  cancelTestID,\n  confirmTestID,\n}) => {\n  const snackbar = useSnackbar()\n  const [modalVisible, setModalVisible] = useState(false)\n  const theme = useTheme()\n  const { t } = useTranslation()\n  const insets = useSafeAreaInsets()\n\n  const [currentSelectedValue, setCurrentSelectedValue] = useState(selectedValue)\n  const [focusUpdated, setFocusUpdated] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    removeInputErrorMessage(isFocused, error, setError, focusUpdated, setFocusUpdated)\n  }, [isFocused, selectedValue, error, setError, focusUpdated])\n\n  const showModal = useCallback((): void => {\n    logAnalyticsEvent(Events.vama_modalpick_open(labelKey ? getTranslation(labelKey, t) : testID ? testID : ''))\n    if (!disabled) {\n      setIsFocused(true)\n      setModalVisible(true)\n      snackbar.hide()\n    }\n  }, [disabled, labelKey, snackbar, testID, t])\n\n  useEffect(() => {\n    showModalByDefault && showModal()\n  }, [showModalByDefault, showModal])\n\n  const onConfirm = (): void => {\n    logAnalyticsEvent(\n      Events.vama_modalpick_sel(labelKey ? getTranslation(labelKey, t) : testID ? testID : '', currentSelectedValue),\n    )\n    onSelectionChange(currentSelectedValue)\n    setModalVisible(false)\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const onCancel = (): void => {\n    onClose && onClose()\n    // Reset the selected picker item\n    setCurrentSelectedValue(selectedValue)\n\n    setModalVisible(false)\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const handleSelection = (selectionVal: string): void => {\n    setCurrentSelectedValue(selectionVal)\n  }\n\n  const allPickerOptions: Array<PickerItem> = includeBlankPlaceholder\n    ? [\n        {\n          value: '',\n          label: '',\n        },\n      ].concat(pickerOptions)\n    : pickerOptions\n\n  const pickerListItems: Array<PickerListItemObj> = allPickerOptions.map((pickerOption) => {\n    return {\n      text: pickerOption.label,\n      onPress: () => {\n        handleSelection(pickerOption.value)\n      },\n      isSelected: currentSelectedValue === pickerOption.value,\n      icon: pickerOption.icon,\n    }\n  })\n\n  const currentlySelectedOption = allPickerOptions.find((el) => el.value === selectedValue)\n  const inputA11yLabel = generateInputA11yLabel(labelKey, isRequiredField, helperTextKey, error, t, 'picker')\n\n  const parentProps: AccessibilityProps = {\n    ...a11yValueProp({ text: generateA11yValue(currentlySelectedOption?.label, isFocused, t) }),\n    accessibilityRole: 'spinbutton',\n  }\n\n  const renderSelectionBox = (): ReactElement => {\n    const wrapperProps = getInputWrapperProps(theme, error, false)\n\n    const valueBox = (\n      <Box {...wrapperProps}>\n        <Box width=\"100%\" display={'flex'} flexDirection={'row'} justifyContent={'space-between'} alignItems={'center'}>\n          <TextView testID={testID} variant=\"MobileBody\" flex={1}>\n            {currentlySelectedOption?.label}\n          </TextView>\n          <Box ml={16} my={12}>\n            <Icon name=\"UnfoldMore\" fill={theme.colors.icon.pickerIcon} width={30} height={30} />\n          </Box>\n        </Box>\n      </Box>\n    )\n\n    const content = (\n      <Box>\n        {labelKey && renderInputLabelSection(error, isRequiredField, labelKey, t, helperTextKey)}\n        {!!error && renderInputError(error)}\n        {valueBox}\n      </Box>\n    )\n\n    return (\n      <Pressable onPress={showModal} accessible={true} accessibilityLabel={inputA11yLabel} {...parentProps}>\n        {content}\n      </Pressable>\n    )\n  }\n\n  const renderButton = () => {\n    const color = disabled ? 'actionBarDisabled' : 'actionBar'\n\n    const props: TouchableWithoutFeedbackProps = {\n      onPress: showModal,\n      disabled,\n      accessibilityRole: 'button',\n      accessible: true,\n      accessibilityLabel: getTranslation(buttonText || '', t),\n      accessibilityState: disabled ? { disabled: true } : { disabled: false },\n    }\n\n    return (\n      <TouchableWithoutFeedback {...props}>\n        <Box\n          pr={theme.dimensions.headerButtonSpacing}\n          height={theme.dimensions.headerHeight}\n          justifyContent={'center'}\n          pl={theme.dimensions.headerLeftButtonFromTextPadding}>\n          <TextView variant=\"ActionBar\" color={color} allowFontScaling={false} accessible={false}>\n            {getTranslation(buttonText || '', t)}\n          </TextView>\n        </Box>\n      </TouchableWithoutFeedback>\n    )\n  }\n\n  const actionsBarBoxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: 'pickerControls',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    ml: insets.left,\n    mr: insets.right,\n  }\n\n  const topPadding = insets.top + 60\n\n  const cancelLabel = t('cancel')\n  const confirmLabel = getTranslation(confirmBtnText || 'done', t)\n\n  const cancelButtonProps: PressableProps = {\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityLabel: cancelLabel,\n    ...a11yHintProp(t('cancel.picker.a11yHint')),\n  }\n\n  const confirmButtonProps: PressableProps = {\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityLabel: confirmLabel,\n    ...a11yHintProp(t('done.picker.a11yHint')),\n  }\n\n  const commonButtonProps: TextViewProps = {\n    variant: 'MobileBody',\n    color: 'link',\n    allowFontScaling: false,\n    py: 3, // bump up the padding to make touch target a bit bigger #2740\n  }\n\n  return (\n    <View>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        statusBarTranslucent={true}\n        visible={modalVisible}\n        supportedOrientations={['portrait', 'landscape']}\n        onRequestClose={() => {\n          setModalVisible(!modalVisible)\n        }}>\n        <Box flex={1} flexDirection=\"column\" accessibilityViewIsModal={true}>\n          <Box flexGrow={1} backgroundColor=\"modalOverlay\" opacity={0.8} pt={topPadding} />\n          <Box backgroundColor=\"list\" pb={insets.bottom} flexShrink={1}>\n            <Box {...actionsBarBoxProps}>\n              <Pressable onPress={onCancel} {...cancelButtonProps} testID={cancelTestID}>\n                <TextView {...commonButtonProps}>{cancelLabel}</TextView>\n              </Pressable>\n              <Box flex={4}>\n                <TextView variant=\"MobileBodyBold\" textAlign={'center'} allowFontScaling={false}>\n                  {getTranslation(labelKey || '', t)}\n                </TextView>\n              </Box>\n              <Pressable onPress={onConfirm} {...confirmButtonProps} testID={confirmTestID}>\n                <TextView {...commonButtonProps}>{confirmLabel}</TextView>\n              </Pressable>\n            </Box>\n            <VAScrollView bounces={false}>\n              <PickerList items={pickerListItems} />\n            </VAScrollView>\n          </Box>\n        </Box>\n      </Modal>\n      {!showModalByDefault && (displayButton ? renderButton() : renderSelectionBox())}\n    </View>\n  )\n}\n\nexport default VAModalPicker\n";var r=t(64555);const a={},c=void 0,d={},p="<VAModalPicker \nselectedValue={selected} \nonSelectionChange={(textValue) => { setSelected(textValue) }} \npickerOptions={ [ { label: 'item', value: 'itemValue' } ] }/>",u=[];function b(e){return(0,s.jsx)(r.A,{componentName:"VAModalPicker",example:p,codeString:l})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b()}},9540:(e,n,t)=>{t.d(n,{d:()=>s});var o=t(72077);const s=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var o=t(58069),s=t(65537),i=t(79329),l=t(9540),r=t(84476),a=t(74848);const c=e=>{let{props:n}=e;return n?(0,a.jsx)(a.Fragment,{children:r.Ay.isEmpty(n)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(n).map((e=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:e})}),(0,a.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,a.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,a.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,a.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function d(e){const n=(0,l.d)(e.componentName),{description:t,displayName:r,props:d}=n[0],p=`How to use the ${r} component`,u=`Full code for the ${r} component`;return(0,a.jsxs)(a.Fragment,{children:[t,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(s.A,{children:[(0,a.jsx)(i.A,{value:"props",label:"Properties",children:(0,a.jsx)(c,{props:d})}),(0,a.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,a.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,a.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,a.jsx)(o.A,{title:u,className:"language-tsx",children:e.codeString})}),(0,a.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);