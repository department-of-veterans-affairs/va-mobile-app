"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9662],{9540:(e,n,t)=>{t.d(n,{d:()=>r});var o=t(72077);const r=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var o=t(58069),r=t(65537),s=t(79329),l=t(9540),i=t(84476),c=t(74848);const a=e=>{let{props:n}=e;return n?(0,c.jsx)(c.Fragment,{children:i.Ay.isEmpty(n)?(0,c.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,c.jsxs)("table",{children:[(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Name"}),(0,c.jsx)("th",{children:"Type"}),(0,c.jsx)("th",{children:"Default Value"}),(0,c.jsx)("th",{children:"Required"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:Object.keys(n).map((e=>(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("code",{children:e})}),(0,c.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,c.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,c.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,c.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function d(e){const n=(0,l.d)(e.componentName),{description:t,displayName:i,props:d}=n[0],p=`How to use the ${i} component`,h=`Full code for the ${i} component`;return(0,c.jsxs)(c.Fragment,{children:[t,(0,c.jsx)("br",{}),(0,c.jsx)("br",{}),(0,c.jsxs)(r.A,{children:[(0,c.jsx)(s.A,{value:"props",label:"Properties",children:(0,c.jsx)(a,{props:d})}),(0,c.jsx)(s.A,{value:"example",label:"Example",children:e.example&&(0,c.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,c.jsx)(s.A,{value:"code",label:"Source Code",children:e.codeString&&(0,c.jsx)(o.A,{title:h,className:"language-tsx",children:e.codeString})}),(0,c.jsx)(s.A,{value:"accessibility",label:"Accessibility",children:(0,c.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},94367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>x,exampleString:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"Flagship design library/Components/Selection and Input/Form Elements/VASelector","title":"VASelector","description":"","source":"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector.mdx","sourceDirName":"Flagship design library/Components/Selection and Input/Form Elements","slug":"/Flagship design library/Components/Selection and Input/Form Elements/VASelector","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Switch","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Switch"},"next":{"title":"Text input","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput"}}');var r=t(74848),s=t(28453);t(58069);const l="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { TouchableWithoutFeedback } from 'react-native'\n\nimport { Icon, IconProps } from '@department-of-veterans-affairs/mobile-component-library'\nimport { colors } from '@department-of-veterans-affairs/mobile-tokens'\n\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { a11yHintProp } from 'utils/accessibility'\nimport { getTranslation } from 'utils/formattingUtils'\nimport { useTheme } from 'utils/hooks'\n\nimport { Box, BoxProps, TextView } from '../../index'\nimport { renderInputError } from './formFieldUtils'\n\nexport enum SelectorType {\n  Checkbox = 'Checkbox',\n  Radio = 'Radio',\n}\n\n/**\n * Signifies props for the component {@link VASelector}\n */\nexport type VASelectorProps = {\n  /** render checkbox or radio button */\n  selectorType?: SelectorType\n  /** when true displays the filled checkbox/radio , when false displays the empty checkbox/radio */\n  selected: boolean\n  /** sets the value of selected on click of the checkbox/radio */\n  onSelectionChange: (selected: boolean) => void\n  /** translated labelKey displayed next to the checkbox/radio */\n  labelKey: string\n  /** optional arguments to pass in with the labelKey during translation */\n  labelArgs?: { [key: string]: string }\n  /** optional boolean that disables the VASelector/radio when set to true */\n  disabled?: boolean\n  /** optional accessibilityLabel */\n  a11yLabel?: string\n  /** optional accessibilityHint */\n  a11yHint?: string\n  /** optional error to display for the checkbox */\n  error?: string\n  /** optional callback to set the error message */\n  setError?: (value?: string) => void\n  /** optional boolean that marks the component as required */\n  isRequiredField?: boolean\n  /** Optional TestID */\n  testID?: string\n}\n\n/**A common component to display a checkbox with text*/\nconst VASelector: FC<VASelectorProps> = ({\n  selectorType = SelectorType.Checkbox,\n  selected,\n  onSelectionChange,\n  labelKey,\n  labelArgs,\n  disabled,\n  a11yLabel,\n  a11yHint,\n  error,\n  testID,\n  setError,\n}) => {\n  const theme = useTheme()\n  const { t } = useTranslation()\n  const iconWidth = 22\n\n  const selectorOnPress = (): void => {\n    if (!disabled) {\n      setError && setError('')\n      onSelectionChange(!selected)\n    }\n  }\n\n  const getIconsProps = (\n    name: string,\n    stroke?: keyof VAIconColors | string,\n    fill?: keyof VAIconColors | keyof VATextColors | string,\n  ): IconProps => {\n    return {\n      name,\n      stroke,\n      width: iconWidth,\n      height: 22,\n      fill,\n    } as IconProps\n  }\n\n  const errorBoxProps: BoxProps = {\n    ml: 10 + iconWidth,\n  }\n\n  const selectorBoxProps: BoxProps = {\n    ml: 10,\n    flex: 1,\n  }\n\n  const getCheckBoxIcon = (): React.ReactNode => {\n    const buttonSelectedFill =\n      theme.mode === 'dark' ? colors.vadsColorFormsForegroundActiveOnDark : colors.vadsColorFormsForegroundActiveOnLight\n    const buttonUnselectedFill =\n      theme.mode === 'dark' ? colors.vadsColorFormsBorderDefaultOnDark : colors.vadsColorFormsBorderDefaultOnLight\n\n    if (disabled && selectorType === SelectorType.Radio) {\n      return (\n        <Icon\n          {...getIconsProps(\n            'RadioButtonUnchecked',\n            theme.colors.icon.checkboxDisabled,\n            theme.colors.icon.radioDisabled,\n          )}\n          testID=\"RadioEmpty\"\n        />\n      )\n    }\n\n    if (!!error && selectorType === SelectorType.Checkbox) {\n      return (\n        <Icon\n          {...getIconsProps('Error', theme.colors.icon.error, theme.colors.icon.checkboxDisabledContrast)}\n          testID=\"Error\"\n        />\n      )\n    }\n\n    const filledName = selectorType === SelectorType.Checkbox ? 'CheckBox' : 'RadioButtonChecked'\n    const emptyName = selectorType === SelectorType.Checkbox ? 'CheckBoxOutlineBlank' : 'RadioButtonUnchecked'\n\n    const name = selected ? filledName : emptyName\n    const fill = selected ? buttonSelectedFill : buttonUnselectedFill\n    const stroke = selected ? undefined : theme.colors.icon.checkboxDisabled\n\n    return <Icon {...getIconsProps(name, stroke, fill)} testID={name} />\n  }\n\n  const hintProp = a11yHint ? a11yHintProp(a11yHint) : {}\n  const a11yRole = selectorType === SelectorType.Checkbox ? 'checkbox' : 'radio'\n  const a11yState = selectorType === SelectorType.Checkbox ? { checked: selected } : { selected }\n  const labelToUse = `${a11yLabel || getTranslation(labelKey, t, labelArgs)} ${error ? t('error', { error }) : ''}`\n\n  return (\n    // eslint-disable-next-line react-native-a11y/has-accessibility-hint\n    <TouchableWithoutFeedback\n      testID={testID}\n      onPress={selectorOnPress}\n      accessibilityState={a11yState}\n      accessibilityRole={a11yRole}\n      accessibilityLabel={labelToUse}\n      {...hintProp}>\n      <Box>\n        {!!error && <Box {...errorBoxProps}>{renderInputError(error)}</Box>}\n        <Box flexDirection=\"row\">\n          <Box testID=\"checkbox-with-label\" mt={5}>\n            {getCheckBoxIcon()}\n          </Box>\n          <Box {...selectorBoxProps}>\n            <TextView variant=\"VASelector\" color={disabled ? 'checkboxDisabled' : 'bodyText'}>\n              {getTranslation(labelKey, t, labelArgs)}\n            </TextView>\n          </Box>\n        </Box>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default VASelector\n";var i=t(64555);const c={},a=void 0,d={},p="<VASelector text={'Text to display'} selected={selected} setSelected={setSelected}/>",h=[];function m(e){return(0,r.jsx)(i.A,{componentName:"VASelector",example:p,codeString:l})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m()}}}]);