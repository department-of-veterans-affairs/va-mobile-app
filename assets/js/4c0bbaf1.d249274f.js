"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3058],{9540:(e,t,n)=>{n.d(t,{d:()=>s});var o=n(72077);const s=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},32911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,exampleString:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/List/BaseListItem","title":"BaseListItem","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/List/BaseListItem.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization/List","slug":"/Flagship design library/Components/Layout and Organization/List/BaseListItem","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/BaseListItem","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"List","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/"},"next":{"title":"DefaultList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/DefaultList"}}');var s=n(74848),r=n(28453);n(58069);const i="import React, { FC, ReactElement, useState } from 'react'\nimport { AccessibilityProps, AccessibilityRole, AccessibilityState, Pressable, PressableProps } from 'react-native'\nimport { HapticFeedbackTypes } from 'react-native-haptic-feedback'\n\nimport { Icon, IconProps } from '@department-of-veterans-affairs/mobile-component-library'\nimport { colors } from '@department-of-veterans-affairs/mobile-tokens'\n\nimport Box, { BackgroundVariant, BoxProps } from 'components/Box'\nimport SwitchComponent, { SwitchProps } from 'components/Switch'\nimport FileRequestNumberIndicator from 'screens/BenefitsScreen/ClaimsScreen/ClaimDetailsScreen/ClaimStatus/ClaimFileUpload/FileRequestNumberIndicator'\nimport { a11yHintProp, a11yValueProp } from 'utils/accessibility'\nimport { triggerHaptic } from 'utils/haptics'\nimport { useTheme } from 'utils/hooks'\n\n/** Decorator type for the button, defaults to Navigation (right arrow) */\nexport enum ButtonDecoratorType {\n  /** Switch button decorator */\n  Switch = 'Switch',\n  /** Navigation arrow decorator */\n  Navigation = 'Navigation',\n  /** No decorator */\n  None = 'None',\n  /** Picker selected item decorator **/\n  SelectedItem = 'SelectedItem',\n  /** Trash can decorator */\n  Delete = 'Delete',\n  /** Empty radio button decorator */\n  RadioEmpty = 'RadioButtonUnchecked',\n  /** Filled radio button decorator */\n  RadioFilled = 'RadioButtonChecked',\n  /** Disabled radio button decorator */\n  RadioDisabled = 'RadioDisabled',\n  /** Empty check box button decorator */\n  CheckBoxEmpty = 'CheckBoxOutlineBlank',\n  /** Filled check box button decorator */\n  CheckBoxFilled = 'CheckBox',\n}\n\nexport type ListItemDecoratorProps = Partial<IconProps> | Partial<SwitchProps>\n\n/**\n * Props for BaseListItem\n */\nexport type BaseListItemProps = {\n  /** test id string also used for the accessibility label */\n  testId?: string\n\n  /** The a11y hint text */\n  a11yHint: string\n\n  /** optional a11y text value */\n  a11yValue?: string\n\n  /** optional accessibility role. By default it will be button */\n  a11yRole?: AccessibilityRole\n\n  /** optional accessibility state */\n  a11yState?: AccessibilityState\n\n  /** onPress callback */\n  onPress?: () => void\n\n  /** Decorator Type to use */\n  decorator?: ButtonDecoratorType\n\n  /** Optional props to be passed to the decorator */\n  decoratorProps?: ListItemDecoratorProps\n\n  /** Optional child elements to use instead of listOfText if you need to do special styling */\n  children?: React.ReactNode\n\n  /** Optional background color for an individual item */\n  backgroundColor?: BackgroundVariant\n\n  /** Optional active background color for an individual item */\n  activeBackgroundColor?: BackgroundVariant\n\n  /** Optional file request number for the number indicator */\n  claimsRequestNumber?: number\n\n  /** Optional file request if file was loaded to show check mark */\n  fileUploaded?: boolean\n\n  /** Optional min height */\n  minHeight?: number\n\n  /** test id string for detox */\n  detoxTestID?: string\n}\n\nexport const ButtonDecorator: FC<{\n  decorator?: ButtonDecoratorType\n  decoratorProps?: ListItemDecoratorProps\n  onPress?: () => void\n}> = ({ decorator, decoratorProps, onPress }) => {\n  const theme = useTheme()\n  const radioBtnWidth = 22\n  const radioBtnHeight = 22\n\n  const buttonSelectedFill =\n    theme.mode === 'dark' ? colors.vadsColorFormsForegroundActiveOnDark : colors.vadsColorFormsForegroundActiveOnLight\n  const buttonUnselectedFill =\n    theme.mode === 'dark' ? colors.vadsColorFormsBorderDefaultOnDark : colors.vadsColorFormsBorderDefaultOnLight\n\n  const switchOnPress = onPress ? onPress : () => {}\n\n  switch (decorator) {\n    case ButtonDecoratorType.Switch:\n      return <SwitchComponent onPress={switchOnPress} {...decoratorProps} />\n    case ButtonDecoratorType.SelectedItem:\n      return <Icon name={'Check'} height={18} width={18} fill={theme.colors.icon.pickerIcon} />\n    case ButtonDecoratorType.Delete:\n      return <Icon name={'Delete'} height={16} width={14} fill={theme.colors.icon.error} />\n    case ButtonDecoratorType.RadioFilled:\n      return (\n        <Icon name={'RadioButtonChecked'} height={radioBtnHeight} width={radioBtnWidth} fill={buttonSelectedFill} />\n      )\n    case ButtonDecoratorType.RadioEmpty:\n      return (\n        <Icon name={'RadioButtonUnchecked'} height={radioBtnHeight} width={radioBtnWidth} fill={buttonUnselectedFill} />\n      )\n    case ButtonDecoratorType.RadioDisabled:\n      return (\n        <Icon\n          name={'RadioButtonUnchecked'}\n          height={radioBtnHeight}\n          width={radioBtnWidth}\n          fill={theme.colors.icon.radioDisabled}\n        />\n      )\n    case ButtonDecoratorType.CheckBoxFilled:\n      return (\n        <Icon\n          name={'CheckBox'}\n          height={radioBtnHeight}\n          width={radioBtnWidth}\n          fill={theme.colors.icon.checkboxEnabledPrimary}\n        />\n      )\n    case ButtonDecoratorType.CheckBoxEmpty:\n      return (\n        <Icon\n          name={'CheckBoxOutlineBlank'}\n          height={radioBtnHeight}\n          width={radioBtnWidth}\n          fill={theme.colors.icon.checkboxDisabledContrast}\n        />\n      )\n\n    default:\n      return (\n        <Icon\n          name={'ChevronRight'}\n          fill={theme.colors.icon.chevronListItem}\n          width={theme.dimensions.chevronListItemWidth}\n          height={theme.dimensions.chevronListItemHeight}\n        />\n      )\n  }\n}\n\n/**\n * Reusable component for menu items that take up the full width of the screen that is touchable.\n * @returns BaseListItem component\n */\nconst BaseListItem: FC<BaseListItemProps> = (props) => {\n  const {\n    onPress,\n    a11yHint,\n    a11yRole,\n    a11yState,\n    decorator,\n    decoratorProps,\n    testId,\n    a11yValue,\n    children,\n    backgroundColor,\n    activeBackgroundColor,\n    claimsRequestNumber,\n    fileUploaded,\n    minHeight,\n    detoxTestID,\n  } = props\n  const theme = useTheme()\n\n  const [isPressed, setIsPressed] = useState(false)\n\n  const _onPressIn = (): void => {\n    setIsPressed(true)\n  }\n\n  const _onPressOut = (): void => {\n    setIsPressed(false)\n  }\n  const isSwitchRow = decorator === ButtonDecoratorType.Switch\n  const showDecorator = onPress && decorator !== ButtonDecoratorType.None\n\n  const background = backgroundColor ? backgroundColor : 'list'\n  const activeBackground = activeBackgroundColor ? activeBackgroundColor : 'listActive'\n\n  const onOuterPress = (): void => {\n    // nooop for switch types, need to press on the switch specifically\n    if (onPress) {\n      if (isSwitchRow) {\n        triggerHaptic(HapticFeedbackTypes.impactHeavy)\n      }\n      onPress()\n    }\n  }\n\n  const onDecoratorPress = (): void => {\n    // if we're a switch type, need to handle the press on the decorator specifically\n    if (isSwitchRow && onPress) {\n      triggerHaptic(HapticFeedbackTypes.impactHeavy)\n      onPress()\n    }\n  }\n\n  // Default role for list item is menuitem\n  const accessibilityRole = a11yRole || (isSwitchRow ? 'switch' : 'link')\n\n  const pressableProps: PressableProps = {\n    onPress: onOuterPress,\n    onPressIn: _onPressIn,\n    onPressOut: _onPressOut,\n    accessible: true,\n    disabled: decorator === ButtonDecoratorType.RadioDisabled,\n  }\n\n  const boxProps: BoxProps = {\n    width: '100%',\n    minHeight: minHeight || theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    pl: theme.dimensions.gutter,\n    pr: decorator === undefined ? theme.dimensions.buttonPadding : theme.dimensions.gutter,\n    borderBottomWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: isPressed ? activeBackground : background,\n  }\n\n  const a11yProps: AccessibilityProps = {\n    ...a11yHintProp(a11yHint),\n    ...a11yValueProp(a11yValue ? { text: a11yValue } : {}),\n    accessibilityState: a11yState ? a11yState : {},\n    accessibilityLabel: testId,\n    accessibilityRole: onPress ? accessibilityRole : 'text',\n  }\n\n  if (isSwitchRow && decoratorProps) {\n    a11yProps.accessibilityState = {\n      ...a11yProps.accessibilityState,\n      checked: (decoratorProps as Partial<SwitchProps>).on,\n    }\n  }\n\n  const generateItem = (accessibilityProps?: AccessibilityProps): ReactElement => {\n    // accessible property set to true when there is no onPress because it is already wrapped in the accessible Pressable\n    return (\n      <Box {...boxProps} {...accessibilityProps} testID={accessibilityProps?.accessibilityLabel} accessible={!onPress}>\n        {claimsRequestNumber !== undefined ? (\n          <FileRequestNumberIndicator requestNumber={claimsRequestNumber} fileUploaded={fileUploaded} />\n        ) : (\n          <></>\n        )}\n        {children}\n        {showDecorator && (\n          <Box\n            ml={decorator === undefined ? 0 : theme.dimensions.listItemDecoratorMarginLeft}\n            importantForAccessibility={'no-hide-descendants'}>\n            <ButtonDecorator decorator={decorator} onPress={onDecoratorPress} decoratorProps={decoratorProps} />\n          </Box>\n        )}\n      </Box>\n    )\n  }\n\n  // onPress exist, wrap in Pressable and apply a11yProps\n  if (onPress) {\n    return (\n      <Pressable {...a11yProps} {...pressableProps} testID={detoxTestID}>\n        {generateItem()}\n      </Pressable>\n    )\n  }\n\n  // apply a11yProps if onPress does not exist\n  return generateItem(a11yProps)\n}\n\nexport default BaseListItem\n";var a=n(64555);const c={},l=void 0,d={},p="import { BaseListItem, BaseListItemProps } from 'components'\n\nconst listItemProps: BaseListItemProps = {\n    a11yHint: 'My Hint'\n    onPress: () => { console.log('item pressed') }\n  }\n\n<BaseListItem {...listItemProps}>\n    <TextLines listOfText={[{ text: 'my text', isBold: true}]} />\n</BaseListItem>",m=[];function h(e){return(0,s.jsx)(a.A,{componentName:"BaseListItem",example:p,codeString:i})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h()}},64555:(e,t,n)=>{n.d(t,{A:()=>d});n(96540);var o=n(58069),s=n(65537),r=n(79329),i=n(9540),a=n(84476),c=n(74848);const l=({props:e})=>e?(0,c.jsx)(c.Fragment,{children:a.Ay.isEmpty(e)?(0,c.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,c.jsxs)("table",{children:[(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Name"}),(0,c.jsx)("th",{children:"Type"}),(0,c.jsx)("th",{children:"Default Value"}),(0,c.jsx)("th",{children:"Required"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:Object.keys(e).map((t=>(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("code",{children:t})}),(0,c.jsx)("td",{style:{minWidth:200},children:e[t].type?.name}),(0,c.jsx)("td",{children:e[t].defaultValue&&e[t].defaultValue.value.toString()}),(0,c.jsx)("td",{children:e[t].required?"Yes":"No"}),(0,c.jsx)("td",{children:e[t].description})]},t)))})]})}):null;function d(e){const t=(0,i.d)(e.componentName),{description:n,displayName:a,props:d}=t[0],p=`How to use the ${a} component`,m=`Full code for the ${a} component`;return(0,c.jsxs)(c.Fragment,{children:[n,(0,c.jsx)("br",{}),(0,c.jsx)("br",{}),(0,c.jsxs)(s.A,{children:[(0,c.jsx)(r.A,{value:"props",label:"Properties",children:(0,c.jsx)(l,{props:d})}),(0,c.jsx)(r.A,{value:"example",label:"Example",children:e.example&&(0,c.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,c.jsx)(r.A,{value:"code",label:"Source Code",children:e.codeString&&(0,c.jsx)(o.A,{title:m,className:"language-tsx",children:e.codeString})}),(0,c.jsx)(r.A,{value:"accessibility",label:"Accessibility",children:(0,c.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);