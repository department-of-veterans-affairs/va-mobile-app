"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9662],{7644:(e,t,n)=>{n.d(t,{A:()=>d});var o=n(96540),r=n(54610),l=n(3384),s=n(31347),a=n(28057),c=n(84476);const i=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,c.Ay.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function d(e){const t=(0,a.d)(e.componentName),{description:n,displayName:c,props:d}=t[0],m=`How to use the ${c} component`,p=`Full code for the ${c} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(l.A,null,o.createElement(s.A,{value:"props",label:"Properties"},o.createElement(i,{props:d})),o.createElement(s.A,{value:"example",label:"Example"},e.example&&o.createElement(r.A,{title:m,className:"language-tsx test"},e.example)),o.createElement(s.A,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.A,{title:p,className:"language-tsx"},e.codeString)),o.createElement(s.A,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>r});var o=n(2736);const r=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},74795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,exampleString:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var o=n(58168),r=(n(96540),n(15680));n(41873),n(54610);const l="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { TouchableWithoutFeedback } from 'react-native'\n\nimport { Icon, IconProps } from '@department-of-veterans-affairs/mobile-component-library'\nimport { colors } from '@department-of-veterans-affairs/mobile-tokens'\n\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { a11yHintProp } from 'utils/accessibility'\nimport { getTranslation } from 'utils/formattingUtils'\nimport { useTheme } from 'utils/hooks'\n\nimport { Box, BoxProps, TextView } from '../../index'\nimport { renderInputError } from './formFieldUtils'\n\nexport enum SelectorType {\n  Checkbox = 'Checkbox',\n  Radio = 'Radio',\n}\n\n/**\n * Signifies props for the component {@link VASelector}\n */\nexport type VASelectorProps = {\n  /** render checkbox or radio button */\n  selectorType?: SelectorType\n  /** when true displays the filled checkbox/radio , when false displays the empty checkbox/radio */\n  selected: boolean\n  /** sets the value of selected on click of the checkbox/radio */\n  onSelectionChange: (selected: boolean) => void\n  /** translated labelKey displayed next to the checkbox/radio */\n  labelKey: string\n  /** optional arguments to pass in with the labelKey during translation */\n  labelArgs?: { [key: string]: string }\n  /** optional boolean that disables the VASelector/radio when set to true */\n  disabled?: boolean\n  /** optional accessibilityLabel */\n  a11yLabel?: string\n  /** optional accessibilityHint */\n  a11yHint?: string\n  /** optional error to display for the checkbox */\n  error?: string\n  /** optional callback to set the error message */\n  setError?: (value?: string) => void\n  /** optional boolean that marks the component as required */\n  isRequiredField?: boolean\n  /** Optional TestID */\n  testID?: string\n}\n\n/**A common component to display a checkbox with text*/\nconst VASelector: FC<VASelectorProps> = ({\n  selectorType = SelectorType.Checkbox,\n  selected,\n  onSelectionChange,\n  labelKey,\n  labelArgs,\n  disabled,\n  a11yLabel,\n  a11yHint,\n  error,\n  testID,\n  setError,\n}) => {\n  const theme = useTheme()\n  const { t } = useTranslation()\n  const iconWidth = 22\n\n  const selectorOnPress = (): void => {\n    if (!disabled) {\n      setError && setError('')\n      onSelectionChange(!selected)\n    }\n  }\n\n  const getIconsProps = (\n    name: string,\n    stroke?: keyof VAIconColors | string,\n    fill?: keyof VAIconColors | keyof VATextColors | string,\n  ): IconProps => {\n    return {\n      name,\n      stroke,\n      width: iconWidth,\n      height: 22,\n      fill,\n    } as IconProps\n  }\n\n  const errorBoxProps: BoxProps = {\n    ml: 10 + iconWidth,\n  }\n\n  const selectorBoxProps: BoxProps = {\n    ml: 10,\n    flex: 1,\n  }\n\n  const getCheckBoxIcon = (): React.ReactNode => {\n    const buttonSelectedFill =\n      theme.mode === 'dark' ? colors.vadsColorFormsForegroundActiveOnDark : colors.vadsColorFormsForegroundActiveOnLight\n    const buttonUnselectedFill =\n      theme.mode === 'dark' ? colors.vadsColorFormsBorderDefaultOnDark : colors.vadsColorFormsBorderDefaultOnLight\n\n    if (disabled && selectorType === SelectorType.Radio) {\n      return (\n        <Icon\n          {...getIconsProps(\n            'RadioButtonUnchecked',\n            theme.colors.icon.checkboxDisabled,\n            theme.colors.icon.radioDisabled,\n          )}\n          testID=\"RadioEmpty\"\n        />\n      )\n    }\n\n    if (!!error && selectorType === SelectorType.Checkbox) {\n      return (\n        <Icon\n          {...getIconsProps('Error', theme.colors.icon.error, theme.colors.icon.checkboxDisabledContrast)}\n          testID=\"Error\"\n        />\n      )\n    }\n\n    const filledName = selectorType === SelectorType.Checkbox ? 'CheckBox' : 'RadioButtonChecked'\n    const emptyName = selectorType === SelectorType.Checkbox ? 'CheckBoxOutlineBlank' : 'RadioButtonUnchecked'\n\n    const name = selected ? filledName : emptyName\n    const fill = selected ? buttonSelectedFill : buttonUnselectedFill\n    const stroke = selected ? undefined : theme.colors.icon.checkboxDisabled\n\n    return <Icon {...getIconsProps(name, stroke, fill)} testID={name} />\n  }\n\n  const hintProp = a11yHint ? a11yHintProp(a11yHint) : {}\n  const a11yRole = selectorType === SelectorType.Checkbox ? 'checkbox' : 'radio'\n  const a11yState = selectorType === SelectorType.Checkbox ? { checked: selected } : { selected }\n  const labelToUse = `${a11yLabel || getTranslation(labelKey, t, labelArgs)} ${error ? t('error', { error }) : ''}`\n\n  return (\n    <TouchableWithoutFeedback\n      testID={testID}\n      onPress={selectorOnPress}\n      accessibilityState={a11yState}\n      accessibilityRole={a11yRole}\n      accessibilityLabel={labelToUse}\n      {...hintProp}>\n      <Box>\n        {!!error && <Box {...errorBoxProps}>{renderInputError(error)}</Box>}\n        <Box flexDirection=\"row\">\n          <Box testID=\"checkbox-with-label\" mt={5}>\n            {getCheckBoxIcon()}\n          </Box>\n          <Box {...selectorBoxProps}>\n            <TextView variant=\"VASelector\" color={disabled ? 'checkboxDisabled' : 'bodyText'}>\n              {getTranslation(labelKey, t, labelArgs)}\n            </TextView>\n          </Box>\n        </Box>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default VASelector\n";var s=n(7644);const a={},c=void 0,i={unversionedId:"Flagship design library/Components/Selection and Input/Form Elements/VASelector",id:"Flagship design library/Components/Selection and Input/Form Elements/VASelector",title:"VASelector",description:"",source:"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector.mdx",sourceDirName:"Flagship design library/Components/Selection and Input/Form Elements",slug:"/Flagship design library/Components/Selection and Input/Form Elements/VASelector",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Switch",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Switch"},next:{title:"Text input",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput"}},d={},m=[],p="<VASelector text={'Text to display'} selected={selected} setSelected={setSelected}/>",u={toc:m,exampleString:p},b="wrapper";function h(e){let{components:t,...n}=e;return(0,r.yg)(b,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(s.A,{componentName:"VASelector",example:p,codeString:l,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);