"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5280],{7644:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(96540),r=n(54610),s=n(3384),a=n(31347),i=n(28057),l=n(84476);const p=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,l.Ay.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,i.d)(e.componentName),{description:n,displayName:l,props:c}=t[0],m=`How to use the ${l} component`,u=`Full code for the ${l} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(s.A,null,o.createElement(a.A,{value:"props",label:"Properties"},o.createElement(p,{props:c})),o.createElement(a.A,{value:"example",label:"Example"},e.example&&o.createElement(r.A,{title:m,className:"language-tsx test"},e.example)),o.createElement(a.A,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.A,{title:u,className:"language-tsx"},e.codeString)),o.createElement(a.A,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>r});var o=n(2736);const r=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},29179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,exampleString:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var o=n(58168),r=(n(96540),n(15680));n(41873),n(54610);const s="import React, { FC } from 'react'\nimport { AccessibilityProps, Pressable, Text } from 'react-native'\nimport { useSelector } from 'react-redux'\n\nimport styled from 'styled-components'\n\nimport { RootState } from 'store'\nimport { AccessibilityState } from 'store/slices/accessibilitySlice'\nimport { VATextColors, VATheme, VATypographyThemeVariants } from 'styles/theme'\nimport { useTheme } from 'utils/hooks'\nimport { themeFn } from 'utils/theme'\n\nimport { BoxProps, createBoxStyles } from './Box'\n\n/** TextView font variants */\nexport type FontVariant = keyof VATypographyThemeVariants\nexport type ColorVariant = keyof VATextColors\n\n/**\n * Props for textView\n */\nexport type TextViewProps = AccessibilityProps &\n  BoxProps & {\n    /** Defaults to primary text */\n    color?: string\n\n    /** Defaults to regular */\n    variant?: FontVariant\n\n    /** The text transformation */\n    textTransform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize'\n\n    /** text decoration */\n    textDecoration?: 'none' | 'underline' | 'line-through' | 'underline line-through'\n\n    /** text decoration color */\n    textDecorationColor?: string\n\n    /** onPress callback */\n    onPress?: () => void\n\n    /** if false font won't scale if screen font size changes */\n    allowFontScaling?: boolean\n\n    /** if true the text will be selectable */\n    selectable?: boolean\n\n    /** if set, sets the number of lines the text will render on. if the text exceeds the line amount, it will ellipsis */\n    numberOfLines?: number\n\n    /** Max size for font when user adjusts their font scaling */\n    maxFontSizeMultiplier?: number\n\n    /** if true apply paragraphSpacing, it overrides the mb if supplied*/\n    paragraphSpacing?: boolean\n\n    /** Optional TestID */\n    testID?: string\n  }\n\nconst getColor = (theme: VATheme, props: TextViewProps): string => {\n  return theme.colors.text[props.color as keyof VATextColors] || ''\n}\n\nconst getFontFamily = (theme: VATheme, props: TextViewProps): string => {\n  return theme.typography[props.variant as keyof VATypographyThemeVariants] || theme.typography.MobileBody\n}\n\n/** function to get fontsize from variant string:\n *  1.It matches to the part font-size:..px in the string and extracts that part out for the next step\n *  2.It then replaces all non number instances with an empty string\n *  3.The + operator coerces it to a number type so that we can use it to multiply and get the spacing needed\n */\nconst getFontSize = (variant: string) => {\n  return +(\n    variant\n      .match(/font-size:..px/)\n      ?.toString()\n      .replace(/[^0-9]/g, '') || 0\n  )\n}\n\nconst getTextDecorationColor = (theme: VATheme, props: TextViewProps): string => {\n  return theme.colors.text[props.textDecorationColor as keyof VATextColors] || ''\n}\n\nconst StyledText = styled(Text)`\n  ${themeFn<TextViewProps>(getFontFamily)}\n  ${themeFn<TextViewProps>((theme, props) => (props.color ? `color:${getColor(theme, props)};` : ''))}\n  ${themeFn<TextViewProps>((theme, props) => createBoxStyles(theme, props))};\n  ${themeFn<TextViewProps>((_theme, props) => (props.textTransform ? `text-transform:${props.textTransform};` : ''))}\n  ${themeFn<TextViewProps>((_theme, props) => (props.textDecoration ? `text-decoration:${props.textDecoration}` : ''))};\n  ${themeFn<TextViewProps>((theme, props) =>\n    props.textDecorationColor ? `text-decoration-color:${getTextDecorationColor(theme, props)}` : '',\n  )};\n`\n\n/**\n * A common component for styling text in the application. It also conforms to the Box properties\n * so you don't need to wrap it with a Box view for margins / paddings\n *\n * @returns TextView component\n */\nconst TextView: FC<TextViewProps> = ({ selectable = false, paragraphSpacing = false, testID, ...props }) => {\n  const { isVoiceOverTalkBackRunning } = useSelector<RootState, AccessibilityState>((state) => state.accessibility)\n  const theme = useTheme()\n  const wrapperProps = { ...props }\n\n  if (paragraphSpacing) {\n    const variant = getFontFamily(theme, wrapperProps)\n    const fontSize = getFontSize(variant)\n    wrapperProps.mb = fontSize * 2\n  }\n\n  if (wrapperProps.onPress) {\n    const { onPress, ...remainingProps } = wrapperProps\n    return (\n      <Pressable onPress={onPress} accessible={false}>\n        <StyledText testID={testID} {...remainingProps} />\n      </Pressable>\n    )\n  }\n\n  const selectToCopyProps = isVoiceOverTalkBackRunning\n    ? {}\n    : { selectable, selectionColor: theme.colors.selectCopyText }\n\n  return <StyledText testID={testID} {...selectToCopyProps} {...wrapperProps} />\n}\n\nexport default TextView\n";var a=n(7644);const i={},l=void 0,p={unversionedId:"Flagship design library/Components/TextViews/TextView",id:"Flagship design library/Components/TextViews/TextView",title:"TextView",description:"",source:"@site/docs/Flagship design library/Components/TextViews/TextView.mdx",sourceDirName:"Flagship design library/Components/TextViews",slug:"/Flagship design library/Components/TextViews/TextView",permalink:"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextView",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TextLines",permalink:"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextLines"},next:{title:"VABulletList",permalink:"/va-mobile-app/docs/Flagship design library/Components/TextViews/VABulletList"}},c={},m=[],u='<TextView variant="MobileBody" color="primary">My Text</TextView>\n\n<TextView m={2}>My Text</TextView>',x={toc:m,exampleString:u},h="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(h,(0,o.A)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(a.A,{componentName:"TextView",example:u,codeString:s,mdxType:"ComponentTopInfo"}))}d.isMDXComponent=!0}}]);