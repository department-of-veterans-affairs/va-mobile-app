"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[71],{9540:(n,o,e)=>{e.d(o,{d:()=>s});var t=e(72077);const s=n=>(0,t.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((o=>o.displayName===n))},13651:(n,o,e)=>{e.r(o),e.d(o,{assets:()=>p,contentTitle:()=>l,default:()=>g,exampleString:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Flagship design library/Components/Uncategorized/VAIcon","title":"VAIcon","description":"","source":"@site/docs/Flagship design library/Components/Uncategorized/VAIcon.mdx","sourceDirName":"Flagship design library/Components/Uncategorized","slug":"/Flagship design library/Components/Uncategorized/VAIcon","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"NotificationManager","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager"},"next":{"title":"VAImage","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAImage"}}');var s=e(74848),i=e(28453);e(58069);const r="import React, { FC, useEffect } from 'react'\nimport { AppState, AppStateStatus } from 'react-native'\nimport { SvgProps } from 'react-native-svg'\nimport { useSelector } from 'react-redux'\n\nimport { Box, BoxProps } from 'components'\nimport FlagIconSvgs from 'components/VAIcon/flags'\n// See VAIcon function documentation below for guidance on adding new SVGs\nimport Add from 'components/VAIcon/svgs/Add.svg'\nimport Building from 'components/VAIcon/svgs/Building.svg'\nimport CheckMark from 'components/VAIcon/svgs/CheckMark.svg'\nimport CircleCheckMark from 'components/VAIcon/svgs/CircleCheckMark.svg'\nimport Compose from 'components/VAIcon/svgs/Compose.svg'\nimport ExclamationTriangle from 'components/VAIcon/svgs/ExclamationTriangle.svg'\nimport ExternalLink from 'components/VAIcon/svgs/ExternalLink.svg'\nimport Folder from 'components/VAIcon/svgs/Folder.svg'\nimport Inbox from 'components/VAIcon/svgs/Inbox.svg'\nimport Info from 'components/VAIcon/svgs/Info.svg'\nimport Lock from 'components/VAIcon/svgs/Lock.svg'\nimport Minus from 'components/VAIcon/svgs/Minus.svg'\nimport PaperClip from 'components/VAIcon/svgs/PaperClip.svg'\nimport Phone from 'components/VAIcon/svgs/Phone.svg'\nimport QuestionMark from 'components/VAIcon/svgs/QuestionMark.svg'\nimport Redo from 'components/VAIcon/svgs/Redo.svg'\nimport Remove from 'components/VAIcon/svgs/Remove.svg'\nimport Reply from 'components/VAIcon/svgs/Reply.svg'\nimport Trash from 'components/VAIcon/svgs/Trash.svg'\nimport Unread from 'components/VAIcon/svgs/Unread.svg'\nimport UploadPhoto from 'components/VAIcon/svgs/UploadPhoto.svg'\nimport VASeal from 'components/VAIcon/svgs/VASeal.svg'\nimport VideoCamera from 'components/VAIcon/svgs/VideoCamera.svg'\n// VASelector\nimport CheckBoxEmpty from 'components/VAIcon/svgs/checkbox/CheckBoxEmpty.svg'\nimport CheckBoxError from 'components/VAIcon/svgs/checkbox/CheckBoxError.svg'\nimport CheckBoxFilled from 'components/VAIcon/svgs/checkbox/CheckBoxFilled.svg'\nimport CheckBoxIntermediate from 'components/VAIcon/svgs/checkbox/CheckBoxIntermediate.svg'\n// Links\nimport Calendar from 'components/VAIcon/svgs/links/Calendar.svg'\nimport Chat from 'components/VAIcon/svgs/links/Chat.svg'\nimport CircleExternalLink from 'components/VAIcon/svgs/links/CircleExternalLink.svg'\nimport CirclePhone from 'components/VAIcon/svgs/links/CirclePhone.svg'\nimport Directions from 'components/VAIcon/svgs/links/Directions.svg'\nimport PhoneTTY from 'components/VAIcon/svgs/links/PhoneTTY.svg'\nimport Text from 'components/VAIcon/svgs/links/Text.svg'\nimport RightArrowInCircle from 'components/VAIcon/svgs/links/right-arrow-blue-circle.svg'\n// Navigation\nimport RadioEmpty from 'components/VAIcon/svgs/radio/RadioEmpty.svg'\nimport RadioFilled from 'components/VAIcon/svgs/radio/RadioFilled.svg'\nimport { RootState } from 'store'\nimport { AccessibilityState } from 'store/slices'\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { updateFontScale } from 'utils/accessibility'\nimport { useAppDispatch, useFontScale, useTheme } from 'utils/hooks'\n\nexport const VA_ICON_MAP = {\n  Add,\n  Building,\n  Calendar,\n  Chat,\n  CheckBoxEmpty,\n  CheckBoxError,\n  CheckBoxFilled,\n  CheckBoxIntermediate,\n  CheckMark,\n  CircleCheckMark,\n  CircleExternalLink,\n  CirclePhone,\n  Compose,\n  Directions,\n  ExclamationTriangle,\n  ExternalLink,\n  Folder,\n  Inbox,\n  Info,\n  Lock,\n  Minus,\n  PaperClip,\n  Phone,\n  PhoneTTY,\n  QuestionMark,\n  RadioEmpty, // Also used for RadioDisabled content--same icon, different colors\n  RadioFilled,\n  Redo,\n  Remove,\n  Reply,\n  RightArrowInCircle, // TODO: Ticket 3402 (or separate implementation ticket) to remove this icon\n  Text,\n  Trash,\n  Unread,\n  UploadPhoto,\n  VASeal,\n  VideoCamera,\n  ...FlagIconSvgs,\n}\n\nexport type VAIcons = keyof typeof VA_ICON_MAP\n\n/**\n *  Props that need to be passed in to {@link VAIcon}\n */\nexport type VAIconProps = BoxProps & {\n  /**  enum name of the icon to use {@link VA_ICON_MAP} **/\n  name: VAIcons\n\n  /** Fill color for the icon */\n  fill?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Secondary fill color for duotone icons--fills icons inside main fill, defaults white */\n  fill2?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Stroke color of the icon */\n  stroke?: keyof VAIconColors | string\n\n  /**  optional number use to set the width; otherwise defaults to svg's width */\n  width?: number\n\n  /**  optional number use to set the height; otherwise defaults to svg's height */\n  height?: number\n\n  /** optional maximum width when scaled (requires width and height props) */\n  maxWidth?: number\n\n  /** if true, prevents icon from being scaled (requires width and height props) */\n  preventScaling?: boolean\n\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * A common component to display assets (SVGs).\n *\n * For all icons in the SVG definitions, on the primary/only path:\n *    - Set `fill` to `#000` to inherit VAIcon's fill color prop\n * If the SVG icon is duotone, additionally:\n *    - Set `color` to `#fff` on the top level svg (not path)\n *    - Set `fill` to `currentColor` on the secondary path to inherit VAIcon's fill2 color prop\n * If the SVG icon uses stroke, additionally:\n *    - Set `stroke` to `#00F` to inherit VAIcon's stroke color prop\n *\n * Example icons of each classification:\n *    - One layer: HomeSelected.svg\n *    - Duotone: CircleCheckMark.svg\n *    - Stroke: RadioEmpty.svg\n *\n * @returns VAIcon component\n */\nconst VAIcon: FC<VAIconProps> = ({\n  name,\n  width,\n  height,\n  fill,\n  fill2,\n  stroke,\n  maxWidth,\n  preventScaling,\n  testID,\n  ...boxProps\n}) => {\n  const theme = useTheme()\n  const fs: (val: number) => number = useFontScale()\n  const dispatch = useAppDispatch()\n  const { fontScale } = useSelector<RootState, AccessibilityState>((state) => state.accessibility)\n  let iconProps = Object.create({ name, width, height, stroke, preventScaling, fill })\n\n  useEffect(() => {\n    // Listener for the current app state, updates the font scale when app state is active and the font scale has changed\n    const sub = AppState.addEventListener('change', (newState: AppStateStatus): void =>\n      updateFontScale(newState, fontScale, dispatch),\n    )\n    return (): void => sub?.remove()\n  }, [dispatch, fontScale])\n\n  if (fill) {\n    iconProps = Object.assign({}, iconProps, {\n      fill: theme.colors.icon[fill as keyof VAIconColors] || theme.colors.text[fill as keyof VATextColors] || fill,\n    })\n  }\n\n  if (fill2) {\n    iconProps = Object.assign({}, iconProps, {\n      color: theme.colors.icon[fill2 as keyof VAIconColors] || theme.colors.text[fill2 as keyof VATextColors] || fill2,\n    })\n  }\n\n  if (stroke) {\n    iconProps = Object.assign({}, iconProps, { stroke: theme.colors.icon[stroke as keyof VAIconColors] || stroke })\n  }\n\n  const Icon: FC<SvgProps> | undefined = VA_ICON_MAP[name]\n  if (!Icon) {\n    return <></>\n  }\n\n  if (width && height) {\n    if (preventScaling) {\n      iconProps = { ...iconProps, width, height }\n    } else if (maxWidth && fs(width) > maxWidth) {\n      iconProps = { ...iconProps, width: maxWidth, height: (maxWidth / width) * height }\n    } else {\n      iconProps = { ...iconProps, width: fs(width), height: fs(height) }\n    }\n  }\n\n  return (\n    <Box testID={testID} {...boxProps}>\n      <Icon {...iconProps} />\n    </Box>\n  )\n}\n\nexport default VAIcon\n";var c=e(64555);const a={},l=void 0,p={},m="<VAIcon name={'Logo'} />\n ",d=[];function h(n){return(0,s.jsx)(c.A,{componentName:"VAIcon",example:m,codeString:r})}function g(n={}){const{wrapper:o}={...(0,i.R)(),...n.components};return o?(0,s.jsx)(o,{...n,children:(0,s.jsx)(h,{...n})}):h()}},64555:(n,o,e)=>{e.d(o,{A:()=>p});e(96540);var t=e(58069),s=e(65537),i=e(79329),r=e(9540),c=e(84476),a=e(74848);const l=({props:n})=>n?(0,a.jsx)(a.Fragment,{children:c.Ay.isEmpty(n)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(n).map((o=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:o})}),(0,a.jsx)("td",{style:{minWidth:200},children:n[o].type?.name}),(0,a.jsx)("td",{children:n[o].defaultValue&&n[o].defaultValue.value.toString()}),(0,a.jsx)("td",{children:n[o].required?"Yes":"No"}),(0,a.jsx)("td",{children:n[o].description})]},o)))})]})}):null;function p(n){const o=(0,r.d)(n.componentName),{description:e,displayName:c,props:p}=o[0],m=`How to use the ${c} component`,d=`Full code for the ${c} component`;return(0,a.jsxs)(a.Fragment,{children:[e,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(s.A,{children:[(0,a.jsx)(i.A,{value:"props",label:"Properties",children:(0,a.jsx)(l,{props:p})}),(0,a.jsx)(i.A,{value:"example",label:"Example",children:n.example&&(0,a.jsx)(t.A,{title:m,className:"language-tsx test",children:n.example})}),(0,a.jsx)(i.A,{value:"code",label:"Source Code",children:n.codeString&&(0,a.jsx)(t.A,{title:d,className:"language-tsx",children:n.codeString})}),(0,a.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:n.accessibilityInfo})})]})]})}}}]);