"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3897],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},53033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Engineering/BackEnd/Architecture/OpenAPIDocumentation","title":"OpenAPI Documentation","description":"OpenAPI Creation and Artifact Generation","source":"@site/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation.md","sourceDirName":"Engineering/BackEnd/Architecture","slug":"/Engineering/BackEnd/Architecture/OpenAPIDocumentation","permalink":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/OpenAPIDocumentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ModelsAndSerializers"},"next":{"title":"Parallel Calls","permalink":"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ParallelCalls"}}');var s=n(74848),a=n(28453);const r={},o="OpenAPI Documentation",c={},l=[{value:"OpenAPI Creation and Artifact Generation",id:"openapi-creation-and-artifact-generation",level:2},{value:"Setup",id:"setup",level:2},{value:"Using OpenAPI in RSpec",id:"using-openapi-in-rspec",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"openapi-documentation",children:"OpenAPI Documentation"})}),"\n",(0,s.jsx)(t.h2,{id:"openapi-creation-and-artifact-generation",children:"OpenAPI Creation and Artifact Generation"}),"\n",(0,s.jsxs)(t.p,{children:["We document our API endpoints using ",(0,s.jsx)(t.a,{href:"https://swagger.io/specification/",children:"OpenAPI3"}),". The documentation is recorded in a group of yaml files, which are converted to ",(0,s.jsx)(t.a,{href:"/va-mobile-app/docs/Engineering/BackEnd/API/",children:"HTML"})," and JSON via the ",(0,s.jsx)(t.code,{children:"modules/mobile/docs/generate_static_docs.sh"})," script. Developers must run that script each time they change the yaml to ensure that our documentation is up to date."]}),"\n",(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(t.p,{children:["Developers will need to install ",(0,s.jsx)(t.a,{href:"https://redocly.com/docs/cli/installation#install-globally",children:"redocly"})," in order to run the ",(0,s.jsx)(t.code,{children:"generate_static_docs"})," script."]}),"\n",(0,s.jsx)(t.h2,{id:"using-openapi-in-rspec",children:"Using OpenAPI in RSpec"}),"\n",(0,s.jsxs)(t.p,{children:["The backend team uses the ",(0,s.jsx)(t.a,{href:"https://github.com/willnet/committee-rails",children:"committee-rails gem"})," to tie our documentation and specs together. This gem should be used in request specs to validate requests and responses against the JSON file generated by the ",(0,s.jsx)(t.code,{children:"generate_static_docs"})," script. To add it to a request spec, simply call the method ",(0,s.jsx)(t.code,{children:"assert_schema_conform(expected_status)"}),". This will use the uri path from the ",(0,s.jsx)(t.code,{children:"request"})," object and the expected status (e.g., 200) to look up which schema the response should match and validate the ",(0,s.jsx)(t.code,{children:"response.body"})," against it."]}),"\n",(0,s.jsx)(t.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsx)(t.p,{children:"Our schema tests are only as good as the data we're testing against. These tests run against VCR cassettes we've either recorded or been given. These cassettes will not necessarily cover all cases. It's also possible for cassettes to become out of date, which can cause drift between our specs/OpenAPI documentation and reality."}),"\n",(0,s.jsx)(t.p,{children:"Schema tests are also only as good as the schema they're testing against. Schema should be written as strictly as possible. That means indicating when properties are required or nullable, when additional properties are not permitted in objects, indicating string formats, and specifying which strings are possible via the enum type. Greater specificity results in better documentation."}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["use ",(0,s.jsx)(t.a,{href:"/va-mobile-app/docs/Engineering/BackEnd/Architecture/ModelsAndSerializers",children:"models and serializers"})," to lock down the schema"]}),"\n",(0,s.jsx)(t.li,{children:"use all VCR cassettes available to ensure broad test coverage"}),"\n",(0,s.jsx)(t.li,{children:"only validate the schema once per unique case. In other words, if you need to run several tests with the same data setup and you expect the same response each time, there's no need to validate the schema each time."}),"\n",(0,s.jsxs)(t.li,{children:["use ",(0,s.jsx)(t.code,{children:"nullable: true"})," when you know an attribute may be null. This should also be reflected in the model."]}),"\n",(0,s.jsxs)(t.li,{children:["use ",(0,s.jsx)(t.code,{children:"additionalProperties: false"})," on all objects. Additional properties should be prevented by the model and serializer."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);