"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[71],{9540:(e,n,o)=>{o.d(n,{d:()=>s});var t=o(72077);const s=e=>(0,t.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},13651:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>g,exampleString:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Flagship design library/Components/Uncategorized/VAIcon","title":"VAIcon","description":"","source":"@site/docs/Flagship design library/Components/Uncategorized/VAIcon.mdx","sourceDirName":"Flagship design library/Components/Uncategorized","slug":"/Flagship design library/Components/Uncategorized/VAIcon","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"NotificationManager","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager"},"next":{"title":"VAImage","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAImage"}}');var s=o(74848),i=o(28453);o(58069);const r="import React, { FC, useEffect } from 'react'\nimport { AppState, AppStateStatus } from 'react-native'\nimport { SvgProps } from 'react-native-svg'\nimport { useSelector } from 'react-redux'\n\nimport { Box, BoxProps } from 'components'\nimport { RootState } from 'store'\nimport { AccessibilityState } from 'store/slices'\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { updateFontScale } from 'utils/accessibility'\nimport { useAppDispatch, useFontScale, useTheme } from 'utils/hooks'\n\n// See VAIcon function documentation below for guidance on adding new SVGs\nimport Add from './svgs/Add.svg'\nimport Building from './svgs/Building.svg'\nimport CheckMark from './svgs/CheckMark.svg'\nimport CircleCheckMark from './svgs/CircleCheckMark.svg'\nimport Compose from './svgs/Compose.svg'\nimport ExclamationTriangle from './svgs/ExclamationTriangle.svg'\nimport ExternalLink from './svgs/ExternalLink.svg'\nimport Folder from './svgs/Folder.svg'\nimport Inbox from './svgs/Inbox.svg'\nimport Info from './svgs/Info.svg'\nimport Lock from './svgs/Lock.svg'\nimport Minus from './svgs/Minus.svg'\nimport PaperClip from './svgs/PaperClip.svg'\nimport Phone from './svgs/Phone.svg'\nimport QuestionMark from './svgs/QuestionMark.svg'\nimport Redo from './svgs/Redo.svg'\nimport Remove from './svgs/Remove.svg'\nimport Reply from './svgs/Reply.svg'\nimport Trash from './svgs/Trash.svg'\nimport Unread from './svgs/Unread.svg'\nimport UploadPhoto from './svgs/UploadPhoto.svg'\nimport VASeal from './svgs/VASeal.svg'\nimport VideoCamera from './svgs/VideoCamera.svg'\n// VASelector\nimport CheckBoxEmpty from './svgs/checkbox/CheckBoxEmpty.svg'\nimport CheckBoxError from './svgs/checkbox/CheckBoxError.svg'\nimport CheckBoxFilled from './svgs/checkbox/CheckBoxFilled.svg'\nimport CheckBoxIntermediate from './svgs/checkbox/CheckBoxIntermediate.svg'\n// Links\nimport Calendar from './svgs/links/Calendar.svg'\nimport Chat from './svgs/links/Chat.svg'\nimport CircleExternalLink from './svgs/links/CircleExternalLink.svg'\nimport CirclePhone from './svgs/links/CirclePhone.svg'\nimport Directions from './svgs/links/Directions.svg'\nimport PhoneTTY from './svgs/links/PhoneTTY.svg'\nimport Text from './svgs/links/Text.svg'\nimport RightArrowInCircle from './svgs/links/right-arrow-blue-circle.svg'\n// Navigation\nimport RadioEmpty from './svgs/radio/RadioEmpty.svg'\nimport RadioFilled from './svgs/radio/RadioFilled.svg'\n\nexport const VA_ICON_MAP = {\n  Add,\n  Building,\n  Calendar,\n  Chat,\n  CheckBoxEmpty,\n  CheckBoxError,\n  CheckBoxFilled,\n  CheckBoxIntermediate,\n  CheckMark,\n  CircleCheckMark,\n  CircleExternalLink,\n  CirclePhone,\n  Compose,\n  Directions,\n  ExclamationTriangle,\n  ExternalLink,\n  Folder,\n  Inbox,\n  Info,\n  Lock,\n  Minus,\n  PaperClip,\n  Phone,\n  PhoneTTY,\n  QuestionMark,\n  RadioEmpty, // Also used for RadioDisabled content--same icon, different colors\n  RadioFilled,\n  Redo,\n  Remove,\n  Reply,\n  RightArrowInCircle, // TODO: Ticket 3402 (or separate implementation ticket) to remove this icon\n  Text,\n  Trash,\n  Unread,\n  UploadPhoto,\n  VASeal,\n  VideoCamera,\n}\n\n/**\n *  Props that need to be passed in to {@link VAIcon}\n */\nexport type VAIconProps = BoxProps & {\n  /**  enum name of the icon to use {@link VA_ICON_MAP} **/\n  name: keyof typeof VA_ICON_MAP\n\n  /** Fill color for the icon */\n  fill?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Secondary fill color for duotone icons--fills icons inside main fill, defaults white */\n  fill2?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Stroke color of the icon */\n  stroke?: keyof VAIconColors | string\n\n  /**  optional number use to set the width; otherwise defaults to svg's width */\n  width?: number\n\n  /**  optional number use to set the height; otherwise defaults to svg's height */\n  height?: number\n\n  /** optional maximum width when scaled (requires width and height props) */\n  maxWidth?: number\n\n  /** if true, prevents icon from being scaled (requires width and height props) */\n  preventScaling?: boolean\n\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * A common component to display assets (SVGs).\n *\n * For all icons in the SVG definitions, on the primary/only path:\n *    - Set `fill` to `#000` to inherit VAIcon's fill color prop\n * If the SVG icon is duotone, additionally:\n *    - Set `color` to `#fff` on the top level svg (not path)\n *    - Set `fill` to `currentColor` on the secondary path to inherit VAIcon's fill2 color prop\n * If the SVG icon uses stroke, additionally:\n *    - Set `stroke` to `#00F` to inherit VAIcon's stroke color prop\n *\n * Example icons of each classification:\n *    - One layer: HomeSelected.svg\n *    - Duotone: CircleCheckMark.svg\n *    - Stroke: RadioEmpty.svg\n *\n * @returns VAIcon component\n */\nconst VAIcon: FC<VAIconProps> = ({\n  name,\n  width,\n  height,\n  fill,\n  fill2,\n  stroke,\n  maxWidth,\n  preventScaling,\n  testID,\n  ...boxProps\n}) => {\n  const theme = useTheme()\n  const fs: (val: number) => number = useFontScale()\n  const dispatch = useAppDispatch()\n  const { fontScale } = useSelector<RootState, AccessibilityState>((state) => state.accessibility)\n  let iconProps = Object.create({ name, width, height, stroke, preventScaling, fill })\n\n  useEffect(() => {\n    // Listener for the current app state, updates the font scale when app state is active and the font scale has changed\n    const sub = AppState.addEventListener('change', (newState: AppStateStatus): void =>\n      updateFontScale(newState, fontScale, dispatch),\n    )\n    return (): void => sub?.remove()\n  }, [dispatch, fontScale])\n\n  if (fill) {\n    iconProps = Object.assign({}, iconProps, {\n      fill: theme.colors.icon[fill as keyof VAIconColors] || theme.colors.text[fill as keyof VATextColors] || fill,\n    })\n  }\n\n  if (fill2) {\n    iconProps = Object.assign({}, iconProps, {\n      color: theme.colors.icon[fill2 as keyof VAIconColors] || theme.colors.text[fill2 as keyof VATextColors] || fill2,\n    })\n  }\n\n  if (stroke) {\n    iconProps = Object.assign({}, iconProps, { stroke: theme.colors.icon[stroke as keyof VAIconColors] || stroke })\n  }\n\n  const Icon: FC<SvgProps> | undefined = VA_ICON_MAP[name]\n  if (!Icon) {\n    return <></>\n  }\n\n  if (width && height) {\n    if (preventScaling) {\n      iconProps = { ...iconProps, width, height }\n    } else if (maxWidth && fs(width) > maxWidth) {\n      iconProps = { ...iconProps, width: maxWidth, height: (maxWidth / width) * height }\n    } else {\n      iconProps = { ...iconProps, width: fs(width), height: fs(height) }\n    }\n  }\n\n  return (\n    <Box testID={testID} {...boxProps}>\n      <Icon {...iconProps} />\n    </Box>\n  )\n}\n\nexport default VAIcon\n";var a=o(64555);const l={},c=void 0,p={},m="<VAIcon name={'Logo'} />\n ",d=[];function h(e){return(0,s.jsx)(a.A,{componentName:"VAIcon",example:m,codeString:r})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h()}},64555:(e,n,o)=>{o.d(n,{A:()=>p});o(96540);var t=o(58069),s=o(65537),i=o(79329),r=o(9540),a=o(84476),l=o(74848);const c=({props:e})=>e?(0,l.jsx)(l.Fragment,{children:a.Ay.isEmpty(e)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(e).map((n=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:n})}),(0,l.jsx)("td",{style:{minWidth:200},children:e[n].type?.name}),(0,l.jsx)("td",{children:e[n].defaultValue&&e[n].defaultValue.value.toString()}),(0,l.jsx)("td",{children:e[n].required?"Yes":"No"}),(0,l.jsx)("td",{children:e[n].description})]},n)))})]})}):null;function p(e){const n=(0,r.d)(e.componentName),{description:o,displayName:a,props:p}=n[0],m=`How to use the ${a} component`,d=`Full code for the ${a} component`;return(0,l.jsxs)(l.Fragment,{children:[o,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(s.A,{children:[(0,l.jsx)(i.A,{value:"props",label:"Properties",children:(0,l.jsx)(c,{props:p})}),(0,l.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(t.A,{title:m,className:"language-tsx test",children:e.example})}),(0,l.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(t.A,{title:d,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);