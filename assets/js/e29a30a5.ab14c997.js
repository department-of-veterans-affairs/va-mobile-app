"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5159],{4380:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,exampleString:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/LargeNavButton","title":"LargeNavButton","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/LargeNavButton.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization","slug":"/Flagship design library/Components/Layout and Organization/LargeNavButton","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CollapsibleView","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView"},"next":{"title":"List","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/"}}');var a=t(74848),s=t(28453);t(58069);const i="import React, { FC } from 'react'\nimport ContentLoader, { Rect } from 'react-content-loader/native'\nimport { useTranslation } from 'react-i18next'\nimport { Platform, Pressable, PressableStateCallbackType, ViewStyle } from 'react-native'\n\nimport { Icon } from '@department-of-veterans-affairs/mobile-component-library'\nimport { colors } from '@department-of-veterans-affairs/mobile-tokens'\n\nimport { Box, TextView } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nconst SkeletonLoader = () => {\n  const theme = useTheme()\n  return (\n    <ContentLoader\n      backgroundColor={theme.colors.background.skeletonLoader}\n      foregroundColor={theme.colors.background.skeletonLoaderSecondary}\n      speed={0.6}\n      width=\"150\"\n      height=\"10\">\n      <Rect width=\"100%\" height=\"25\" />\n    </ContentLoader>\n  )\n}\n\ninterface HomeNavButtonProps {\n  /**string for header and used to create testID for accessibility*/\n  title: string\n  /**string secondary text that seats on the second row */\n  subText?: string\n  /**a11y string secondary text that seats on the second row */\n  subTextA11yLabel?: string\n  /**string for accessibility hint */\n  a11yHint?: string\n  /**function to be called when press occurs */\n  onPress: () => void\n  /** Show loading animation in place of subtext */\n  showLoading?: boolean\n  /** Optional test ID for button */\n  testID?: string\n}\n\n/**\n * Reusable large navigation button\n * @returns LargeNavButton component\n */\nconst LargeNavButton: FC<HomeNavButtonProps> = ({\n  title,\n  subText,\n  a11yHint,\n  onPress,\n  showLoading,\n  testID,\n}: HomeNavButtonProps) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n\n  const pressableStyle = ({ pressed }: PressableStateCallbackType): ViewStyle => ({\n    width: '100%',\n    backgroundColor: pressed ? theme.colors.background.listActive : theme.colors.background.textBox,\n    paddingVertical: theme.dimensions.cardPadding,\n    paddingHorizontal: theme.dimensions.buttonPadding,\n    marginBottom: theme.dimensions.condensedMarginBetween,\n    shadowColor: colors.vadsColorBlack,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n      },\n      android: {\n        elevation: 2,\n      },\n    }),\n  })\n\n  const accessibilityLabel = `${title} ${showLoading ? t('loadingActivity') : subText || ''}`.trim()\n\n  return (\n    <Pressable\n      style={pressableStyle}\n      onPress={onPress}\n      accessible={true}\n      accessibilityRole={'link'}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      {...a11yHintProp(a11yHint || '')}>\n      <Box flexDirection=\"row\">\n        <Box flex={1}>\n          <TextView variant=\"LargeNavButton\">{title}</TextView>\n          {showLoading ? (\n            <TextView mt={30} flexDirection={'row'}>\n              <SkeletonLoader />\n            </TextView>\n          ) : subText ? (\n            <TextView mt={20} variant={'LargeNavSubtext'}>\n              {subText}\n            </TextView>\n          ) : (\n            <></>\n          )}\n        </Box>\n        <Box flexDirection=\"row\" alignItems=\"flex-end\">\n          <Icon\n            width={30}\n            height={30}\n            name=\"ArrowCircleRight\"\n            fill={theme.colors.icon.largeNavButton}\n            preventScaling={true}\n          />\n        </Box>\n      </Box>\n    </Pressable>\n  )\n}\n\nexport default LargeNavButton\n";var r=t(64555);const l={},c=void 0,d={},p=" <LargeNavButton\n title={'appointments.title'}\n subText={'appointments.subText'}\n a11yHint={'appointments.a11yHint'}\n onPress={() => {}}\n/>",m=[];function u(e){return(0,a.jsx)(r.A,{componentName:"LargeNavButton",example:p,codeString:i})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u()}},9540:(e,n,t)=>{t.d(n,{d:()=>a});var o=t(72077);const a=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var o=t(58069),a=t(65537),s=t(79329),i=t(9540),r=t(84476),l=t(74848);const c=e=>{let{props:n}=e;return n?(0,l.jsx)(l.Fragment,{children:r.Ay.isEmpty(n)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(n).map((e=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:e})}),(0,l.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,l.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,l.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,l.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function d(e){const n=(0,i.d)(e.componentName),{description:t,displayName:r,props:d}=n[0],p=`How to use the ${r} component`,m=`Full code for the ${r} component`;return(0,l.jsxs)(l.Fragment,{children:[t,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(a.A,{children:[(0,l.jsx)(s.A,{value:"props",label:"Properties",children:(0,l.jsx)(c,{props:d})}),(0,l.jsx)(s.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,l.jsx)(s.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(o.A,{title:m,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(s.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);