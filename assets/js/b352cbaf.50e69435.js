"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3757],{9540:(e,n,t)=>{t.d(n,{d:()=>i});var o=t(72077);const i=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>c});t(96540);var o=t(58069),i=t(65537),a=t(79329),s=t(9540),l=t(84476),r=t(74848);const d=e=>{let{props:n}=e;return n?(0,r.jsx)(r.Fragment,{children:l.Ay.isEmpty(n)?(0,r.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Name"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Default Value"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:Object.keys(n).map((e=>(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:e})}),(0,r.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,r.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,r.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,r.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function c(e){const n=(0,s.d)(e.componentName),{description:t,displayName:l,props:c}=n[0],p=`How to use the ${l} component`,u=`Full code for the ${l} component`;return(0,r.jsxs)(r.Fragment,{children:[t,(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"props",label:"Properties",children:(0,r.jsx)(d,{props:c})}),(0,r.jsx)(a.A,{value:"example",label:"Example",children:e.example&&(0,r.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,r.jsx)(a.A,{value:"code",label:"Source Code",children:e.codeString&&(0,r.jsx)(o.A,{title:u,className:"language-tsx",children:e.codeString})}),(0,r.jsx)(a.A,{value:"accessibility",label:"Accessibility",children:(0,r.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},90661:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,exampleString:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"Flagship design library/Components/Selection and Input/Form Elements/RadioGroup","title":"RadioGroup","description":"","source":"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/RadioGroup.mdx","sourceDirName":"Flagship design library/Components/Selection and Input/Form Elements","slug":"/Flagship design library/Components/Selection and Input/Form Elements/RadioGroup","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/RadioGroup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Radio button","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/RadioButton"},"next":{"title":"Switch","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Switch"}}');var i=t(74848),a=t(28453);t(58069);const s="import React, { ReactElement, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { AccessibilityInfo } from 'react-native'\n\nimport { isEqual, map } from 'underscore'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { getTranslation } from 'utils/formattingUtils'\nimport { useTheme } from 'utils/hooks'\nimport { isIOS } from 'utils/platform'\n\nimport {\n  Box,\n  ButtonDecoratorType,\n  DefaultList,\n  DefaultListItemObj,\n  SelectorType,\n  TextLine,\n  TextView,\n  VASelector,\n} from '../../index'\nimport { renderInputError } from './formFieldUtils'\n\nexport type radioOption<T> = {\n  /** translated text displayed next to the checkbox/radio */\n  labelKey: string\n  /** optional arguments to pass in with the labelKey during translation */\n  labelArgs?: { [key: string]: string }\n  /** value of the radio button */\n  value: T\n  /** string for the header if one needed */\n  headerText?: string\n  /** optional accessibilityLabel */\n  a11yLabel?: string\n  /** Additional text to present under label key */\n  additionalLabelText?: Array<string>\n  /** Removes the radio btn icon from radio list and makes it not selectable*/\n  notSelectableRadioBtn?: boolean\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * Signifies props for the component {@link RadioGroup}\n */\nexport type RadioGroupProps<T> = {\n  /** Zero based array of options. An option is an object with both a value which is the relevant data,\n   * and a label which is displayed as a string to represent the value. */\n  options: Array<radioOption<T>>\n  /** Currently selected option. An initial value can be used or this can be left undefined which will have nothing initially selected.  */\n  value?: T\n  /** Call back function that passes the newly selected option's value as an argument to.*/\n  onChange: (val: T) => void\n  /** optional boolean that disables the radio group when set to true */\n  disabled?: boolean\n  /** optional error to display */\n  error?: string\n  /** optional boolean to indicate to use the radio buttons in a list */\n  isRadioList?: boolean\n  /** optional text to show as the radio list title */\n  radioListTitle?: string\n}\n\n/**A common component to display radio button selectors for a list of selectable items*/\nconst RadioGroup = <T,>({\n  options,\n  value,\n  onChange,\n  disabled = false,\n  error,\n  isRadioList,\n  radioListTitle,\n}: RadioGroupProps<T>): ReactElement => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const hasSingleOption = options.length === 1\n\n  useEffect(() => {\n    // Auto select the first option if there is only one option\n    if (hasSingleOption && !value) {\n      onChange(options[0].value)\n    }\n  }, [hasSingleOption, value, options, onChange])\n\n  const getOption = (option: radioOption<T>): ReactElement => {\n    const { labelKey, labelArgs, a11yLabel, testID } = option\n\n    // Render option as simple text\n    if (hasSingleOption) {\n      return (\n        // eslint-disable-next-line react-native-a11y/has-accessibility-hint\n        <TextView accessibilityLabel={a11yLabel || getTranslation(labelKey, t, labelArgs)} variant=\"VASelector\">\n          {getTranslation(labelKey, t, labelArgs)}\n        </TextView>\n      )\n    }\n\n    const selected = isEqual(option.value, value)\n    const onVASelectorChange = (_selected: boolean): void => {\n      onChange(option.value)\n    }\n\n    return (\n      <VASelector\n        selectorType={SelectorType.Radio}\n        selected={selected}\n        onSelectionChange={onVASelectorChange}\n        labelKey={labelKey}\n        labelArgs={labelArgs}\n        disabled={disabled}\n        a11yLabel={a11yLabel}\n        testID={testID}\n      />\n    )\n  }\n\n  /** creates the radio group with an optiona title and the radio button on the left side */\n  const getStandardRadioGroup = () => {\n    return map(options, (option, index) => {\n      const { headerText } = option\n      return (\n        <Box key={index}>\n          {headerText && (\n            <Box>\n              <TextView variant=\"MobileBodyBold\" accessibilityRole=\"header\">\n                {headerText}\n              </TextView>\n            </Box>\n          )}\n          <Box\n            mb={theme.dimensions.standardMarginBetween}\n            key={index}\n            mt={headerText ? theme.dimensions.contentMarginTop : 0}>\n            {getOption(option)}\n          </Box>\n        </Box>\n      )\n    })\n  }\n\n  /** creates the radio group with a optional title and the radio buttons in a list with the radio button ot the far right */\n  const getRadioGroupList = () => {\n    const listItems: Array<DefaultListItemObj> = options.map((option, index) => {\n      const selected = isEqual(option.value, value)\n      const onSelectorChange = (): void => {\n        if (!disabled && !option.notSelectableRadioBtn) {\n          // Prevents VoiceOver from repeating accessibility label twice on changes\n          isIOS() && AccessibilityInfo.announceForAccessibility('')\n          onChange(option.value)\n        }\n      }\n      const textLines: Array<TextLine> = [\n        { text: option.labelKey, variant: 'VASelector', color: disabled ? 'checkboxDisabled' : 'primary' },\n      ]\n\n      if (option.additionalLabelText && option.additionalLabelText.length > 0) {\n        option.additionalLabelText.forEach((item) => {\n          textLines.push({ text: item, variant: 'HelperText' })\n        })\n      }\n\n      const radioButton: DefaultListItemObj = {\n        textLines,\n        decorator: option.notSelectableRadioBtn\n          ? ButtonDecoratorType.None\n          : disabled\n            ? ButtonDecoratorType.RadioDisabled\n            : selected\n              ? ButtonDecoratorType.RadioFilled\n              : ButtonDecoratorType.RadioEmpty,\n        onPress: onSelectorChange,\n        minHeight: 64,\n        a11yRole: 'radio',\n        a11yState: { selected: selected },\n        backgroundColor: selected ? 'listActive' : undefined,\n        testId: `${option.a11yLabel || option.labelKey} ${t('optionOutOfTotal', { count: index + 1, totalOptions: options.length })}`,\n      }\n\n      return radioButton\n    })\n    return (\n      <Box>\n        <DefaultList items={listItems} title={radioListTitle} />\n      </Box>\n    )\n  }\n\n  const getRadios = (): ReactElement => {\n    return (\n      <Box>\n        {!!error && <Box mb={theme.dimensions.condensedMarginBetween}>{renderInputError(error)}</Box>}\n        {isRadioList ? getRadioGroupList() : getStandardRadioGroup()}\n      </Box>\n    )\n  }\n\n  return getRadios()\n}\n\nexport default RadioGroup\n";var l=t(64555);const r={},d=void 0,c={},p="const [optionValue, setOptionValue] = useState(options[0].value)\nconst handleRadioOnChange = (radioValue: number): void => {\n  setOptionValue(radioValue)\n}\n\nconst options = [\n  {\n    value: 1,\n    label: '1'\n  },\n  {\n    value: 2,\n    label: '2'\n  },\n]\n\nreturn <RadioGroup<number> options={options} value={optionValue} onChange={handleRadioOnChange} />",u=[];function h(e){return(0,i.jsx)(l.A,{componentName:"RadioGroup",example:p,codeString:s})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h()}}}]);