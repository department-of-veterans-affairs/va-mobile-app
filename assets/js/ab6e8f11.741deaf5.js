"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9701],{9540:(e,n,t)=>{t.d(n,{d:()=>o});var a=t(72077);const o=e=>(0,a.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>m});t(96540);var a=t(58069),o=t(65537),i=t(79329),s=t(9540),r=t(84476),c=t(74848);const l=e=>{let{props:n}=e;return n?(0,c.jsx)(c.Fragment,{children:r.Ay.isEmpty(n)?(0,c.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,c.jsxs)("table",{children:[(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Name"}),(0,c.jsx)("th",{children:"Type"}),(0,c.jsx)("th",{children:"Default Value"}),(0,c.jsx)("th",{children:"Required"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:Object.keys(n).map((e=>(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("code",{children:e})}),(0,c.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,c.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,c.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,c.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function m(e){const n=(0,s.d)(e.componentName),{description:t,displayName:r,props:m}=n[0],d=`How to use the ${r} component`,p=`Full code for the ${r} component`;return(0,c.jsxs)(c.Fragment,{children:[t,(0,c.jsx)("br",{}),(0,c.jsx)("br",{}),(0,c.jsxs)(o.A,{children:[(0,c.jsx)(i.A,{value:"props",label:"Properties",children:(0,c.jsx)(l,{props:m})}),(0,c.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,c.jsx)(a.A,{title:d,className:"language-tsx test",children:e.example})}),(0,c.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,c.jsx)(a.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,c.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,c.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},82467:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>h,exampleString:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"Flagship design library/Components/Navigation/Primary/NavigationTabBar","title":"NavigationTabBar","description":"","source":"@site/docs/Flagship design library/Components/Navigation/Primary/NavigationTabBar.mdx","sourceDirName":"Flagship design library/Components/Navigation/Primary","slug":"/Flagship design library/Components/Navigation/Primary/NavigationTabBar","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Primary/NavigationTabBar","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HeaderTitle","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Primary/HeaderTitle"},"next":{"title":"Secondary navigation","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/"}}');var o=t(74848),i=t(28453);t(58069);const s="import React, { FC, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { AccessibilityRole, AccessibilityState, TouchableWithoutFeedback } from 'react-native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\n\nimport { BottomTabNavigationEventMap } from '@react-navigation/bottom-tabs/src/types'\nimport { NavigationHelpers, ParamListBase, TabNavigationState, useIsFocused } from '@react-navigation/native'\n\nimport { TFunction } from 'i18next'\nimport styled from 'styled-components'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yValueProp } from 'utils/accessibility'\nimport { useRouteNavigation, useTheme } from 'utils/hooks'\nimport { changeNavigationBarColor } from 'utils/rnNativeUIUtilities'\nimport { themeFn } from 'utils/theme'\n\nimport Box from './Box'\nimport IconWithText, { IconWithTextProps } from './IconWithText'\n\ntype TabBarRoute = {\n  key: string\n  name: string\n}\n\n/**\n *  Signifies the props that need to be passed in to {@link NavigationTabBar}\n */\nexport type NavigationTabBarProps = {\n  /** the tab navigators current state */\n  state: TabNavigationState<ParamListBase>\n\n  /** the tab navigators navigation helpers */\n  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n}\n\nconst StyledSafeAreaView = styled(SafeAreaView)`\n  background-color: ${themeFn((theme) => theme.colors.background.navButton)};\n`\n/**Component for the bottom tab navigation*/\nconst NavigationTabBar: FC<NavigationTabBarProps> = ({ state, navigation, translation }) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const navigateTo = useRouteNavigation()\n  const isNavBarFocused = useIsFocused()\n\n  useEffect(() => {\n    const navBarColor = isNavBarFocused ? theme.colors.background.navButton : theme.colors.background.main\n    const isLightTheme = theme.mode === 'light'\n    changeNavigationBarColor(navBarColor, isLightTheme, false)\n  }, [isNavBarFocused, theme])\n\n  const onPress = (route: TabBarRoute, isFocused: boolean): void => {\n    const event = navigation.emit({\n      type: 'tabPress',\n      target: route.key,\n      canPreventDefault: true,\n    })\n\n    if (!isFocused && !event.defaultPrevented) {\n      navigateTo(route.name)\n    }\n  }\n\n  const onLongPress = (route: TabBarRoute): void => {\n    navigation.emit({\n      type: 'tabLongPress',\n      target: route.key,\n    })\n  }\n\n  return (\n    <StyledSafeAreaView edges={['bottom']}>\n      <Box\n        flexDirection=\"row\"\n        backgroundColor={'navButton'}\n        height={theme.dimensions.navBarHeight}\n        borderTopColor=\"primary\"\n        borderTopWidth={theme.dimensions.borderWidth}\n        accessibilityRole=\"toolbar\">\n        {state.routes.map((route: TabBarRoute, index: number) => {\n          const isFocused = state.index === index\n          const routeName = route.name.replace('Tab', '')\n          const lowerCaseRoute = routeName.toLowerCase()\n          const translatedName = translation(`${lowerCaseRoute}.title`)\n\n          type TouchableProps = {\n            key: string\n            onPress: () => void\n            onLongPress: () => void\n            accessibilityRole: AccessibilityRole\n            accessibilityState: AccessibilityState\n            accessible: boolean\n          }\n\n          const props: TouchableProps = {\n            key: route.name,\n            onPress: (): void => onPress(route as TabBarRoute, isFocused),\n            onLongPress: (): void => onLongPress(route as TabBarRoute),\n            accessibilityRole: 'link',\n            accessibilityState: isFocused ? { selected: true } : { selected: false },\n            accessible: true,\n          }\n\n          const iconProps: IconWithTextProps = {\n            name: 'Home',\n            fill: isFocused ? theme.colors.icon.active : theme.colors.icon.inactive,\n            label: routeName,\n            labelColor: isFocused ? 'link' : 'textWithIconButtonInactive',\n            height: 24,\n            width: 24,\n          }\n          switch (routeName) {\n            case 'Home':\n              iconProps.height = 28\n              iconProps.width = 28\n              iconProps.mt = -1\n              iconProps.name = isFocused ? 'Home' : 'HomeOutlined'\n              break\n            case 'Health':\n              iconProps.name = isFocused ? 'MedicalServices' : 'MedicalServicesOutlined'\n              break\n            case 'Benefits':\n              iconProps.name = isFocused ? 'Description' : 'DescriptionOutlined'\n              break\n            case 'Payments':\n              iconProps.name = isFocused ? 'RequestQuote' : 'RequestQuoteOutlined'\n              break\n            default:\n              iconProps.name = 'Home'\n          }\n\n          return (\n            <TouchableWithoutFeedback\n              accessibilityLabel={translatedName}\n              accessibilityHint={t('navigateTo', { translatedName })}\n              testID={translatedName}\n              {...props}\n              {...a11yValueProp({ text: t('listPosition', { position: index + 1, total: state.routes.length }) })}>\n              <Box flex={1} display=\"flex\" flexDirection=\"column\" mt={7}>\n                <Box alignSelf=\"center\" position=\"absolute\" mt={theme.dimensions.buttonBorderWidth}>\n                  <IconWithText {...iconProps} />\n                </Box>\n              </Box>\n            </TouchableWithoutFeedback>\n          )\n        })}\n      </Box>\n    </StyledSafeAreaView>\n  )\n}\n\nexport default NavigationTabBar\n";var r=t(64555);const c={},l=void 0,m={},d='<>\n  <TabNav.Navigator \n  tabBar={(props): \n  React.ReactNode => <NavigationTabBar {...props} translation={t} />} \n  initialRouteName="HomeTab" \n  screenOptions={{ headerShown: false }}>\n        <TabNav.Screen name="HomeTab" component={HomeScreen} options={{ title: t(\'home:title\') }} />\n        <TabNav.Screen name="BenefitsTab" component={ClaimsScreen} options={{ title: t(\'common:benefits.title\') }} />\n        <TabNav.Screen name="HealthTab" component={HealthScreen} options={{ title: t(\'health:title\') }} />\n        <TabNav.Screen name="ProfileTab" component={ProfileScreen} options={{ title: t(\'profile:title\') }} />\n  </TabNav.Navigator>\n</>',p=[];function u(e){return(0,o.jsx)(r.A,{componentName:"NavigationTabBar",example:d,codeString:s})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u()}}}]);