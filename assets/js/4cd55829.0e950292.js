"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3165],{12856:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","title":"Updating or Adding to an Existing Feature State","description":"Intro","source":"@site/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature.md","sourceDirName":"Engineering/FrontEnd/ReduxToolkit/Tutorials","slug":"/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","permalink":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Add a New Feature State","permalink":"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit"},"next":{"title":"Remote Config","permalink":"/va-mobile-app/docs/Engineering/FrontEnd/RemoteConfig/"}}');var n=r(74848),o=r(28453);const a={},s="Updating or Adding to an Existing Feature State",c={},d=[{value:"Intro",id:"intro",level:2},{value:"Adding a New State",id:"adding-a-new-state",level:2}];function l(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"updating-or-adding-to-an-existing-feature-state",children:"Updating or Adding to an Existing Feature State"})}),"\n",(0,n.jsx)(e.h2,{id:"intro",children:"Intro"}),"\n",(0,n.jsx)(e.p,{children:"This tutorial will consists of adding state to an existing feature state."}),"\n",(0,n.jsx)(e.h2,{id:"adding-a-new-state",children:"Adding a New State"}),"\n",(0,n.jsx)(e.p,{children:"Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts."}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Current Slice Code"})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',children:"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n"})}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Code after adding the logout reducer"})}),"\n",(0,n.jsxs)(e.p,{children:["Here we added the ",(0,n.jsx)(e.strong,{children:"dispatchMilitaryHistoryLogout"})," reducer function which we will extract an action to be dispatch on the logout Redux thunk."]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',children:"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n\n     dispatchMilitaryHistoryLogout: () => {\n      return {\n        ...initialMilitaryServiceState,\n      }\n    },\n\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n"})}),"\n",(0,n.jsxs)(e.p,{children:["That is all it takes to add a new state to an existing slice file. Now the ",(0,n.jsx)(e.strong,{children:"dispatchMilitaryHistoryLogout"})," could be imported to any file and be dispatched."]})]})}function p(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},28453:(t,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var i=r(96540);const n={},o=i.createContext(n);function a(t){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:a(t.components),i.createElement(o.Provider,{value:e},t.children)}}}]);