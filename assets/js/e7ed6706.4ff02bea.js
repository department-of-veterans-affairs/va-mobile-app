"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7087],{9540:(e,n,o)=>{o.d(n,{d:()=>t});var s=o(72077);const t=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},53818:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,exampleString:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>x});const s=JSON.parse('{"id":"Flagship design library/Components/Alerts and Progress/AccordionCollapsible","title":"AccordionCollapsible","description":"","source":"@site/docs/Flagship design library/Components/Alerts and Progress/AccordionCollapsible.mdx","sourceDirName":"Flagship design library/Components/Alerts and Progress","slug":"/Flagship design library/Components/Alerts and Progress/AccordionCollapsible","permalink":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AccordionCollapsible","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Alerts and progress","permalink":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/"},"next":{"title":"Alert","permalink":"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AlertBox"}}');var t=o(74848),r=o(28453);o(58069);const a="import React, { FC, ReactNode, Ref, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Pressable, PressableProps, View } from 'react-native'\n\nimport { Icon } from '@department-of-veterans-affairs/mobile-component-library'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { useTheme } from 'utils/hooks'\n\nimport { Box, BoxProps, TextArea } from './index'\n\nexport type AccordionCollapsibleProps = {\n  /** component to display as header of accordion */\n  header: ReactNode\n  /** component to display only when the accordion is expanded */\n  expandedContent: ReactNode\n  /** testID for the header */\n  testID?: string\n  /** a11yHint for the header */\n  a11yHint?: string\n  /** component to display on when the accordion is collapsed */\n  collapsedContent?: ReactNode\n  /** custom on press call if more action is needed when expanding/collapsing the accordion */\n  customOnPress?: (expandedValue?: boolean) => void\n  /** sets the initial value of expanded if an accordion should already be expanded on render */\n  expandedInitialValue?: boolean\n  /** gets rid of border of TextArea so the top and bottom borders don't double up in message threads when accordion is opened */\n  noBorder?: boolean\n  /** Ref for the header section */\n  headerRef?: Ref<View>\n}\n\n/**\n * A common component to show content inside of a collapsible accordion.\n */\nconst AccordionCollapsible: FC<AccordionCollapsibleProps> = ({\n  header,\n  expandedContent,\n  collapsedContent,\n  testID,\n  customOnPress,\n  expandedInitialValue,\n  noBorder,\n  children,\n  a11yHint,\n  headerRef,\n}) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n  const [expanded, setExpanded] = useState(expandedInitialValue || false)\n\n  const onPress = (): void => {\n    if (customOnPress) {\n      customOnPress(!expanded)\n    }\n\n    setExpanded(!expanded)\n  }\n\n  const defaultA11yHint = expanded ? undefined : t('expandToReview')\n\n  const pressableProps: PressableProps = {\n    onPress,\n    accessibilityState: { expanded },\n    accessibilityHint: a11yHint || defaultA11yHint,\n    accessibilityRole: 'tab',\n  }\n\n  const iconName = expanded ? 'ExpandLess' : 'ExpandMore'\n\n  const renderHeader = () => {\n    const data = (\n      <Box flexDirection=\"row\">\n        <Box flex={1}>{header}</Box>\n        <Box alignItems=\"flex-end\">\n          <Icon name={iconName} fill={theme.colors.icon.chevronCollapsible} width={30} height={30} />\n        </Box>\n      </Box>\n    )\n\n    const labelProps = testID\n      ? {\n          accessibilityLabel: testID,\n        }\n      : {}\n\n    return (\n      <Pressable {...pressableProps} {...labelProps} ref={headerRef}>\n        {data}\n      </Pressable>\n    )\n  }\n\n  const boxProps: BoxProps = {\n    borderBottomColor: 'primary',\n    borderBottomWidth: theme.dimensions.borderWidth,\n    accessibilityRole: 'tablist',\n  }\n\n  return (\n    <Box {...boxProps} testID={testID} importantForAccessibility={'no'}>\n      <TextArea noBorder={noBorder}>\n        {renderHeader()}\n        {!expanded && collapsedContent}\n        {expanded && expandedContent}\n        {children}\n      </TextArea>\n    </Box>\n  )\n}\n\nexport default AccordionCollapsible\n";var i=o(64555);const l={},d=void 0,c={},p="<AccordionCollapsible \n header={accordionHeader()} \n expandedContent={accordionContent()} \n testID={'headerText'} \n alertBorder={'warning'} \n a11yHint={'a11yHint'} />\n ",x=[];function m(e){return(0,t.jsx)(i.A,{componentName:"AccordionCollapsible",example:p,codeString:a})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m()}},64555:(e,n,o)=>{o.d(n,{A:()=>c});o(96540);var s=o(58069),t=o(65537),r=o(79329),a=o(9540),i=o(84476),l=o(74848);const d=e=>{let{props:n}=e;return n?(0,l.jsx)(l.Fragment,{children:i.Ay.isEmpty(n)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(n).map((e=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:e})}),(0,l.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,l.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,l.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,l.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function c(e){const n=(0,a.d)(e.componentName),{description:o,displayName:i,props:c}=n[0],p=`How to use the ${i} component`,x=`Full code for the ${i} component`;return(0,l.jsxs)(l.Fragment,{children:[o,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(t.A,{children:[(0,l.jsx)(r.A,{value:"props",label:"Properties",children:(0,l.jsx)(d,{props:c})}),(0,l.jsx)(r.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(s.A,{title:p,className:"language-tsx test",children:e.example})}),(0,l.jsx)(r.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(s.A,{title:x,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(r.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);