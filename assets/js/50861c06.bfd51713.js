"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7092],{9540:(e,n,a)=>{a.d(n,{d:()=>s});var t=a(72077);const s=e=>(0,t.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,a)=>{a.d(n,{A:()=>d});a(96540);var t=a(58069),s=a(65537),i=a(79329),r=a(9540),o=a(84476),l=a(74848);const c=({props:e})=>e?(0,l.jsx)(l.Fragment,{children:o.Ay.isEmpty(e)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(e).map((n=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:n})}),(0,l.jsx)("td",{style:{minWidth:200},children:e[n].type?.name}),(0,l.jsx)("td",{children:e[n].defaultValue&&e[n].defaultValue.value.toString()}),(0,l.jsx)("td",{children:e[n].required?"Yes":"No"}),(0,l.jsx)("td",{children:e[n].description})]},n)))})]})}):null;function d(e){const n=(0,r.d)(e.componentName),{description:a,displayName:o,props:d}=n[0],m=`How to use the ${o} component`,p=`Full code for the ${o} component`;return(0,l.jsxs)(l.Fragment,{children:[a,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(s.A,{children:[(0,l.jsx)(i.A,{value:"props",label:"Properties",children:(0,l.jsx)(c,{props:d})}),(0,l.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(t.A,{title:m,className:"language-tsx test",children:e.example})}),(0,l.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(t.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},93922:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,exampleString:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Flagship design library/Components/Uncategorized/VAImage","title":"VAImage","description":"","source":"@site/docs/Flagship design library/Components/Uncategorized/VAImage.mdx","sourceDirName":"Flagship design library/Components/Uncategorized","slug":"/Flagship design library/Components/Uncategorized/VAImage","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAImage","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"VAIcon","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon"},"next":{"title":"VAScrollView","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAScrollView"}}');var s=a(74848),i=a(28453);a(58069);const r="import React, { FC } from 'react'\nimport { Image, useWindowDimensions } from 'react-native'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\n/**\n * Add images to android('res/drawable') and in xcode('Images.xcassets') when new ones are added.\n * Android and IOS are not rendering using local path(ex. require('./images/asset.png')) and needs to be added as an asset resource.\n * Width and height should match whatever the image is.\n */\nexport const VA_IMAGES_MAP = {\n  PaperCheck: {\n    width: 922,\n    height: 492,\n    source: { uri: 'paper_check' },\n  },\n}\n/**\n *  Signifies the props that need to be passed in to {@link VAImage}\n */\nexport type VAImageProps = {\n  /** enum name of the image */\n  name: keyof typeof VA_IMAGES_MAP\n  /** accessibilityLabel for the overall component */\n  a11yLabel: string\n  /** margins for the image */\n  marginX: number\n}\n\n/**\n * A common component to display static images.\n * New images need to be placed in VAImge/image and in Xcode under VAMobile/Images.xcassets.\n * Examples/details can be found in VAImage component.\n *\n * @returns VAImage component\n */\nconst VAImage: FC<VAImageProps> = ({ name, a11yLabel, marginX }) => {\n  const safeAreaRightMargin = useSafeAreaInsets().right\n  const safeAreaLeftMargin = useSafeAreaInsets().left\n\n  // Subtracting safe area insets from image width\n  const width = useWindowDimensions().width - 2 * marginX - safeAreaLeftMargin - safeAreaRightMargin\n  const imageProps = VA_IMAGES_MAP[name]\n\n  if (!imageProps) {\n    return <></>\n  }\n\n  const ratio = width / imageProps.width\n\n  return (\n    // eslint-disable-next-line react-native-a11y/has-accessibility-hint\n    <Image\n      source={imageProps.source}\n      style={{ width: width, height: imageProps.height * ratio }}\n      accessibilityLabel={a11yLabel}\n      accessible={true}\n      accessibilityRole={'image'}\n      testID={a11yLabel}\n    />\n  )\n}\n\nexport default VAImage\n";var o=a(64555);const l={},c=void 0,d={},m="<VAImage name={'PaperCheck'} a11yLabel={'label'} marginX={10} />",p=[];function g(e){return(0,s.jsx)(o.A,{componentName:"VAImage",example:m,codeString:r})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g()}}}]);