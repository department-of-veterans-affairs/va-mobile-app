"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2717],{7644:(e,r,n)=>{n.d(r,{A:()=>p});var t=n(96540),o=n(54610),s=n(3384),a=n(31347),l=n(28057),i=n(84476);const m=e=>{let{props:r}=e;return r?t.createElement(t.Fragment,null,i.Ay.isEmpty(r)?t.createElement("pre",{className:"preText"},"This component does not have props defined"):t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Name"),t.createElement("th",null,"Type"),t.createElement("th",null,"Default Value"),t.createElement("th",null,"Required"),t.createElement("th",null,"Description"))),t.createElement("tbody",null,Object.keys(r).map((e=>t.createElement("tr",{key:e},t.createElement("td",null,t.createElement("code",null,e)),t.createElement("td",{style:{minWidth:200}},r[e].type?.name),t.createElement("td",null,r[e].defaultValue&&r[e].defaultValue.value.toString()),t.createElement("td",null,r[e].required?"Yes":"No"),t.createElement("td",null,r[e].description))))))):null};function p(e){const r=(0,l.d)(e.componentName),{description:n,displayName:i,props:p}=r[0],c=`How to use the ${i} component`,E=`Full code for the ${i} component`;return t.createElement(t.Fragment,null,n,t.createElement("br",null),t.createElement("br",null),t.createElement(s.A,null,t.createElement(a.A,{value:"props",label:"Properties"},t.createElement(m,{props:p})),t.createElement(a.A,{value:"example",label:"Example"},e.example&&t.createElement(o.A,{title:c,className:"language-tsx test"},e.example)),t.createElement(a.A,{value:"code",label:"Source Code"},e.codeString&&t.createElement(o.A,{title:E,className:"language-tsx"},e.codeString)),t.createElement(a.A,{value:"accessibility",label:"Accessibility"},t.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,r,n)=>{n.d(r,{d:()=>o});var t=n(2736);const o=e=>(0,t.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((r=>r.displayName===e))},2700:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>y,exampleString:()=>E,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var t=n(58168),o=(n(96540),n(15680));n(41873),n(54610);const s="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\n\nimport { CallHelpCenter, CustomError, DowntimeError, ErrorAlert, NetworkConnectionError } from 'components'\nimport { CommonErrorTypesConstants } from 'constants/errors'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { ScreenIDToDowntimeFeatures, ScreenIDTypes } from 'store/api/types'\nimport { ErrorsState } from 'store/slices'\nimport { isErrorObject } from 'utils/common'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { displayedTextPhoneNumber } from 'utils/formattingUtils'\nimport { oneOfFeaturesInDowntime } from 'utils/hooks'\n\nexport type ErrorComponentProps = {\n  /**The screen id for the screen that has the errors*/\n  screenID: ScreenIDTypes\n  /** optional function called when the Try again button is pressed */\n  onTryAgain?: () => void\n  /** optional Error */\n  error?: Error | null\n}\n\n/**Main error handling component. This component will show the proper screen according to the type of error.*/\nconst ErrorComponent: FC<ErrorComponentProps> = (props) => {\n  const {\n    errorsByScreenID,\n    downtimeWindowsByFeature,\n    tryAgain: storeTryAgain,\n  } = useSelector<RootState, ErrorsState>((state) => state.errors)\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const features = ScreenIDToDowntimeFeatures[props.screenID]\n  const isInDowntime = oneOfFeaturesInDowntime(features, downtimeWindowsByFeature)\n\n  const getSpecificErrorComponent: FC<ErrorComponentProps> = ({ onTryAgain, screenID, error }) => {\n    const tryAgain = onTryAgain ? onTryAgain : storeTryAgain\n    const errorType = errorsByScreenID[screenID] || ''\n\n    if (isInDowntime) {\n      return <DowntimeError screenID={screenID} />\n    }\n\n    if (error && isErrorObject(error)) {\n      let custom\n      const reactQueryErrorType = getCommonErrorFromAPIError(error, screenID)\n      switch (reactQueryErrorType) {\n        case CommonErrorTypesConstants.NETWORK_CONNECTION_ERROR:\n          return <NetworkConnectionError onTryAgain={tryAgain} />\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR:\n          return <CallHelpCenter />\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_WITH_REFRESH:\n          return <CallHelpCenter onTryAgain={tryAgain} />\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_HEALTH_LOAD:\n          return (\n            <CallHelpCenter\n              onTryAgain={tryAgain}\n              errorText={t('secureMessaging.sendError.ifTheAppStill')}\n              errorA11y={t('secureMessaging.sendError.ifTheAppStill.a11y')}\n              callPhone={displayedTextPhoneNumber(t('8773270022'))}\n            />\n          )\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_DISABILITY_RATING:\n          return (\n            <CallHelpCenter\n              titleText={t('disabilityRating.errorTitle')}\n              callPhone={displayedTextPhoneNumber(t('8008271000'))}\n            />\n          )\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_APPOINTMENTS:\n          return <ErrorAlert text={t('appointments.errorText')} onTryAgain={tryAgain} />\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_VACCINE:\n          return (\n            <CallHelpCenter\n              onTryAgain={tryAgain}\n              titleText={t('errors.callHelpCenter.vaAppNotWorking')}\n              callPhone={displayedTextPhoneNumber(t('8006982411'))}\n            />\n          )\n        case CommonErrorTypesConstants.APP_LEVEL_ERROR_ALLERGY:\n          return (\n            <CallHelpCenter\n              onTryAgain={tryAgain}\n              titleText={t('errors.callHelpCenter.vaAppNotWorking')}\n              callPhone={displayedTextPhoneNumber(t('8006982411'))}\n            />\n          )\n        case CommonErrorTypesConstants.CUSTOM_ERROR:\n          custom = error.json?.errors[0]\n          return (\n            <CustomError titleText={custom?.title || ''} errorText={custom?.body || ''} callPhone={custom?.telephone} />\n          )\n        case CommonErrorTypesConstants.CUSTOM_ERROR_WITH_REFRESH:\n          custom = error.json?.errors[0]\n          return (\n            <CustomError\n              onTryAgain={tryAgain}\n              titleText={custom?.title || ''}\n              errorText={custom?.body || ''}\n              callPhone={custom?.telephone}\n            />\n          )\n        default:\n          return <CallHelpCenter onTryAgain={tryAgain} />\n      }\n    }\n    // check which specific error occurred and return the corresponding error element\n    switch (errorType) {\n      case CommonErrorTypesConstants.NETWORK_CONNECTION_ERROR:\n        return <NetworkConnectionError onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR:\n        return <CallHelpCenter />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_WITH_REFRESH:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_HEALTH_LOAD:\n        return (\n          <CallHelpCenter\n            onTryAgain={tryAgain}\n            errorText={t('secureMessaging.sendError.ifTheAppStill')}\n            errorA11y={t('secureMessaging.sendError.ifTheAppStill.a11y')}\n            callPhone={displayedTextPhoneNumber(t('8773270022'))}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_DISABILITY_RATING:\n        return (\n          <CallHelpCenter\n            titleText={t('disabilityRating.errorTitle')}\n            callPhone={displayedTextPhoneNumber(t('8008271000'))}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_APPOINTMENTS:\n        return <ErrorAlert text={t('appointments.errorText')} onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_VACCINE:\n        return (\n          <CallHelpCenter\n            onTryAgain={tryAgain}\n            titleText={t('errors.callHelpCenter.vaAppNotWorking')}\n            callPhone={displayedTextPhoneNumber(t('8006982411'))}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_ALLERGY:\n        return (\n          <CallHelpCenter\n            onTryAgain={tryAgain}\n            titleText={t('errors.callHelpCenter.vaAppNotWorking')}\n            callPhone={displayedTextPhoneNumber(t('8006982411'))}\n          />\n        )\n      default:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n    }\n  }\n\n  return getSpecificErrorComponent(props)\n}\n\nexport default ErrorComponent\n";var a=n(7644);const l={},i=void 0,m={unversionedId:"Flagship design library/Components/Errors/ErrorComponent",id:"Flagship design library/Components/Errors/ErrorComponent",title:"ErrorComponent",description:"",source:"@site/docs/Flagship design library/Components/Errors/ErrorComponent.mdx",sourceDirName:"Flagship design library/Components/Errors",slug:"/Flagship design library/Components/Errors/ErrorComponent",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/ErrorComponent",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DowntimeError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/DowntimeError"},next:{title:"NetworkConnectionError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/NetworkConnectionError"}},p={},c=[],E="<ErrorComponent screenID={ScreenIDTypesConstants.APPEAL_DETAILS_SCREEN_ID} />",u={toc:c,exampleString:E},C="wrapper";function y(e){let{components:r,...n}=e;return(0,o.yg)(C,(0,t.A)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)(a.A,{componentName:"ErrorComponent",example:E,codeString:s,mdxType:"ComponentTopInfo"}))}y.isMDXComponent=!0}}]);