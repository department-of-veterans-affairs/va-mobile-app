"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1631],{9540:(e,n,i)=>{i.d(n,{d:()=>o});var t=i(72077);const o=e=>(0,t.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,i)=>{i.d(n,{A:()=>d});i(96540);var t=i(58069),o=i(65537),a=i(79329),r=i(9540),s=i(84476),c=i(74848);const l=({props:e})=>e?(0,c.jsx)(c.Fragment,{children:s.Ay.isEmpty(e)?(0,c.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,c.jsxs)("table",{children:[(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Name"}),(0,c.jsx)("th",{children:"Type"}),(0,c.jsx)("th",{children:"Default Value"}),(0,c.jsx)("th",{children:"Required"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:Object.keys(e).map((n=>(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{children:(0,c.jsx)("code",{children:n})}),(0,c.jsx)("td",{style:{minWidth:200},children:e[n].type?.name}),(0,c.jsx)("td",{children:e[n].defaultValue&&e[n].defaultValue.value.toString()}),(0,c.jsx)("td",{children:e[n].required?"Yes":"No"}),(0,c.jsx)("td",{children:e[n].description})]},n)))})]})}):null;function d(e){const n=(0,r.d)(e.componentName),{description:i,displayName:s,props:d}=n[0],f=`How to use the ${s} component`,p=`Full code for the ${s} component`;return(0,c.jsxs)(c.Fragment,{children:[i,(0,c.jsx)("br",{}),(0,c.jsx)("br",{}),(0,c.jsxs)(o.A,{children:[(0,c.jsx)(a.A,{value:"props",label:"Properties",children:(0,c.jsx)(l,{props:d})}),(0,c.jsx)(a.A,{value:"example",label:"Example",children:e.example&&(0,c.jsx)(t.A,{title:f,className:"language-tsx test",children:e.example})}),(0,c.jsx)(a.A,{value:"code",label:"Source Code",children:e.codeString&&(0,c.jsx)(t.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,c.jsx)(a.A,{value:"accessibility",label:"Accessibility",children:(0,c.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},88176:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,exampleString:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Flagship design library/Components/Uncategorized/NotificationManager","title":"NotificationManager","description":"","source":"@site/docs/Flagship design library/Components/Uncategorized/NotificationManager.mdx","sourceDirName":"Flagship design library/Components/Uncategorized","slug":"/Flagship design library/Components/Uncategorized/NotificationManager","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AppVersionAndBuild","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/AppVersionAndBuild"},"next":{"title":"VAIcon","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon"}}');var o=i(74848),a=i(28453);i(58069);const r="import React, { Dispatch, FC, SetStateAction, createContext, useContext, useEffect, useRef, useState } from 'react'\nimport { Linking, View } from 'react-native'\nimport { NotificationBackgroundFetchResult, Notifications } from 'react-native-notifications'\nimport { useSelector } from 'react-redux'\n\nimport { useRegisterDevice } from 'api/notifications'\nimport { usePersonalInformation } from 'api/personalInformation/getPersonalInformation'\nimport { Events } from 'constants/analytics'\nimport { RootState } from 'store'\nimport { AuthState } from 'store/slices'\nimport { logAnalyticsEvent } from 'utils/analytics'\n\nconst foregroundNotifications: Array<string> = []\n\ninterface NotificationContextType {\n  tappedForegroundNotification: boolean\n  initialUrl: string\n  setTappedForegroundNotification: Dispatch<SetStateAction<boolean>>\n  setInitialUrl: Dispatch<SetStateAction<string>>\n}\n\nconst NotificationContext = createContext<NotificationContextType>({\n  tappedForegroundNotification: false,\n  initialUrl: '',\n  setTappedForegroundNotification: () => {},\n  setInitialUrl: () => {},\n})\n\n/**\n * notification manager component to handle all push logic\n */\nconst NotificationManager: FC = ({ children }) => {\n  const { loggedIn, firstTimeLogin, requestNotifications } = useSelector<RootState, AuthState>((state) => state.auth)\n  const loggedInRef = useRef(loggedIn)\n  const { data: personalInformation } = usePersonalInformation({ enabled: loggedIn })\n  const { mutate: registerDevice } = useRegisterDevice()\n  const [tappedForegroundNotification, setTappedForegroundNotification] = useState(false)\n  const [initialUrl, setInitialUrl] = useState('')\n  const [eventsRegistered, setEventsRegistered] = useState(false)\n\n  useEffect(() => {\n    loggedInRef.current = loggedIn\n\n    const register = () => {\n      const registeredNotifications = Notifications.events().registerRemoteNotificationsRegistered((event) => {\n        const registerParams = {\n          deviceToken: event.deviceToken,\n          userID: personalInformation?.id,\n        }\n        registerDevice(registerParams)\n      })\n      const failedNotifications = Notifications.events().registerRemoteNotificationsRegistrationFailed(() => {\n        const registerParams = {\n          deviceToken: undefined,\n          userID: undefined,\n        }\n        registerDevice(registerParams)\n      })\n      Notifications.events().registerRemoteNotificationsRegistrationDenied(() => {\n        registeredNotifications.remove()\n        failedNotifications.remove()\n      })\n      if (firstTimeLogin === false && requestNotifications === true) {\n        Notifications.registerRemoteNotifications()\n      }\n    }\n\n    if (loggedIn && personalInformation?.id) {\n      register()\n    }\n  }, [loggedIn, firstTimeLogin, requestNotifications, personalInformation?.id, registerDevice])\n\n  const registerNotificationEvents = () => {\n    // Register callbacks for notifications that happen when the app is in the foreground\n    Notifications.events().registerNotificationReceivedForeground((notification, completion) => {\n      console.debug('Notification Received - Foreground', notification)\n      foregroundNotifications.push(notification.identifier)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion({ alert: true, sound: true, badge: true })\n    })\n\n    // Register callback for opened notifications\n    Notifications.events().registerNotificationOpened((notification, completion) => {\n      /** this should be logged in firebase automatically. Anything here should be actions the app takes when it\n       * opens like deep linking, etc\n       */\n      logAnalyticsEvent(Events.vama_notification_click(notification.payload.url))\n      if (foregroundNotifications.includes(notification.identifier)) {\n        setTappedForegroundNotification(true)\n      }\n      // Open deep link from the notification when present. If the user is\n      // not logged in, store the link so it can be opened after authentication.\n      if (notification.payload.url) {\n        if (loggedInRef.current) {\n          Linking.openURL(notification.payload.url)\n        } else {\n          setInitialUrl(notification.payload.url)\n        }\n      }\n\n      console.debug('Notification opened by device user', notification)\n      console.debug(`Notification opened with an action identifier: ${notification.identifier}`)\n      completion()\n    })\n\n    // Register callbacks for notifications that happen when the app is in the background\n    Notifications.events().registerNotificationReceivedBackground((notification, completion) => {\n      console.debug('Notification Received - Background', notification)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion(NotificationBackgroundFetchResult.NEW_DATA)\n    })\n\n    // Callback in case there is need to do something with initial notification before it goes to system tray\n    Notifications.getInitialNotification()\n      .then((notification) => {\n        logAnalyticsEvent(Events.vama_notification_click(notification?.payload.url))\n        console.debug('Initial notification was:', notification || 'N/A')\n\n        if (notification?.payload.url) {\n          setInitialUrl(notification.payload.url)\n        }\n      })\n      .catch((err) => console.error('getInitialNotification() failed', err))\n  }\n\n  if (!eventsRegistered) {\n    registerNotificationEvents()\n    setEventsRegistered(true)\n  }\n\n  const s = { flex: 1 }\n  return (\n    <NotificationContext.Provider\n      value={{ tappedForegroundNotification, setTappedForegroundNotification, initialUrl, setInitialUrl }}>\n      <View style={s}>{children}</View>\n    </NotificationContext.Provider>\n  )\n}\n\nexport const useNotificationContext = () => useContext(NotificationContext)\n\nexport default NotificationManager\n";var s=i(64555);const c={},l=void 0,d={},f='return (\n    <ActionSheetProvider>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <I18nextProvider i18n={i18n}>\n            <NavigationContainer ref={navigationRef} onReady={navOnReady} onStateChange={onNavStateChange}>\n              <NotificationManager>\n                <SafeAreaProvider>\n                  <StatusBar barStyle="light-content" backgroundColor={theme.colors.icon.active} />\n                  <AuthGuard />\n                </SafeAreaProvider>\n              </NotificationManager>\n            </NavigationContainer>\n          </I18nextProvider>\n        </Provider>\n      </ThemeProvider>\n    </ActionSheetProvider>\n  )',p=[];function g(e){return(0,o.jsx)(s.A,{componentName:"NotificationManager",example:f,codeString:r})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g()}}}]);