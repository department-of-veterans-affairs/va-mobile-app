"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1631],{7644:(e,t,n)=>{n.d(t,{A:()=>d});var i=n(96540),o=n(54610),a=n(3384),r=n(31347),s=n(28057),c=n(84476);const l=e=>{let{props:t}=e;return t?i.createElement(i.Fragment,null,c.Ay.isEmpty(t)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(t).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},t[e].type?.name),i.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),i.createElement("td",null,t[e].required?"Yes":"No"),i.createElement("td",null,t[e].description))))))):null};function d(e){const t=(0,s.d)(e.componentName),{description:n,displayName:c,props:d}=t[0],f=`How to use the ${c} component`,p=`Full code for the ${c} component`;return i.createElement(i.Fragment,null,n,i.createElement("br",null),i.createElement("br",null),i.createElement(a.A,null,i.createElement(r.A,{value:"props",label:"Properties"},i.createElement(l,{props:d})),i.createElement(r.A,{value:"example",label:"Example"},e.example&&i.createElement(o.A,{title:f,className:"language-tsx test"},e.example)),i.createElement(r.A,{value:"code",label:"Source Code"},e.codeString&&i.createElement(o.A,{title:p,className:"language-tsx"},e.codeString)),i.createElement(r.A,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>o});var i=n(2736);const o=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},66785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,exampleString:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>f});var i=n(58168),o=(n(96540),n(15680));n(41873),n(54610);const a="import React, { Dispatch, FC, SetStateAction, createContext, useContext, useEffect, useRef, useState } from 'react'\nimport { Linking, View } from 'react-native'\nimport { NotificationBackgroundFetchResult, Notifications } from 'react-native-notifications'\nimport { useSelector } from 'react-redux'\n\nimport { useRegisterDevice } from 'api/notifications'\nimport { usePersonalInformation } from 'api/personalInformation/getPersonalInformation'\nimport { Events } from 'constants/analytics'\nimport { RootState } from 'store'\nimport { AuthState } from 'store/slices'\nimport { logAnalyticsEvent } from 'utils/analytics'\n\nconst foregroundNotifications: Array<string> = []\n\ninterface NotificationContextType {\n  tappedForegroundNotification: boolean\n  initialUrl: string\n  setTappedForegroundNotification: Dispatch<SetStateAction<boolean>>\n  setInitialUrl: Dispatch<SetStateAction<string>>\n}\n\nconst NotificationContext = createContext<NotificationContextType>({\n  tappedForegroundNotification: false,\n  initialUrl: '',\n  setTappedForegroundNotification: () => {},\n  setInitialUrl: () => {},\n})\n\n/**\n * notification manager component to handle all push logic\n */\nconst NotificationManager: FC = ({ children }) => {\n  const { loggedIn, firstTimeLogin, requestNotifications } = useSelector<RootState, AuthState>((state) => state.auth)\n  const loggedInRef = useRef(loggedIn)\n  const { data: personalInformation } = usePersonalInformation({ enabled: loggedIn })\n  const { mutate: registerDevice } = useRegisterDevice()\n  const [tappedForegroundNotification, setTappedForegroundNotification] = useState(false)\n  const [initialUrl, setInitialUrl] = useState('')\n  const [eventsRegistered, setEventsRegistered] = useState(false)\n\n  useEffect(() => {\n    loggedInRef.current = loggedIn\n\n    const register = () => {\n      const registeredNotifications = Notifications.events().registerRemoteNotificationsRegistered((event) => {\n        const registerParams = {\n          deviceToken: event.deviceToken,\n          userID: personalInformation?.id,\n        }\n        registerDevice(registerParams)\n      })\n      const failedNotifications = Notifications.events().registerRemoteNotificationsRegistrationFailed(() => {\n        const registerParams = {\n          deviceToken: undefined,\n          userID: undefined,\n        }\n        registerDevice(registerParams)\n      })\n      Notifications.events().registerRemoteNotificationsRegistrationDenied(() => {\n        registeredNotifications.remove()\n        failedNotifications.remove()\n      })\n      if (firstTimeLogin === false && requestNotifications === true) {\n        Notifications.registerRemoteNotifications()\n      }\n    }\n\n    if (loggedIn && personalInformation?.id) {\n      register()\n    }\n  }, [loggedIn, firstTimeLogin, requestNotifications, personalInformation?.id, registerDevice])\n\n  const registerNotificationEvents = () => {\n    // Register callbacks for notifications that happen when the app is in the foreground\n    Notifications.events().registerNotificationReceivedForeground((notification, completion) => {\n      console.debug('Notification Received - Foreground', notification)\n      foregroundNotifications.push(notification.identifier)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion({ alert: true, sound: true, badge: true })\n    })\n\n    // Register callback for opened notifications\n    Notifications.events().registerNotificationOpened((notification, completion) => {\n      /** this should be logged in firebase automatically. Anything here should be actions the app takes when it\n       * opens like deep linking, etc\n       */\n      logAnalyticsEvent(Events.vama_notification_click(notification.payload.url))\n      if (foregroundNotifications.includes(notification.identifier)) {\n        setTappedForegroundNotification(true)\n      }\n      // Open deep link from the notification when present. If the user is\n      // not logged in, store the link so it can be opened after authentication.\n      if (notification.payload.url) {\n        if (loggedInRef.current) {\n          Linking.openURL(notification.payload.url)\n        } else {\n          setInitialUrl(notification.payload.url)\n        }\n      }\n\n      console.debug('Notification opened by device user', notification)\n      console.debug(`Notification opened with an action identifier: ${notification.identifier}`)\n      completion()\n    })\n\n    // Register callbacks for notifications that happen when the app is in the background\n    Notifications.events().registerNotificationReceivedBackground((notification, completion) => {\n      console.debug('Notification Received - Background', notification)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion(NotificationBackgroundFetchResult.NEW_DATA)\n    })\n\n    // Callback in case there is need to do something with initial notification before it goes to system tray\n    Notifications.getInitialNotification()\n      .then((notification) => {\n        logAnalyticsEvent(Events.vama_notification_click(notification?.payload.url))\n        console.debug('Initial notification was:', notification || 'N/A')\n\n        if (notification?.payload.url) {\n          setInitialUrl(notification.payload.url)\n        }\n      })\n      .catch((err) => console.error('getInitialNotification() failed', err))\n  }\n\n  if (!eventsRegistered) {\n    registerNotificationEvents()\n    setEventsRegistered(true)\n  }\n\n  const s = { flex: 1 }\n  return (\n    <NotificationContext.Provider\n      value={{ tappedForegroundNotification, setTappedForegroundNotification, initialUrl, setInitialUrl }}>\n      <View style={s}>{children}</View>\n    </NotificationContext.Provider>\n  )\n}\n\nexport const useNotificationContext = () => useContext(NotificationContext)\n\nexport default NotificationManager\n";var r=n(7644);const s={},c=void 0,l={unversionedId:"Flagship design library/Components/Uncategorized/NotificationManager",id:"Flagship design library/Components/Uncategorized/NotificationManager",title:"NotificationManager",description:"",source:"@site/docs/Flagship design library/Components/Uncategorized/NotificationManager.mdx",sourceDirName:"Flagship design library/Components/Uncategorized",slug:"/Flagship design library/Components/Uncategorized/NotificationManager",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AppVersionAndBuild",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/AppVersionAndBuild"},next:{title:"VAIcon",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon"}},d={},f=[],p='return (\n    <ActionSheetProvider>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <I18nextProvider i18n={i18n}>\n            <NavigationContainer ref={navigationRef} onReady={navOnReady} onStateChange={onNavStateChange}>\n              <NotificationManager>\n                <SafeAreaProvider>\n                  <StatusBar barStyle="light-content" backgroundColor={theme.colors.icon.active} />\n                  <AuthGuard />\n                </SafeAreaProvider>\n              </NotificationManager>\n            </NavigationContainer>\n          </I18nextProvider>\n        </Provider>\n      </ThemeProvider>\n    </ActionSheetProvider>\n  )',g={toc:f,exampleString:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,i.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)(r.A,{componentName:"NotificationManager",example:p,codeString:a,mdxType:"ComponentTopInfo"}))}m.isMDXComponent=!0}}]);