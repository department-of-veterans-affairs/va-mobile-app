"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3109],{9540:(e,n,t)=>{t.d(n,{d:()=>o});var s=t(72077);const o=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},50737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>x,exampleString:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Flagship design library/Components/Selection and Input/Form Elements/VATextInput","title":"Text input","description":"Text input allows people to enter any type of text unless otherwise restricted.","source":"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput.mdx","sourceDirName":"Flagship design library/Components/Selection and Input/Form Elements","slug":"/Flagship design library/Components/Selection and Input/Form Elements/VATextInput","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Text input"},"sidebar":"tutorialSidebar","previous":{"title":"VASelector","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector"},"next":{"title":"Pickers","permalink":"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/"}}');var o=t(74848),r=t(28453);t(58069);const i="import React, { FC, ReactElement, RefObject, useEffect, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { KeyboardTypeOptions, TextInput, TextInputProps } from 'react-native'\n\nimport { useTheme } from 'utils/hooks'\nimport { isIOS } from 'utils/platform'\n\nimport { Box, BoxProps } from '../../index'\nimport {\n  getInputBorderColor,\n  getInputBorderWidth,\n  getInputWrapperProps,\n  removeInputErrorMessage,\n  renderInputError,\n  renderInputLabelSection,\n} from './formFieldUtils'\n\nexport type VATextInputTypes = 'none' | 'email' | 'phone'\n\nexport type VATextInputProps = {\n  /** Type of the input. Will determine the keyboard used */\n  inputType: VATextInputTypes\n  /** Initial value of the input. If blank it will show the placeholder */\n  value?: string\n  /** i18n key for the label */\n  labelKey?: string\n  /** Handle the change in input value */\n  onChange: (val: string) => void\n  /** Maximum length of the input */\n  maxLength?: number\n  /** Handle input once the user is done typing */\n  onEndEditing?: () => void\n  /** optional testID for the overall component */\n  testID?: string\n  /** optional ref value */\n  inputRef?: RefObject<TextInput>\n  /** optional boolean that displays required text next to label if set to true */\n  isRequiredField?: boolean\n  /** optional key for string to display underneath label */\n  helperTextKey?: string\n  /** optional callback to update the error message if there is an error */\n  setError?: (error?: string) => void\n  /** if this exists updates input styles to error state */\n  error?: string\n  /** optional boolean that when true displays a text area rather than a single line text input */\n  isTextArea?: boolean\n  /** optional boolean to set the cursor to the beginning of a string value */\n  setInputCursorToBeginning?: boolean\n}\n\n/**\n * Text input with a label\n */\nconst VATextInput: FC<VATextInputProps> = (props: VATextInputProps) => {\n  const {\n    inputType,\n    value,\n    labelKey,\n    onChange,\n    maxLength,\n    onEndEditing,\n    testID,\n    inputRef,\n    isRequiredField,\n    helperTextKey,\n    setError,\n    error,\n    isTextArea,\n    setInputCursorToBeginning,\n  } = props\n  const { t } = useTranslation()\n  const theme = useTheme()\n  const startTextPositon = { start: 0, end: 0 }\n  const [focusUpdated, setFocusUpdated] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n  const [selection, setSelection] = useState<{ start: number; end?: number } | undefined>(\n    setInputCursorToBeginning ? startTextPositon : undefined,\n  )\n  const ref = useRef<TextInput>(null)\n\n  useEffect(() => {\n    removeInputErrorMessage(isFocused, error, setError, focusUpdated, setFocusUpdated)\n  }, [isFocused, error, setError, focusUpdated])\n\n  let textContentType: 'emailAddress' | 'telephoneNumber' | 'none' = 'none'\n  let keyboardType: KeyboardTypeOptions = 'default'\n\n  switch (inputType) {\n    case 'email': {\n      textContentType = 'emailAddress'\n      keyboardType = 'email-address'\n      break\n    }\n    case 'phone': {\n      textContentType = 'telephoneNumber'\n      keyboardType = isIOS() ? 'number-pad' : 'numeric'\n      break\n    }\n  }\n\n  const onBlur = (): void => {\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const onFocus = () => {\n    setIsFocused(true)\n    if (setInputCursorToBeginning) {\n      setSelection(undefined)\n    }\n  }\n\n  const inputBorderWidth = getInputBorderWidth(theme, error, isFocused)\n  const textAreaHeight = 201\n\n  const inputProps: TextInputProps = {\n    value: value,\n    textContentType,\n    keyboardType,\n    maxLength,\n    disableFullscreenUI: true,\n    placeholderTextColor: theme.colors.text.placeholder,\n    textAlignVertical: isTextArea ? 'top' : undefined,\n    onChangeText: (newVal) => {\n      if ((newVal.length > 0 && keyboardType === 'number-pad') || keyboardType === 'numeric') {\n        onChange(newVal.replace(/\\D/g, ''))\n      } else {\n        onChange(newVal)\n      }\n    },\n    onEndEditing,\n    style: {\n      fontSize: theme.fontSizes.MobileBody.fontSize,\n      fontFamily: theme.fontFace.regular,\n      marginRight: 40,\n      color: isFocused ? theme.colors.text.inputFocused : theme.colors.text.input,\n      height: isTextArea ? textAreaHeight - inputBorderWidth * 2 : undefined,\n    },\n    onFocus,\n    onBlur,\n    selection,\n    multiline: isTextArea ? true : false,\n    testID,\n  }\n\n  const textAreaWrapperProps: BoxProps = {\n    backgroundColor: 'textBox',\n    height: textAreaHeight,\n    borderColor: getInputBorderColor(error, isFocused),\n    borderWidth: inputBorderWidth,\n    pl: 8,\n  }\n\n  const renderTextInput = (): ReactElement => {\n    const wrapperProps = isTextArea ? textAreaWrapperProps : getInputWrapperProps(theme, error, isFocused)\n\n    const textInputBox = (\n      <Box {...wrapperProps}>\n        <Box width=\"100%\">\n          <TextInput testID={testID} {...inputProps} ref={inputRef || ref} />\n        </Box>\n      </Box>\n    )\n\n    const content = (\n      <Box>\n        {labelKey && renderInputLabelSection(error, isRequiredField, labelKey, t, helperTextKey)}\n        {!!error && renderInputError(error)}\n        {textInputBox}\n      </Box>\n    )\n\n    return <Box>{content}</Box>\n  }\n\n  return renderTextInput()\n}\n\nexport default VATextInput\n";var l=t(64555);const a={title:"Text input"},p=void 0,d={},c="<VATextInput \ninputType={'email'} \nvalue={selected} \nonChange={(textValue) => { setSelected(textValue) }} \nisTextArea={false}/>",u=[{value:"Examples",id:"examples",level:2},{value:"Default",id:"default",level:3},{value:"Examples",id:"examples-1",level:3},{value:"Usage",id:"usage",level:2},{value:"Content considerations",id:"content-considerations",level:2},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Code usage",id:"code-usage",level:2}];function h(e){const n={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Text input allows people to enter any type of text unless otherwise restricted."}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"default",children:"Default"}),"\n",(0,o.jsx)("iframe",{width:"800",height:"450",title:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/design/g15WfeOSaVFl8Eapoc6UtP/%5BNEW%5D-Text-input?node-id=4394-547&t=13B9cqqaRF3A0suB-4",allowfullscreen:!0}),"\n",(0,o.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,o.jsx)("iframe",{width:"800",height:"450",title:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/design/g15WfeOSaVFl8Eapoc6UtP/%5BNEW%5D-Text-input?node-id=4394-548&t=13B9cqqaRF3A0suB-4",allowfullscreen:!0}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://design.va.gov/components/form/text-input",children:"Refer to the VA Design System for usage guidance"})}),"\n",(0,o.jsx)(n.h2,{id:"content-considerations",children:"Content considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Refer to the ",(0,o.jsx)(n.a,{href:"https://design.va.gov/components/form/text-input",children:"VA Design System for content considerations"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"accessibility-considerations",children:"Accessibility considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Refer to the ",(0,o.jsx)(n.a,{href:"https://design.va.gov/components/form/text-input#accessibility-considerations",children:"VA Design System for accessibility considerations"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"code-usage",children:"Code usage"}),"\n",(0,o.jsx)(n.p,{children:"Link to Storybook coming soon"}),"\n","\n",(0,o.jsx)(l.A,{componentName:"VATextInput",example:c,codeString:i})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},64555:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var s=t(58069),o=t(65537),r=t(79329),i=t(9540),l=t(84476),a=t(74848);const p=e=>{let{props:n}=e;return n?(0,a.jsx)(a.Fragment,{children:l.Ay.isEmpty(n)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(n).map((e=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:e})}),(0,a.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,a.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,a.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,a.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function d(e){const n=(0,i.d)(e.componentName),{description:t,displayName:l,props:d}=n[0],c=`How to use the ${l} component`,u=`Full code for the ${l} component`;return(0,a.jsxs)(a.Fragment,{children:[t,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(o.A,{children:[(0,a.jsx)(r.A,{value:"props",label:"Properties",children:(0,a.jsx)(p,{props:d})}),(0,a.jsx)(r.A,{value:"example",label:"Example",children:e.example&&(0,a.jsx)(s.A,{title:c,className:"language-tsx test",children:e.example})}),(0,a.jsx)(r.A,{value:"code",label:"Source Code",children:e.codeString&&(0,a.jsx)(s.A,{title:u,className:"language-tsx",children:e.codeString})}),(0,a.jsx)(r.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);