"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6453],{9540:(e,n,t)=>{t.d(n,{d:()=>a});var o=t(72077);const a=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64555:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var o=t(58069),a=t(65537),i=t(79329),s=t(9540),r=t(84476),l=t(74848);const c=({props:e})=>e?(0,l.jsx)(l.Fragment,{children:r.Ay.isEmpty(e)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(e).map((n=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:n})}),(0,l.jsx)("td",{style:{minWidth:200},children:e[n].type?.name}),(0,l.jsx)("td",{children:e[n].defaultValue&&e[n].defaultValue.value.toString()}),(0,l.jsx)("td",{children:e[n].required?"Yes":"No"}),(0,l.jsx)("td",{children:e[n].description})]},n)))})]})}):null;function d(e){const n=(0,s.d)(e.componentName),{description:t,displayName:r,props:d}=n[0],p=`How to use the ${r} component`,x=`Full code for the ${r} component`;return(0,l.jsxs)(l.Fragment,{children:[t,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(a.A,{children:[(0,l.jsx)(i.A,{value:"props",label:"Properties",children:(0,l.jsx)(c,{props:d})}),(0,l.jsx)(i.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(o.A,{title:p,className:"language-tsx test",children:e.example})}),(0,l.jsx)(i.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(o.A,{title:x,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(i.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},99774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,exampleString:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>x});const o=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/CollapsibleView","title":"CollapsibleView","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/CollapsibleView.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization","slug":"/Flagship design library/Components/Layout and Organization/CollapsibleView","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Layout and organization","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/"},"next":{"title":"LargeNavButton","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton"}}');var a=t(74848),i=t(28453);t(58069);const s="import React, { FC, useState } from 'react'\nimport { Pressable, PressableProps, ViewStyle } from 'react-native'\n\nimport { Icon } from '@department-of-veterans-affairs/mobile-component-library'\nimport { IconProps } from '@department-of-veterans-affairs/mobile-component-library/src/components/Icon/Icon'\n\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport { ColorVariant, TextArea } from './index'\n\n/**\n * Signifies props passed into {@link CollapsibleView}\n */\nexport type CollapsibleViewProps = {\n  /** text displayed on the touchable */\n  text: string\n  /** optional color for the touchable text */\n  textColor?: ColorVariant\n  /** optional param that renders the child content outside text area when set to false (defaults to true) */\n  contentInTextArea?: boolean\n  /** optional a11y hint */\n  a11yHint?: string\n  /** Whether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. **/\n  showInTextArea?: boolean\n  /** Option Test ID */\n  testID?: string\n}\n\n/**\n * CollapsibleView that on click reveals content, which is hidden again on another click\n *\n * @returns CollapsibleView component\n */\nconst CollapsibleView: FC<CollapsibleViewProps> = ({\n  text,\n  contentInTextArea = true,\n  showInTextArea = true,\n  a11yHint,\n  textColor,\n  children,\n  testID,\n}) => {\n  const theme = useTheme()\n  const [expanded, setExpanded] = useState(false)\n\n  const onPress = (): void => {\n    setExpanded(!expanded)\n  }\n\n  const boxStyles: BoxProps = {\n    // flexShrink is necessary to keep textView from expanding too far and causing a gap between text contents and arrow icon\n    // also keeps textView from pushing arrow beyond right margin when large text is enabled\n    flexShrink: 1,\n    mr: 1,\n    borderBottomWidth: 2,\n    borderBottomColor: 'photoAdd', // todo rename photoAdd border color to be more abstract (talk to design)\n  }\n\n  const getChevronIcon = (): React.ReactNode => {\n    const iconProps: IconProps = {\n      fill: theme.colors.icon.chevronCollapsible,\n      name: expanded ? 'ExpandLess' : 'ExpandMore',\n      width: 30,\n      height: 30,\n    }\n    return <Icon {...iconProps} />\n  }\n\n  const pressableProps: PressableProps = {\n    onPress,\n    accessibilityState: { expanded },\n    accessibilityRole: 'tab',\n  }\n\n  const pressableStyles: ViewStyle = {\n    flexDirection: 'row',\n    alignItems: 'center',\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  const childrenDisplayed = expanded && <Box>{children}</Box>\n\n  const touchableRow = (\n    <Box minHeight={theme.dimensions.touchableMinHeight}>\n      {/*eslint-disable-next-line react-native-a11y/has-accessibility-hint*/}\n      <Pressable\n        accessibilityLabel={text}\n        {...a11yHintProp(a11yHint || '')}\n        style={pressableStyles}\n        {...pressableProps}\n        testID={testID}>\n        <Box {...boxStyles}>\n          <TextView color={textColor} variant={'MobileBody'}>\n            {text}\n          </TextView>\n        </Box>\n        {getChevronIcon()}\n      </Pressable>\n    </Box>\n  )\n\n  const a11yProps: BoxProps = {\n    accessibilityRole: 'tablist',\n  }\n\n  // If none of the content is shown in a text area\n  if (!showInTextArea) {\n    return (\n      <Box {...a11yProps}>\n        {touchableRow}\n        {childrenDisplayed}\n      </Box>\n    )\n  }\n\n  // If the pressable row and/or content is in a text area\n  return (\n    <Box {...a11yProps}>\n      <TextArea>\n        {touchableRow}\n        {contentInTextArea && childrenDisplayed}\n      </TextArea>\n      {!contentInTextArea && childrenDisplayed}\n    </Box>\n  )\n}\n\nexport default CollapsibleView\n";var r=t(64555);const l={},c=void 0,d={},p="<CollapsibleView text={'title of dropdown'}> \n    <TextView>expanded content revealed on click</TextView> \n</CollapsibleView>",x=[];function h(e){return(0,a.jsx)(r.A,{componentName:"CollapsibleView",example:p,codeString:s})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h()}}}]);