"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1864],{9540:(e,n,t)=>{t.d(n,{d:()=>i});var o=t(72077);const i=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},11690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,exampleString:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/MultiTouchCard","title":"Multi-touch card","description":"The multi-touch card provides multiple touch targets on a list item.","source":"@site/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization","slug":"/Flagship design library/Components/Layout and Organization/MultiTouchCard","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Multi-touch card"},"sidebar":"tutorialSidebar","previous":{"title":"SimpleList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SimpleList"},"next":{"title":"Nametag","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag"}}');var i=t(74848),s=t(28453),r=(t(58069),t(64555));const a="import React, { FC, ReactElement } from 'react'\nimport { Pressable, PressableProps } from 'react-native'\n\nimport { HiddenA11yElement } from 'styles/common'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\n\nexport type MultiTouchCardProps = {\n  /** read by screen readers to identify the cards place in a list */\n  orderIdentifier?: string\n  /** accessibility label for the main section */\n  mainA11yLabel?: string\n  /** content to display in the main section */\n  mainContent: ReactElement\n  /** called when the bottom button is pressed */\n  bottomOnPress?: () => void\n  /** content to display in the bottom button */\n  bottomContent?: ReactElement\n  /** hint for the bottom button action */\n  bottomA11yHint?: string\n  /** accessibility label for the bottom section */\n  bottomA11yLabel?: string\n}\n\nconst MultiTouchCard: FC<MultiTouchCardProps> = ({\n  orderIdentifier,\n  mainContent,\n  bottomContent,\n  bottomOnPress,\n  bottomA11yHint,\n  mainA11yLabel,\n  bottomA11yLabel,\n}) => {\n  const theme = useTheme()\n\n  const hasBottomContent = !!bottomContent\n\n  const background = 'list'\n\n  let mainBoxProps: BoxProps = {\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    backgroundColor: background,\n    borderRadiusTop: 8,\n    borderRadiusBottom: hasBottomContent ? 0 : 8,\n  }\n\n  if (mainA11yLabel) {\n    mainBoxProps = { ...mainBoxProps, accessibilityLabel: mainA11yLabel }\n  }\n\n  let bottomPressableProps: PressableProps = {\n    onPress: bottomOnPress,\n    accessible: true,\n    accessibilityRole: 'link',\n    accessibilityHint: bottomA11yHint,\n  }\n\n  let bottomBoxProps: BoxProps = {\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    backgroundColor: background,\n    borderRadiusBottom: 8,\n    borderTopWidth: 0,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n  }\n\n  const getBottomContent = () => {\n    if (bottomOnPress) {\n      if (bottomA11yLabel) {\n        bottomPressableProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return (\n        <Pressable {...bottomPressableProps}>\n          <Box {...bottomBoxProps}>{bottomContent}</Box>\n        </Pressable>\n      )\n    } else {\n      if (bottomA11yLabel) {\n        bottomBoxProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return <Box {...bottomBoxProps}>{bottomContent}</Box>\n    }\n  }\n\n  return (\n    <>\n      {orderIdentifier && <HiddenA11yElement accessibilityLabel={orderIdentifier}>{orderIdentifier}</HiddenA11yElement>}\n      <Box {...mainBoxProps}>{mainContent}</Box>\n      {hasBottomContent && getBottomContent()}\n    </>\n  )\n}\n\nexport default MultiTouchCard\n",l={title:"Multi-touch card"},d=void 0,c={},h="<CrisisLineCta onPress={onCrisisLine} />",m=[{value:"Examples",id:"examples",level:2},{value:"Default",id:"default",level:3},{value:"Variations",id:"variations",level:3},{value:"Usage",id:"usage",level:2},{value:"When to use Multi-touch card",id:"when-to-use-multi-touch-card",level:3},{value:"How this component works",id:"how-this-component-works",level:3},{value:"Instances of this component in production",id:"instances-of-this-component-in-production",level:3},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Code usage",id:"code-usage",level:2}];function u(e){const n={h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The multi-touch card provides multiple touch targets on a list item."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"default",children:"Default"}),"\n",(0,i.jsx)("iframe",{width:"800",height:"450",title:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=9097-30010&mode=design&t=GYfUoRF9YkczEweR-4",allowfullscreen:!0}),"\n",(0,i.jsx)(n.h3,{id:"variations",children:"Variations"}),"\n",(0,i.jsx)("iframe",{width:"800",height:"450",title:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=9118-30720&mode=design&t=GYfUoRF9YkczEweR-4",allowfullscreen:!0}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-multi-touch-card",children:"When to use Multi-touch card"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The component should be used when a list item includes a lot of data and requires 2-3 touch targets."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-this-component-works",children:"How this component works"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Component should use established color patterns."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"instances-of-this-component-in-production",children:"Instances of this component in production"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prescriptions"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessibility-considerations",children:"Accessibility considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The card's type and place in the list (ex. prescription 1 of 1) should be called out first by the screen reader. The screen reader should call out each individual touch target by its respective type (button, link; etc) along with its respective a11y hint."}),"\n",(0,i.jsx)(n.li,{children:"Keyboards and Voice Access/Voice Control should navigate through each line item separately"}),"\n",(0,i.jsx)(n.li,{children:"Keyboards and Voice Access/Voice Control should navigate each touch area separately"}),"\n",(0,i.jsx)(n.li,{children:"Touch target UI should have clear and distinguishable areas/borders"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"code-usage",children:"Code usage"}),"\n","\n",(0,i.jsx)(r.A,{componentName:"MultiTouchCard",example:h,codeString:a})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},64555:(e,n,t)=>{t.d(n,{A:()=>c});t(96540);var o=t(58069),i=t(65537),s=t(79329),r=t(9540),a=t(84476),l=t(74848);const d=e=>{let{props:n}=e;return n?(0,l.jsx)(l.Fragment,{children:a.Ay.isEmpty(n)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(n).map((e=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:e})}),(0,l.jsx)("td",{style:{minWidth:200},children:n[e].type?.name}),(0,l.jsx)("td",{children:n[e].defaultValue&&n[e].defaultValue.value.toString()}),(0,l.jsx)("td",{children:n[e].required?"Yes":"No"}),(0,l.jsx)("td",{children:n[e].description})]},e)))})]})}):null};function c(e){const n=(0,r.d)(e.componentName),{description:t,displayName:a,props:c}=n[0],h=`How to use the ${a} component`,m=`Full code for the ${a} component`;return(0,l.jsxs)(l.Fragment,{children:[t,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(i.A,{children:[(0,l.jsx)(s.A,{value:"props",label:"Properties",children:(0,l.jsx)(d,{props:c})}),(0,l.jsx)(s.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(o.A,{title:h,className:"language-tsx test",children:e.example})}),(0,l.jsx)(s.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(o.A,{title:m,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(s.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);