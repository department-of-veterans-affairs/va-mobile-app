"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2585],{9540:(e,t,n)=>{n.d(t,{d:()=>s});var i=n(72077);const s=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},64555:(e,t,n)=>{n.d(t,{A:()=>c});n(96540);var i=n(58069),s=n(65537),l=n(79329),r=n(9540),o=n(84476),a=n(74848);const x=({props:e})=>e?(0,a.jsx)(a.Fragment,{children:o.Ay.isEmpty(e)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(e).map((t=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:t})}),(0,a.jsx)("td",{style:{minWidth:200},children:e[t].type?.name}),(0,a.jsx)("td",{children:e[t].defaultValue&&e[t].defaultValue.value.toString()}),(0,a.jsx)("td",{children:e[t].required?"Yes":"No"}),(0,a.jsx)("td",{children:e[t].description})]},t)))})]})}):null;function c(e){const t=(0,r.d)(e.componentName),{description:n,displayName:o,props:c}=t[0],d=`How to use the ${o} component`,p=`Full code for the ${o} component`;return(0,a.jsxs)(a.Fragment,{children:[n,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(s.A,{children:[(0,a.jsx)(l.A,{value:"props",label:"Properties",children:(0,a.jsx)(x,{props:c})}),(0,a.jsx)(l.A,{value:"example",label:"Example",children:e.example&&(0,a.jsx)(i.A,{title:d,className:"language-tsx test",children:e.example})}),(0,a.jsx)(l.A,{value:"code",label:"Source Code",children:e.codeString&&(0,a.jsx)(i.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,a.jsx)(l.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},81457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>x,default:()=>h,exampleString:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"Flagship design library/Components/TextViews/TextLines","title":"TextLines","description":"","source":"@site/docs/Flagship design library/Components/TextViews/TextLines.mdx","sourceDirName":"Flagship design library/Components/TextViews","slug":"/Flagship design library/Components/TextViews/TextLines","permalink":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextLines","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"TextLineWithIcon","permalink":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextLineWithIcon"},"next":{"title":"TextView","permalink":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextView"}}');var s=n(74848),l=n(28453);n(58069);const r="import React, { FC } from 'react'\n\nimport Box from './Box'\nimport LabelTag from './LabelTag'\nimport TextLineWithIcon, { TextLineWithIconProps } from './TextLineWithIcon'\nimport TextView from './TextView'\nimport { TextLine } from './types'\n\ntype TextLinesProps = {\n  /** List of text for the button */\n  listOfText?: Array<TextLine | TextLineWithIconProps>\n  /** if true the text will be selectable */\n  selectable?: boolean\n}\n\n/**Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line*/\nexport const TextLines: FC<TextLinesProps> = ({ listOfText, selectable }) => {\n  return (\n    <Box flex={1}>\n      <Box flexDirection=\"column\">\n        {listOfText?.map((textObj: TextLine | TextLineWithIconProps, index: number) => {\n          if ('iconProps' in textObj && textObj.iconProps !== undefined) {\n            return <TextLineWithIcon key={index} {...textObj} />\n          } else {\n            const { text, variant = 'MobileBody', color, textAlign = 'left', textTag, mt, mb } = textObj\n            if (textTag) {\n              return (\n                <Box mt={mt} mb={mb} key={index}>\n                  <LabelTag text={text} key={index} labelType={textTag.labelType} />\n                </Box>\n              )\n            }\n\n            return (\n              <TextView\n                variant={variant}\n                textAlign={textAlign}\n                color={color}\n                key={index}\n                selectable={selectable}\n                mt={mt}\n                mb={mb}\n                accessible={false}>\n                {text}\n              </TextView>\n            )\n          }\n        })}\n      </Box>\n    </Box>\n  )\n}\n";var o=n(64555);const a={},x=void 0,c={},d="<TextLines listOfText={[{ text: 'my text', isBold: true}]} />",p=[];function m(e){return(0,s.jsx)(o.A,{componentName:"TextLines",example:d,codeString:r})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m()}}}]);