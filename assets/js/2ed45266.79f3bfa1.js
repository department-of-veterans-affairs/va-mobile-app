"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4805],{9540:(e,t,n)=>{n.d(t,{d:()=>i});var s=n(72077);const i=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},64555:(e,t,n)=>{n.d(t,{A:()=>c});n(96540);var s=n(58069),i=n(65537),o=n(79329),a=n(9540),r=n(84476),l=n(74848);const d=e=>{let{props:t}=e;return t?(0,l.jsx)(l.Fragment,{children:r.Ay.isEmpty(t)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(t).map((e=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:e})}),(0,l.jsx)("td",{style:{minWidth:200},children:t[e].type?.name}),(0,l.jsx)("td",{children:t[e].defaultValue&&t[e].defaultValue.value.toString()}),(0,l.jsx)("td",{children:t[e].required?"Yes":"No"}),(0,l.jsx)("td",{children:t[e].description})]},e)))})]})}):null};function c(e){const t=(0,a.d)(e.componentName),{description:n,displayName:r,props:c}=t[0],m=`How to use the ${r} component`,p=`Full code for the ${r} component`;return(0,l.jsxs)(l.Fragment,{children:[n,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(i.A,{children:[(0,l.jsx)(o.A,{value:"props",label:"Properties",children:(0,l.jsx)(d,{props:c})}),(0,l.jsx)(o.A,{value:"example",label:"Example",children:e.example&&(0,l.jsx)(s.A,{title:m,className:"language-tsx test",children:e.example})}),(0,l.jsx)(o.A,{value:"code",label:"Source Code",children:e.codeString&&(0,l.jsx)(s.A,{title:p,className:"language-tsx",children:e.codeString})}),(0,l.jsx)(o.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}},73647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>g,exampleString:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/List/MessageList","title":"MessageList","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/List/MessageList.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization/List","slug":"/Flagship design library/Components/Layout and Organization/List/MessageList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/MessageList","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"List header","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader"},"next":{"title":"SelectionList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SelectionList"}}');var i=n(74848),o=n(28453);n(58069);const a="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { Icon } from '@department-of-veterans-affairs/mobile-component-library'\n\nimport { ButtonDecoratorType } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { generateTestIDForInlineTextIconList } from 'utils/common'\nimport { useTheme } from 'utils/hooks'\n\nimport { READ } from '../constants/secureMessaging'\nimport Box from './Box'\nimport { InlineTextWithIcons } from './InlineTextWithIcons'\nimport LabelTag, { LabelTagTypeConstants } from './LabelTag'\nimport { InlineTextWithIconsProps, List, ListItemObj, ListProps } from './index'\n\n/**\n * Signifies each item in the list of items in {@link MessageListProps}\n */\nexport type MessageListItemObj = {\n  /** lines of text to display */\n  inlineTextWithIcons: Array<InlineTextWithIconsProps>\n  /** Tells if one is displaying sent folder messages list - needed for READ tag display conditional */\n  isSentFolder: boolean\n  /** Attribute for whether recipient has read user's sent message (Sent folder)\n   * OR whether user has read received message (Inbox || Folders other than 'Sent')\n   * Usage depends on which folder you're in */\n  readReceipt?: string\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link MessageList}\n */\nexport type MessageListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<MessageListItemObj>\n} & Partial<ListProps>\n\n/**\n * Display a list of buttons with text and optional actions\n */\nconst MessageList: FC<MessageListProps> = ({ items, title, titleA11yLabel }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n  const listItemObjs: Array<ListItemObj> = items.map((item) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { inlineTextWithIcons, testId, detoxTestID, ...listItemObj } = item\n    let testIdToUse = testId ? testId : generateTestIDForInlineTextIconList(inlineTextWithIcons, t)\n\n    // We want to display black 'Read' tag only for sent messages that have been seen by the recipients\n    const isSentReadTag = item.isSentFolder && item.readReceipt === READ\n    const sentReadTagA11y = isSentReadTag ? t('secureMessaging.folders.sent.read.a11y') : ''\n\n    const content = (\n      // Package individual textLineWithIcon components together into one message\n      <Box flex={1} flexDirection=\"row\" alignItems=\"center\">\n        <Box flex={1} flexDirection=\"column\" mb={7}>\n          {inlineTextWithIcons?.map((textObj: InlineTextWithIconsProps, index: number) => {\n            return <InlineTextWithIcons key={index} {...textObj} />\n          })}\n          {isSentReadTag && (\n            <Box mt={7}>\n              <LabelTag text={t('secureMessaging.folders.read.tag')} labelType={LabelTagTypeConstants.tagInactive} />\n            </Box>\n          )}\n        </Box>\n        <Icon\n          name=\"ChevronRight\"\n          width={theme.dimensions.chevronListItemWidth}\n          height={theme.dimensions.chevronListItemHeight}\n          fill={theme.colors.icon.chevronListItem}\n          testID=\"ChevronRight\"\n        />\n      </Box>\n    )\n\n    // Append accessibility label for Sent messages 'READ' tag\n    testIdToUse = `${testIdToUse} ${sentReadTagA11y}`.trim()\n    const detoxTestIDToUse = detoxTestID ? detoxTestID : testIdToUse\n\n    return {\n      ...listItemObj,\n      content,\n      testId: testIdToUse,\n      decorator: ButtonDecoratorType.None,\n      detoxTestID: detoxTestIDToUse,\n    }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default MessageList\n";var r=n(64555);const l={},d=void 0,c={},m="<MessageList items={getMessagesListItems()} title={folderName} />",p=[];function h(e){return(0,i.jsx)(r.A,{componentName:"MessageList",example:m,codeString:a})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h()}}}]);