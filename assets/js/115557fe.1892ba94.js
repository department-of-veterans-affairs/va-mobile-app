"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[72],{857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>x,contentTitle:()=>d,default:()=>m,exampleString:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Flagship design library/Components/TextViews/VABulletList","title":"VABulletList","description":"","source":"@site/docs/Flagship design library/Components/TextViews/VABulletList.mdx","sourceDirName":"Flagship design library/Components/TextViews","slug":"/Flagship design library/Components/TextViews/VABulletList","permalink":"/va-mobile-app/docs/Flagship design library/Components/TextViews/VABulletList","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"TextView","permalink":"/va-mobile-app/docs/Flagship design library/Components/TextViews/TextView"},"next":{"title":"Uncategorized","permalink":"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/"}}');var l=n(74848),s=n(28453);n(58069);const r="import React, { FC } from 'react'\n\nimport _ from 'underscore'\n\nimport { VATextColors } from 'styles/theme'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BackgroundVariant } from './Box'\nimport TextView, { FontVariant, TextViewProps } from './TextView'\n\n/**\n * Props for item in {@link listOfText}\n */\nexport type VABulletListText = {\n  /** string to display */\n  text: string\n\n  /** optional parameter to display given bolded text before main text */\n  boldedTextPrefix?: string\n\n  /** optional parameter to display given bolded text after main text */\n  boldedText?: string\n\n  /** optional variant for text, defaults to regular */\n  variant?: FontVariant\n\n  /** optional color */\n  color?: keyof VATextColors\n\n  /** optional accessibility label for text */\n  a11yLabel?: string\n}\n\n/**\n * Props for {@link VABulletList}\n */\nexport type VABulletListProps = {\n  /** list of text to display in a bulleted list*/\n  listOfText: Array<string | VABulletListText>\n\n  /** optional paragraph spacing */\n  paragraphSpacing?: boolean\n\n  /** optional bullet color */\n  bulletColor?: BackgroundVariant\n}\n\n/**\n * Displays the list of text as a bulleted list\n */\nconst VABulletList: FC<VABulletListProps> = ({ listOfText, paragraphSpacing, bulletColor }) => {\n  const theme = useTheme()\n\n  const getUpdatedListOfText = (): Array<VABulletListText> => {\n    if (_.isString(listOfText[0])) {\n      const updatedListOfTextItem: Array<VABulletListText> = []\n      _.forEach(listOfText, (text) => {\n        updatedListOfTextItem.push({ text: text as string })\n      })\n      return updatedListOfTextItem\n    }\n\n    return listOfText as Array<VABulletListText>\n  }\n\n  return (\n    <Box mb={paragraphSpacing ? theme.dimensions.standardMarginBetween : undefined}>\n      {_.map(getUpdatedListOfText(), (textItem, index) => {\n        const { variant, color, text, boldedTextPrefix, boldedText, a11yLabel } = textItem\n\n        const textViewProps: TextViewProps = {\n          variant: variant || 'MobileBody',\n          color: color || 'bodyText',\n          flexWrap: 'wrap',\n          flex: 1,\n        }\n\n        return (\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"flex-start\"\n            key={index}\n            accessible={true}\n            accessibilityRole=\"text\">\n            <Box mr={20} mt={12}>\n              <Box backgroundColor={bulletColor || 'bullet'} height={6} width={6} />\n            </Box>\n            {/*eslint-disable-next-line react-native-a11y/has-accessibility-hint*/}\n            <TextView {...textViewProps} accessibilityLabel={a11yLabel}>\n              {!!boldedTextPrefix && <TextView variant=\"MobileBodyBold\">{boldedTextPrefix}</TextView>}\n              {text.trim()}\n              {!!boldedText && <TextView variant=\"MobileBodyBold\">{boldedText}</TextView>}\n            </TextView>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nexport default VABulletList\n";var o=n(64555);const a={},d=void 0,x={},p="<VABulletList listOfText={['first line', 'second line']} />",c=[];function u(e){return(0,l.jsx)(o.A,{componentName:"VABulletList",example:p,codeString:r})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(u,{...e})}):u()}},9540:(e,t,n)=>{n.d(t,{d:()=>l});var i=n(72077);const l=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},64555:(e,t,n)=>{n.d(t,{A:()=>x});n(96540);var i=n(58069),l=n(65537),s=n(79329),r=n(9540),o=n(84476),a=n(74848);const d=e=>{let{props:t}=e;return t?(0,a.jsx)(a.Fragment,{children:o.Ay.isEmpty(t)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(t).map((e=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:e})}),(0,a.jsx)("td",{style:{minWidth:200},children:t[e].type?.name}),(0,a.jsx)("td",{children:t[e].defaultValue&&t[e].defaultValue.value.toString()}),(0,a.jsx)("td",{children:t[e].required?"Yes":"No"}),(0,a.jsx)("td",{children:t[e].description})]},e)))})]})}):null};function x(e){const t=(0,r.d)(e.componentName),{description:n,displayName:o,props:x}=t[0],p=`How to use the ${o} component`,c=`Full code for the ${o} component`;return(0,a.jsxs)(a.Fragment,{children:[n,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(l.A,{children:[(0,a.jsx)(s.A,{value:"props",label:"Properties",children:(0,a.jsx)(d,{props:x})}),(0,a.jsx)(s.A,{value:"example",label:"Example",children:e.example&&(0,a.jsx)(i.A,{title:p,className:"language-tsx test",children:e.example})}),(0,a.jsx)(s.A,{value:"code",label:"Source Code",children:e.codeString&&(0,a.jsx)(i.A,{title:c,className:"language-tsx",children:e.codeString})}),(0,a.jsx)(s.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:e.accessibilityInfo})})]})]})}}}]);