"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9274],{9540:(t,e,n)=>{n.d(e,{d:()=>i});var s=n(72077);const i=t=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((e=>e.displayName===t))},64555:(t,e,n)=>{n.d(e,{A:()=>p});n(96540);var s=n(58069),i=n(65537),o=n(79329),r=n(9540),l=n(84476),a=n(74848);const d=t=>{let{props:e}=t;return e?(0,a.jsx)(a.Fragment,{children:l.Ay.isEmpty(e)?(0,a.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default Value"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(e).map((t=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:t})}),(0,a.jsx)("td",{style:{minWidth:200},children:e[t].type?.name}),(0,a.jsx)("td",{children:e[t].defaultValue&&e[t].defaultValue.value.toString()}),(0,a.jsx)("td",{children:e[t].required?"Yes":"No"}),(0,a.jsx)("td",{children:e[t].description})]},t)))})]})}):null};function p(t){const e=(0,r.d)(t.componentName),{description:n,displayName:l,props:p}=e[0],c=`How to use the ${l} component`,m=`Full code for the ${l} component`;return(0,a.jsxs)(a.Fragment,{children:[n,(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"props",label:"Properties",children:(0,a.jsx)(d,{props:p})}),(0,a.jsx)(o.A,{value:"example",label:"Example",children:t.example&&(0,a.jsx)(s.A,{title:c,className:"language-tsx test",children:t.example})}),(0,a.jsx)(o.A,{value:"code",label:"Source Code",children:t.codeString&&(0,a.jsx)(s.A,{title:m,className:"language-tsx",children:t.codeString})}),(0,a.jsx)(o.A,{value:"accessibility",label:"Accessibility",children:(0,a.jsx)("pre",{className:"preText",children:t.accessibilityInfo})})]})]})}},95893:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>d,default:()=>u,exampleString:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"Flagship design library/Components/Layout and Organization/List/SimpleList","title":"SimpleList","description":"","source":"@site/docs/Flagship design library/Components/Layout and Organization/List/SimpleList.mdx","sourceDirName":"Flagship design library/Components/Layout and Organization/List","slug":"/Flagship design library/Components/Layout and Organization/List/SimpleList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SimpleList","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SelectionList","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SelectionList"},"next":{"title":"Multi-touch card","permalink":"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard"}}');var i=n(74848),o=n(28453);n(58069);const r="import React, { FC } from 'react'\n\nimport { generateTestIDForTextList } from 'utils/common'\n\nimport { TextLines } from './TextLines'\nimport { List, ListItemObj, ListProps } from './index'\nimport { TextLine } from './types'\n\n/**\n * Signifies each item in the list of items in {@link SimpleListProps}\n */\nexport type SimpleListItemObj = {\n  /** lines of text to display */\n  text: string\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link SimpleList}\n */\nexport type SimpleListProps = {\n  items: Array<SimpleListItemObj>\n} & Partial<ListProps>\n\n/**Component to show a list with one line of text per item*/\nconst SimpleList: FC<SimpleListProps> = ({ items, title, titleA11yLabel }) => {\n  const listItemObjs: Array<ListItemObj> = items.map((item: SimpleListItemObj) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { text, testId, detoxTestID, ...listItemObj } = { ...item }\n\n    const textLine: Array<TextLine> = [{ text } as TextLine]\n\n    const testIdToUse = testId ? testId : generateTestIDForTextList(textLine)\n    const content = <TextLines listOfText={textLine} />\n    const detoxTestIDToUse = detoxTestID ? detoxTestID : testIdToUse\n\n    return { ...listItemObj, content, testId: testIdToUse, detoxTestID: detoxTestIDToUse }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default SimpleList\n";var l=n(64555);const a={},d=void 0,p={},c="const exampleList: Array<SimpleListItemObj> = \n[\n    {\n      text: 'the button',\n      a11yHintText: 'press this button to do something',\n      onPress: () => { console.log('button 1 pressed') },\n      testId: 'line-1-on-the-button',\n    },\n    {\n      text: 'the second button',\n      a11yHintText: 'press this button to do something',\n      onPress: () => { console.log('button 2 pressed') },\n      testId: 'line-1-on-the-second-button',\n    },\n]\n\n<SimpleList items={exampleList} />",m=[];function x(t){return(0,i.jsx)(l.A,{componentName:"SimpleList",example:c,codeString:r})}function u(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(x,{...t})}):x()}}}]);