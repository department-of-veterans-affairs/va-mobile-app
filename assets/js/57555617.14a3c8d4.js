"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5420],{9540:(n,e,t)=>{t.d(e,{d:()=>r});var a=t(72077);const r=n=>(0,a.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((e=>e.displayName===n))},37447:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>x,exampleString:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"Flagship design library/Components/Navigation/Secondary/CarouselTabBar","title":"CarouselTabBar","description":"","source":"@site/docs/Flagship design library/Components/Navigation/Secondary/CarouselTabBar.mdx","sourceDirName":"Flagship design library/Components/Navigation/Secondary","slug":"/Flagship design library/Components/Navigation/Secondary/CarouselTabBar","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/CarouselTabBar","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Carousel","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Carousel"},"next":{"title":"Pagination","permalink":"/va-mobile-app/docs/Flagship design library/Components/Navigation/Secondary/Pagination"}}');var r=t(74848),s=t(28453);t(58069);const o="import React, { ReactElement, useState } from 'react'\nimport { Pressable } from 'react-native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\n\nimport { BottomTabNavigationEventMap } from '@react-navigation/bottom-tabs/lib/typescript/src/types'\nimport { NavigationHelpers, ParamListBase } from '@react-navigation/native'\n\nimport { TFunction } from 'i18next'\nimport styled from 'styled-components'\nimport _ from 'underscore'\n\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useRouteNavigation, useTheme } from 'utils/hooks'\nimport { themeFn } from 'utils/theme'\n\nimport { Box, BoxProps, TextView } from '../index'\nimport { CarouselScreen } from './Carousel'\n\nconst StyledSafeAreaView = styled(SafeAreaView)`\n  background-color: ${themeFn((theme) => theme.colors.background.carousel)};\n`\n\nconst StyledPressable = styled(Pressable)`\n  min-height: ${themeFn((theme) => theme.dimensions.touchableMinHeight)}px;\n  justify-content: center;\n`\n\ntype CarouselTabBarProps = {\n  /** the tab navigators navigation helpers */\n  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>\n\n  /** called when the skip button is clicked or the user has gone through all the carousel components */\n  onCarouselEnd: () => void\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n}\n\n/**A common component with the carousel tab bar content. Displays skip button, continue button, and a progress bar*/\nfunction CarouselTabBar({ onCarouselEnd, screenList, translation }: CarouselTabBarProps) {\n  const theme = useTheme()\n  const [currentScreenIndex, setCurrentScreenIndex] = useState(0)\n  const a11yHints = screenList[currentScreenIndex].a11yHints\n  const navigateTo = useRouteNavigation()\n\n  const onContinue = (): void => {\n    const updatedIndex = currentScreenIndex + 1\n\n    if (updatedIndex === screenList.length) {\n      onCarouselEnd()\n      return\n    }\n\n    setCurrentScreenIndex(updatedIndex)\n    navigateTo(screenList[updatedIndex].name)\n  }\n\n  const goBack = (): void => {\n    const updatedIndex = currentScreenIndex - 1\n    setCurrentScreenIndex(updatedIndex)\n    navigateTo(screenList[updatedIndex].name)\n  }\n\n  const getProgressBar = (): ReactElement[] => {\n    return _.map(screenList, (screen, index) => {\n      const boxProps: BoxProps = {\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        opacity: index === currentScreenIndex ? 1 : 0.5,\n        m: 6,\n        backgroundColor: 'carouselTab',\n      }\n\n      return <Box {...boxProps} key={index} />\n    })\n  }\n\n  const goBackOrSkipBtn = () => {\n    let onPressCallback: () => void\n    let buttonText: string\n    let allyHint: string | undefined\n\n    if (currentScreenIndex === 0) {\n      onPressCallback = onCarouselEnd\n      buttonText = 'skip'\n      allyHint = a11yHints?.skipHint\n    } else {\n      onPressCallback = goBack\n      buttonText = 'back'\n      allyHint = a11yHints?.backHint\n    }\n\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-hint\n      <StyledPressable\n        onPress={onPressCallback}\n        accessibilityLabel={translation(buttonText)}\n        testID=\"onboardingSkipBackButtonID\"\n        accessibilityRole=\"link\"\n        {...a11yHintProp(allyHint || '')}>\n        <TextView variant=\"MobileBody\" color=\"primaryContrast\" allowFontScaling={false} mr=\"auto\" selectable={false}>\n          {translation(buttonText)}\n        </TextView>\n      </StyledPressable>\n    )\n  }\n\n  const nextOrDoneBtn = () => {\n    let buttonText: string\n    let allyHint: string | undefined\n\n    if (currentScreenIndex === screenList.length - 1) {\n      buttonText = 'done'\n      allyHint = a11yHints?.doneHint\n    } else {\n      buttonText = 'next'\n      allyHint = a11yHints?.continueHint\n    }\n\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-hint\n      <StyledPressable\n        onPress={onContinue}\n        accessibilityLabel={translation(buttonText)}\n        testID=\"onboardingDoneNextButtonID\"\n        accessibilityRole=\"link\"\n        {...a11yHintProp(allyHint || '')}>\n        <TextView\n          variant=\"MobileBodyBold\"\n          color=\"primaryContrast\"\n          allowFontScaling={false}\n          ml=\"auto\"\n          selectable={false}>\n          {translation(buttonText)}\n        </TextView>\n      </StyledPressable>\n    )\n  }\n\n  const progressBarContainerProps: BoxProps = {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    accessibilityRole: 'progressbar',\n    accessible: true,\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  return (\n    <StyledSafeAreaView edges={['bottom']}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        height={70}\n        backgroundColor=\"carousel\"\n        alignItems=\"center\"\n        mx={theme.dimensions.gutter}>\n        <Box flex={1} display=\"flex\" justifyContent=\"center\">\n          {goBackOrSkipBtn()}\n        </Box>\n        <Box\n          testID={'carouselIndicators'}\n          {...a11yHintProp(a11yHints?.carouselIndicatorsHint || '')}\n          {...progressBarContainerProps}>\n          {getProgressBar()}\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"center\">\n          {nextOrDoneBtn()}\n        </Box>\n      </Box>\n    </StyledSafeAreaView>\n  )\n}\n\nexport default CarouselTabBar\n";var i=t(64555);const l={},c=void 0,d={},u='<CarouselTabNav.Navigator \ntabBar={(props): \nReact.ReactNode => <CarouselTabBar {...props} \nonCarouselEnd={onCarouselEnd} \ntranslation={translation} \nscreenList={screenList} />}>\n    <CarouselTabNav.Screen \n    name="Main" \n    children={(): ReactElement => <CarouselStackComponent screenList={screenList} />} \n    options={{ headerShown: false }} />\n</CarouselTabNav.Navigator>',p=[];function m(n){return(0,r.jsx)(i.A,{componentName:"CarouselTabBar",example:u,codeString:o})}function x(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m()}},64555:(n,e,t)=>{t.d(e,{A:()=>d});t(96540);var a=t(58069),r=t(65537),s=t(79329),o=t(9540),i=t(84476),l=t(74848);const c=n=>{let{props:e}=n;return e?(0,l.jsx)(l.Fragment,{children:i.Ay.isEmpty(e)?(0,l.jsx)("pre",{className:"preText",children:"This component does not have props defined"}):(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Name"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Default Value"}),(0,l.jsx)("th",{children:"Required"}),(0,l.jsx)("th",{children:"Description"})]})}),(0,l.jsx)("tbody",{children:Object.keys(e).map((n=>(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:n})}),(0,l.jsx)("td",{style:{minWidth:200},children:e[n].type?.name}),(0,l.jsx)("td",{children:e[n].defaultValue&&e[n].defaultValue.value.toString()}),(0,l.jsx)("td",{children:e[n].required?"Yes":"No"}),(0,l.jsx)("td",{children:e[n].description})]},n)))})]})}):null};function d(n){const e=(0,o.d)(n.componentName),{description:t,displayName:i,props:d}=e[0],u=`How to use the ${i} component`,p=`Full code for the ${i} component`;return(0,l.jsxs)(l.Fragment,{children:[t,(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(s.A,{value:"props",label:"Properties",children:(0,l.jsx)(c,{props:d})}),(0,l.jsx)(s.A,{value:"example",label:"Example",children:n.example&&(0,l.jsx)(a.A,{title:u,className:"language-tsx test",children:n.example})}),(0,l.jsx)(s.A,{value:"code",label:"Source Code",children:n.codeString&&(0,l.jsx)(a.A,{title:p,className:"language-tsx",children:n.codeString})}),(0,l.jsx)(s.A,{value:"accessibility",label:"Accessibility",children:(0,l.jsx)("pre",{className:"preText",children:n.accessibilityInfo})})]})]})}}}]);